//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: rpc/debug.proto

package qaul.rpc.debug;

@kotlin.jvm.JvmName("-initializelogToFile")
inline fun logToFile(block: qaul.rpc.debug.LogToFileKt.Dsl.() -> kotlin.Unit): qaul.rpc.debug.DebugOuterClass.LogToFile =
  qaul.rpc.debug.LogToFileKt.Dsl._create(qaul.rpc.debug.DebugOuterClass.LogToFile.newBuilder()).apply { block() }._build()
object LogToFileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.rpc.debug.DebugOuterClass.LogToFile.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.debug.DebugOuterClass.LogToFile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.debug.DebugOuterClass.LogToFile = _builder.build()

    /**
     * <code>bool enable = 1;</code>
     */
    var enable: kotlin.Boolean
      @JvmName("getEnable")
      get() = _builder.getEnable()
      @JvmName("setEnable")
      set(value) {
        _builder.setEnable(value)
      }
    /**
     * <code>bool enable = 1;</code>
     */
    fun clearEnable() {
      _builder.clearEnable()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.rpc.debug.DebugOuterClass.LogToFile.copy(block: qaul.rpc.debug.LogToFileKt.Dsl.() -> kotlin.Unit): qaul.rpc.debug.DebugOuterClass.LogToFile =
  qaul.rpc.debug.LogToFileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

