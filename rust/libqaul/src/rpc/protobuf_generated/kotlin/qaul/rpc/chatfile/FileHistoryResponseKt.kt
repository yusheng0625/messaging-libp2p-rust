//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/chat/chatfile_rpc.proto

package qaul.rpc.chatfile;

@kotlin.jvm.JvmName("-initializefileHistoryResponse")
inline fun fileHistoryResponse(block: qaul.rpc.chatfile.FileHistoryResponseKt.Dsl.() -> kotlin.Unit): qaul.rpc.chatfile.ChatfileRpc.FileHistoryResponse =
  qaul.rpc.chatfile.FileHistoryResponseKt.Dsl._create(qaul.rpc.chatfile.ChatfileRpc.FileHistoryResponse.newBuilder()).apply { block() }._build()
object FileHistoryResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.rpc.chatfile.ChatfileRpc.FileHistoryResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.chatfile.ChatfileRpc.FileHistoryResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.chatfile.ChatfileRpc.FileHistoryResponse = _builder.build()

    /**
     * <pre>
     * offset
     * </pre>
     *
     * <code>uint32 offset = 1;</code>
     */
    var offset: kotlin.Int
      @JvmName("getOffset")
      get() = _builder.getOffset()
      @JvmName("setOffset")
      set(value) {
        _builder.setOffset(value)
      }
    /**
     * <pre>
     * offset
     * </pre>
     *
     * <code>uint32 offset = 1;</code>
     */
    fun clearOffset() {
      _builder.clearOffset()
    }

    /**
     * <pre>
     * limit
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    var limit: kotlin.Int
      @JvmName("getLimit")
      get() = _builder.getLimit()
      @JvmName("setLimit")
      set(value) {
        _builder.setLimit(value)
      }
    /**
     * <pre>
     * limit
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    fun clearLimit() {
      _builder.clearLimit()
    }

    /**
     * <pre>
     * limit
     * </pre>
     *
     * <code>uint64 total = 3;</code>
     */
    var total: kotlin.Long
      @JvmName("getTotal")
      get() = _builder.getTotal()
      @JvmName("setTotal")
      set(value) {
        _builder.setTotal(value)
      }
    /**
     * <pre>
     * limit
     * </pre>
     *
     * <code>uint64 total = 3;</code>
     */
    fun clearTotal() {
      _builder.clearTotal()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class HistoriesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * histories
     * </pre>
     *
     * <code>repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;</code>
     */
     val histories: com.google.protobuf.kotlin.DslList<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry, HistoriesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getHistoriesList()
      )
    /**
     * <pre>
     * histories
     * </pre>
     *
     * <code>repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;</code>
     * @param value The histories to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addHistories")
    fun com.google.protobuf.kotlin.DslList<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry, HistoriesProxy>.add(value: qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry) {
      _builder.addHistories(value)
    }
    /**
     * <pre>
     * histories
     * </pre>
     *
     * <code>repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;</code>
     * @param value The histories to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignHistories")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry, HistoriesProxy>.plusAssign(value: qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry) {
      add(value)
    }
    /**
     * <pre>
     * histories
     * </pre>
     *
     * <code>repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;</code>
     * @param values The histories to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllHistories")
    fun com.google.protobuf.kotlin.DslList<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry, HistoriesProxy>.addAll(values: kotlin.collections.Iterable<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry>) {
      _builder.addAllHistories(values)
    }
    /**
     * <pre>
     * histories
     * </pre>
     *
     * <code>repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;</code>
     * @param values The histories to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllHistories")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry, HistoriesProxy>.plusAssign(values: kotlin.collections.Iterable<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry>) {
      addAll(values)
    }
    /**
     * <pre>
     * histories
     * </pre>
     *
     * <code>repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;</code>
     * @param index The index to set the value at.
     * @param value The histories to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setHistories")
    operator fun com.google.protobuf.kotlin.DslList<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry, HistoriesProxy>.set(index: kotlin.Int, value: qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry) {
      _builder.setHistories(index, value)
    }
    /**
     * <pre>
     * histories
     * </pre>
     *
     * <code>repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearHistories")
    fun com.google.protobuf.kotlin.DslList<qaul.rpc.chatfile.ChatfileRpc.FileHistoryEntry, HistoriesProxy>.clear() {
      _builder.clearHistories()
    }

  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.rpc.chatfile.ChatfileRpc.FileHistoryResponse.copy(block: qaul.rpc.chatfile.FileHistoryResponseKt.Dsl.() -> kotlin.Unit): qaul.rpc.chatfile.ChatfileRpc.FileHistoryResponse =
  qaul.rpc.chatfile.FileHistoryResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

