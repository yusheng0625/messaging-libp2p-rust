//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/chat/chat.proto

package qaul.rpc.chat;

@kotlin.jvm.JvmName("-initializechat")
inline fun chat(block: qaul.rpc.chat.ChatKt.Dsl.() -> kotlin.Unit): qaul.rpc.chat.ChatOuterClass.Chat =
  qaul.rpc.chat.ChatKt.Dsl._create(qaul.rpc.chat.ChatOuterClass.Chat.newBuilder()).apply { block() }._build()
object ChatKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.rpc.chat.ChatOuterClass.Chat.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.chat.ChatOuterClass.Chat.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.chat.ChatOuterClass.Chat = _builder.build()

    /**
     * <pre>
     * request a specific conversation
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatConversationRequest conversation_request = 3;</code>
     */
    var conversationRequest: qaul.rpc.chat.ChatOuterClass.ChatConversationRequest
      @JvmName("getConversationRequest")
      get() = _builder.getConversationRequest()
      @JvmName("setConversationRequest")
      set(value) {
        _builder.setConversationRequest(value)
      }
    /**
     * <pre>
     * request a specific conversation
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatConversationRequest conversation_request = 3;</code>
     */
    fun clearConversationRequest() {
      _builder.clearConversationRequest()
    }
    /**
     * <pre>
     * request a specific conversation
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatConversationRequest conversation_request = 3;</code>
     * @return Whether the conversationRequest field is set.
     */
    fun hasConversationRequest(): kotlin.Boolean {
      return _builder.hasConversationRequest()
    }

    /**
     * <pre>
     * list of a chat conversation
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatConversationList conversation_list = 4;</code>
     */
    var conversationList: qaul.rpc.chat.ChatOuterClass.ChatConversationList
      @JvmName("getConversationList")
      get() = _builder.getConversationList()
      @JvmName("setConversationList")
      set(value) {
        _builder.setConversationList(value)
      }
    /**
     * <pre>
     * list of a chat conversation
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatConversationList conversation_list = 4;</code>
     */
    fun clearConversationList() {
      _builder.clearConversationList()
    }
    /**
     * <pre>
     * list of a chat conversation
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatConversationList conversation_list = 4;</code>
     * @return Whether the conversationList field is set.
     */
    fun hasConversationList(): kotlin.Boolean {
      return _builder.hasConversationList()
    }

    /**
     * <pre>
     * send a new chat message
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatMessageSend send = 5;</code>
     */
    var send: qaul.rpc.chat.ChatOuterClass.ChatMessageSend
      @JvmName("getSend")
      get() = _builder.getSend()
      @JvmName("setSend")
      set(value) {
        _builder.setSend(value)
      }
    /**
     * <pre>
     * send a new chat message
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatMessageSend send = 5;</code>
     */
    fun clearSend() {
      _builder.clearSend()
    }
    /**
     * <pre>
     * send a new chat message
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatMessageSend send = 5;</code>
     * @return Whether the send field is set.
     */
    fun hasSend(): kotlin.Boolean {
      return _builder.hasSend()
    }
    val messageCase: qaul.rpc.chat.ChatOuterClass.Chat.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.rpc.chat.ChatOuterClass.Chat.copy(block: qaul.rpc.chat.ChatKt.Dsl.() -> kotlin.Unit): qaul.rpc.chat.ChatOuterClass.Chat =
  qaul.rpc.chat.ChatKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val qaul.rpc.chat.ChatOuterClass.ChatOrBuilder.conversationRequestOrNull: qaul.rpc.chat.ChatOuterClass.ChatConversationRequest?
  get() = if (hasConversationRequest()) getConversationRequest() else null

val qaul.rpc.chat.ChatOuterClass.ChatOrBuilder.conversationListOrNull: qaul.rpc.chat.ChatOuterClass.ChatConversationList?
  get() = if (hasConversationList()) getConversationList() else null

val qaul.rpc.chat.ChatOuterClass.ChatOrBuilder.sendOrNull: qaul.rpc.chat.ChatOuterClass.ChatMessageSend?
  get() = if (hasSend()) getSend() else null

