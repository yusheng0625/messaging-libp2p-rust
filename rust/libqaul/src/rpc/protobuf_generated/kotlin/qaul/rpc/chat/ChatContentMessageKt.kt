//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/chat/chat.proto

package qaul.rpc.chat;

@kotlin.jvm.JvmName("-initializechatContentMessage")
inline fun chatContentMessage(block: qaul.rpc.chat.ChatContentMessageKt.Dsl.() -> kotlin.Unit): qaul.rpc.chat.ChatOuterClass.ChatContentMessage =
  qaul.rpc.chat.ChatContentMessageKt.Dsl._create(qaul.rpc.chat.ChatOuterClass.ChatContentMessage.newBuilder()).apply { block() }._build()
object ChatContentMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.rpc.chat.ChatOuterClass.ChatContentMessage.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.chat.ChatOuterClass.ChatContentMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.chat.ChatOuterClass.ChatContentMessage = _builder.build()

    /**
     * <pre>
     * a chat content message
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatContent chat_content = 1;</code>
     */
    var chatContent: qaul.rpc.chat.ChatOuterClass.ChatContent
      @JvmName("getChatContent")
      get() = _builder.getChatContent()
      @JvmName("setChatContent")
      set(value) {
        _builder.setChatContent(value)
      }
    /**
     * <pre>
     * a chat content message
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatContent chat_content = 1;</code>
     */
    fun clearChatContent() {
      _builder.clearChatContent()
    }
    /**
     * <pre>
     * a chat content message
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatContent chat_content = 1;</code>
     * @return Whether the chatContent field is set.
     */
    fun hasChatContent(): kotlin.Boolean {
      return _builder.hasChatContent()
    }

    /**
     * <pre>
     * a file content message
     * </pre>
     *
     * <code>.qaul.rpc.chat.FileContent file_content = 2;</code>
     */
    var fileContent: qaul.rpc.chat.ChatOuterClass.FileContent
      @JvmName("getFileContent")
      get() = _builder.getFileContent()
      @JvmName("setFileContent")
      set(value) {
        _builder.setFileContent(value)
      }
    /**
     * <pre>
     * a file content message
     * </pre>
     *
     * <code>.qaul.rpc.chat.FileContent file_content = 2;</code>
     */
    fun clearFileContent() {
      _builder.clearFileContent()
    }
    /**
     * <pre>
     * a file content message
     * </pre>
     *
     * <code>.qaul.rpc.chat.FileContent file_content = 2;</code>
     * @return Whether the fileContent field is set.
     */
    fun hasFileContent(): kotlin.Boolean {
      return _builder.hasFileContent()
    }

    /**
     * <pre>
     * a group event information
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupEvent group_event = 3;</code>
     */
    var groupEvent: qaul.rpc.chat.ChatOuterClass.GroupEvent
      @JvmName("getGroupEvent")
      get() = _builder.getGroupEvent()
      @JvmName("setGroupEvent")
      set(value) {
        _builder.setGroupEvent(value)
      }
    /**
     * <pre>
     * a group event information
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupEvent group_event = 3;</code>
     */
    fun clearGroupEvent() {
      _builder.clearGroupEvent()
    }
    /**
     * <pre>
     * a group event information
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupEvent group_event = 3;</code>
     * @return Whether the groupEvent field is set.
     */
    fun hasGroupEvent(): kotlin.Boolean {
      return _builder.hasGroupEvent()
    }
    val messageCase: qaul.rpc.chat.ChatOuterClass.ChatContentMessage.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.rpc.chat.ChatOuterClass.ChatContentMessage.copy(block: qaul.rpc.chat.ChatContentMessageKt.Dsl.() -> kotlin.Unit): qaul.rpc.chat.ChatOuterClass.ChatContentMessage =
  qaul.rpc.chat.ChatContentMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val qaul.rpc.chat.ChatOuterClass.ChatContentMessageOrBuilder.chatContentOrNull: qaul.rpc.chat.ChatOuterClass.ChatContent?
  get() = if (hasChatContent()) getChatContent() else null

val qaul.rpc.chat.ChatOuterClass.ChatContentMessageOrBuilder.fileContentOrNull: qaul.rpc.chat.ChatOuterClass.FileContent?
  get() = if (hasFileContent()) getFileContent() else null

val qaul.rpc.chat.ChatOuterClass.ChatContentMessageOrBuilder.groupEventOrNull: qaul.rpc.chat.ChatOuterClass.GroupEvent?
  get() = if (hasGroupEvent()) getGroupEvent() else null

