//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/chat/chat.proto

package qaul.rpc.chat;

@kotlin.jvm.JvmName("-initializechatMessageContent")
inline fun chatMessageContent(block: qaul.rpc.chat.ChatMessageContentKt.Dsl.() -> kotlin.Unit): qaul.rpc.chat.ChatOuterClass.ChatMessageContent =
  qaul.rpc.chat.ChatMessageContentKt.Dsl._create(qaul.rpc.chat.ChatOuterClass.ChatMessageContent.newBuilder()).apply { block() }._build()
object ChatMessageContentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.rpc.chat.ChatOuterClass.ChatMessageContent.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.chat.ChatOuterClass.ChatMessageContent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.chat.ChatOuterClass.ChatMessageContent = _builder.build()

    /**
     * <pre>
     * chat content
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatContent chat_content = 1;</code>
     */
    var chatContent: qaul.rpc.chat.ChatOuterClass.ChatContent
      @JvmName("getChatContent")
      get() = _builder.getChatContent()
      @JvmName("setChatContent")
      set(value) {
        _builder.setChatContent(value)
      }
    /**
     * <pre>
     * chat content
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatContent chat_content = 1;</code>
     */
    fun clearChatContent() {
      _builder.clearChatContent()
    }
    /**
     * <pre>
     * chat content
     * </pre>
     *
     * <code>.qaul.rpc.chat.ChatContent chat_content = 1;</code>
     * @return Whether the chatContent field is set.
     */
    fun hasChatContent(): kotlin.Boolean {
      return _builder.hasChatContent()
    }

    /**
     * <pre>
     * file sharing content
     * </pre>
     *
     * <code>.qaul.rpc.chat.FileShareContent file_content = 2;</code>
     */
    var fileContent: qaul.rpc.chat.ChatOuterClass.FileShareContent
      @JvmName("getFileContent")
      get() = _builder.getFileContent()
      @JvmName("setFileContent")
      set(value) {
        _builder.setFileContent(value)
      }
    /**
     * <pre>
     * file sharing content
     * </pre>
     *
     * <code>.qaul.rpc.chat.FileShareContent file_content = 2;</code>
     */
    fun clearFileContent() {
      _builder.clearFileContent()
    }
    /**
     * <pre>
     * file sharing content
     * </pre>
     *
     * <code>.qaul.rpc.chat.FileShareContent file_content = 2;</code>
     * @return Whether the fileContent field is set.
     */
    fun hasFileContent(): kotlin.Boolean {
      return _builder.hasFileContent()
    }

    /**
     * <pre>
     * group invite content
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupInviteContent group_invite_content = 3;</code>
     */
    var groupInviteContent: qaul.rpc.chat.ChatOuterClass.GroupInviteContent
      @JvmName("getGroupInviteContent")
      get() = _builder.getGroupInviteContent()
      @JvmName("setGroupInviteContent")
      set(value) {
        _builder.setGroupInviteContent(value)
      }
    /**
     * <pre>
     * group invite content
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupInviteContent group_invite_content = 3;</code>
     */
    fun clearGroupInviteContent() {
      _builder.clearGroupInviteContent()
    }
    /**
     * <pre>
     * group invite content
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupInviteContent group_invite_content = 3;</code>
     * @return Whether the groupInviteContent field is set.
     */
    fun hasGroupInviteContent(): kotlin.Boolean {
      return _builder.hasGroupInviteContent()
    }

    /**
     * <pre>
     *group invite reply content
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupInviteReplyContent group_invite_reply_content = 4;</code>
     */
    var groupInviteReplyContent: qaul.rpc.chat.ChatOuterClass.GroupInviteReplyContent
      @JvmName("getGroupInviteReplyContent")
      get() = _builder.getGroupInviteReplyContent()
      @JvmName("setGroupInviteReplyContent")
      set(value) {
        _builder.setGroupInviteReplyContent(value)
      }
    /**
     * <pre>
     *group invite reply content
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupInviteReplyContent group_invite_reply_content = 4;</code>
     */
    fun clearGroupInviteReplyContent() {
      _builder.clearGroupInviteReplyContent()
    }
    /**
     * <pre>
     *group invite reply content
     * </pre>
     *
     * <code>.qaul.rpc.chat.GroupInviteReplyContent group_invite_reply_content = 4;</code>
     * @return Whether the groupInviteReplyContent field is set.
     */
    fun hasGroupInviteReplyContent(): kotlin.Boolean {
      return _builder.hasGroupInviteReplyContent()
    }
    val contentCase: qaul.rpc.chat.ChatOuterClass.ChatMessageContent.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    fun clearContent() {
      _builder.clearContent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.rpc.chat.ChatOuterClass.ChatMessageContent.copy(block: qaul.rpc.chat.ChatMessageContentKt.Dsl.() -> kotlin.Unit): qaul.rpc.chat.ChatOuterClass.ChatMessageContent =
  qaul.rpc.chat.ChatMessageContentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val qaul.rpc.chat.ChatOuterClass.ChatMessageContentOrBuilder.chatContentOrNull: qaul.rpc.chat.ChatOuterClass.ChatContent?
  get() = if (hasChatContent()) getChatContent() else null

val qaul.rpc.chat.ChatOuterClass.ChatMessageContentOrBuilder.fileContentOrNull: qaul.rpc.chat.ChatOuterClass.FileShareContent?
  get() = if (hasFileContent()) getFileContent() else null

val qaul.rpc.chat.ChatOuterClass.ChatMessageContentOrBuilder.groupInviteContentOrNull: qaul.rpc.chat.ChatOuterClass.GroupInviteContent?
  get() = if (hasGroupInviteContent()) getGroupInviteContent() else null

val qaul.rpc.chat.ChatOuterClass.ChatMessageContentOrBuilder.groupInviteReplyContentOrNull: qaul.rpc.chat.ChatOuterClass.GroupInviteReplyContent?
  get() = if (hasGroupInviteReplyContent()) getGroupInviteReplyContent() else null

