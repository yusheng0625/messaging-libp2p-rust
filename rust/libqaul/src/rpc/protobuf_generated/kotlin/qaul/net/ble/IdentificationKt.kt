//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connections/ble/ble_net.proto

package qaul.net.ble;

@kotlin.jvm.JvmName("-initializeidentification")
inline fun identification(block: qaul.net.ble.IdentificationKt.Dsl.() -> kotlin.Unit): qaul.net.ble.BleNet.Identification =
  qaul.net.ble.IdentificationKt.Dsl._create(qaul.net.ble.BleNet.Identification.newBuilder()).apply { block() }._build()
object IdentificationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.net.ble.BleNet.Identification.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.net.ble.BleNet.Identification.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.net.ble.BleNet.Identification = _builder.build()

    /**
     * <code>bool request = 1;</code>
     */
    var request: kotlin.Boolean
      @JvmName("getRequest")
      get() = _builder.getRequest()
      @JvmName("setRequest")
      set(value) {
        _builder.setRequest(value)
      }
    /**
     * <code>bool request = 1;</code>
     */
    fun clearRequest() {
      _builder.clearRequest()
    }

    /**
     * <code>.qaul.net.ble.NodeIdentification node = 2;</code>
     */
    var node: qaul.net.ble.BleNet.NodeIdentification
      @JvmName("getNode")
      get() = _builder.getNode()
      @JvmName("setNode")
      set(value) {
        _builder.setNode(value)
      }
    /**
     * <code>.qaul.net.ble.NodeIdentification node = 2;</code>
     */
    fun clearNode() {
      _builder.clearNode()
    }
    /**
     * <code>.qaul.net.ble.NodeIdentification node = 2;</code>
     * @return Whether the node field is set.
     */
    fun hasNode(): kotlin.Boolean {
      return _builder.hasNode()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.net.ble.BleNet.Identification.copy(block: qaul.net.ble.IdentificationKt.Dsl.() -> kotlin.Unit): qaul.net.ble.BleNet.Identification =
  qaul.net.ble.IdentificationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val qaul.net.ble.BleNet.IdentificationOrBuilder.nodeOrNull: qaul.net.ble.BleNet.NodeIdentification?
  get() = if (hasNode()) getNode() else null

