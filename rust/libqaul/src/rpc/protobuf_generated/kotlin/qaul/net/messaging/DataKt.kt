//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/messaging/messaging.proto

package qaul.net.messaging;

@kotlin.jvm.JvmName("-initializedata")
inline fun data(block: qaul.net.messaging.DataKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.Data =
  qaul.net.messaging.DataKt.Dsl._create(qaul.net.messaging.MessagingOuterClass.Data.newBuilder()).apply { block() }._build()
object DataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.net.messaging.MessagingOuterClass.Data.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.net.messaging.MessagingOuterClass.Data.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.net.messaging.MessagingOuterClass.Data = _builder.build()

    /**
     * <pre>
     * message nonce for encryption
     * each nonce is only used once per key
     * and increases by one fore each new data package.
     * </pre>
     *
     * <code>uint64 nonce = 1;</code>
     */
    var nonce: kotlin.Long
      @JvmName("getNonce")
      get() = _builder.getNonce()
      @JvmName("setNonce")
      set(value) {
        _builder.setNonce(value)
      }
    /**
     * <pre>
     * message nonce for encryption
     * each nonce is only used once per key
     * and increases by one fore each new data package.
     * </pre>
     *
     * <code>uint64 nonce = 1;</code>
     */
    fun clearNonce() {
      _builder.clearNonce()
    }

    /**
     * <pre>
     * the encrypted message data slice
     * each data package contains maximally
     * 64KB
     * </pre>
     *
     * <code>bytes data = 2;</code>
     */
    var data: com.google.protobuf.ByteString
      @JvmName("getData")
      get() = _builder.getData()
      @JvmName("setData")
      set(value) {
        _builder.setData(value)
      }
    /**
     * <pre>
     * the encrypted message data slice
     * each data package contains maximally
     * 64KB
     * </pre>
     *
     * <code>bytes data = 2;</code>
     */
    fun clearData() {
      _builder.clearData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.net.messaging.MessagingOuterClass.Data.copy(block: qaul.net.messaging.DataKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.Data =
  qaul.net.messaging.DataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

