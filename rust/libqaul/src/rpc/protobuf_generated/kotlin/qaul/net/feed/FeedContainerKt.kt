//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/feed/feed_net.proto

package qaul.net.feed;

@kotlin.jvm.JvmName("-initializefeedContainer")
inline fun feedContainer(block: qaul.net.feed.FeedContainerKt.Dsl.() -> kotlin.Unit): qaul.net.feed.FeedNet.FeedContainer =
  qaul.net.feed.FeedContainerKt.Dsl._create(qaul.net.feed.FeedNet.FeedContainer.newBuilder()).apply { block() }._build()
object FeedContainerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.net.feed.FeedNet.FeedContainer.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.net.feed.FeedNet.FeedContainer.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.net.feed.FeedNet.FeedContainer = _builder.build()

    /**
     * <pre>
     * signature
     * </pre>
     *
     * <code>bytes signature = 1;</code>
     */
    var signature: com.google.protobuf.ByteString
      @JvmName("getSignature")
      get() = _builder.getSignature()
      @JvmName("setSignature")
      set(value) {
        _builder.setSignature(value)
      }
    /**
     * <pre>
     * signature
     * </pre>
     *
     * <code>bytes signature = 1;</code>
     */
    fun clearSignature() {
      _builder.clearSignature()
    }

    /**
     * <pre>
     * message content
     * </pre>
     *
     * <code>bytes message = 2;</code>
     */
    var message: com.google.protobuf.ByteString
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <pre>
     * message content
     * </pre>
     *
     * <code>bytes message = 2;</code>
     */
    fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.net.feed.FeedNet.FeedContainer.copy(block: qaul.net.feed.FeedContainerKt.Dsl.() -> kotlin.Unit): qaul.net.feed.FeedNet.FeedContainer =
  qaul.net.feed.FeedContainerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

