// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/users.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2fusers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2fusers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2fusers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2fusers_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2fusers_2eproto;
namespace qaul {
namespace rpc {
namespace users {
class RoutingTableConnection;
struct RoutingTableConnectionDefaultTypeInternal;
extern RoutingTableConnectionDefaultTypeInternal _RoutingTableConnection_default_instance_;
class SecurityNumberRequest;
struct SecurityNumberRequestDefaultTypeInternal;
extern SecurityNumberRequestDefaultTypeInternal _SecurityNumberRequest_default_instance_;
class SecurityNumberResponse;
struct SecurityNumberResponseDefaultTypeInternal;
extern SecurityNumberResponseDefaultTypeInternal _SecurityNumberResponse_default_instance_;
class UserEntry;
struct UserEntryDefaultTypeInternal;
extern UserEntryDefaultTypeInternal _UserEntry_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
class UserOnlineRequest;
struct UserOnlineRequestDefaultTypeInternal;
extern UserOnlineRequestDefaultTypeInternal _UserOnlineRequest_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class Users;
struct UsersDefaultTypeInternal;
extern UsersDefaultTypeInternal _Users_default_instance_;
}  // namespace users
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::users::RoutingTableConnection* Arena::CreateMaybeMessage<::qaul::rpc::users::RoutingTableConnection>(Arena*);
template<> ::qaul::rpc::users::SecurityNumberRequest* Arena::CreateMaybeMessage<::qaul::rpc::users::SecurityNumberRequest>(Arena*);
template<> ::qaul::rpc::users::SecurityNumberResponse* Arena::CreateMaybeMessage<::qaul::rpc::users::SecurityNumberResponse>(Arena*);
template<> ::qaul::rpc::users::UserEntry* Arena::CreateMaybeMessage<::qaul::rpc::users::UserEntry>(Arena*);
template<> ::qaul::rpc::users::UserList* Arena::CreateMaybeMessage<::qaul::rpc::users::UserList>(Arena*);
template<> ::qaul::rpc::users::UserOnlineRequest* Arena::CreateMaybeMessage<::qaul::rpc::users::UserOnlineRequest>(Arena*);
template<> ::qaul::rpc::users::UserRequest* Arena::CreateMaybeMessage<::qaul::rpc::users::UserRequest>(Arena*);
template<> ::qaul::rpc::users::Users* Arena::CreateMaybeMessage<::qaul::rpc::users::Users>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace users {

enum ConnectionModule : int {
  NONE = 0,
  LAN = 1,
  INTERNET = 2,
  BLE = 3,
  LOCAL = 4,
  ConnectionModule_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionModule_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectionModule_IsValid(int value);
constexpr ConnectionModule ConnectionModule_MIN = NONE;
constexpr ConnectionModule ConnectionModule_MAX = LOCAL;
constexpr int ConnectionModule_ARRAYSIZE = ConnectionModule_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionModule_descriptor();
template<typename T>
inline const std::string& ConnectionModule_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionModule>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionModule_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionModule_descriptor(), enum_t_value);
}
inline bool ConnectionModule_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionModule* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionModule>(
    ConnectionModule_descriptor(), name, value);
}
enum Connectivity : int {
  Online = 0,
  Reachable = 1,
  Offline = 2,
  Connectivity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Connectivity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Connectivity_IsValid(int value);
constexpr Connectivity Connectivity_MIN = Online;
constexpr Connectivity Connectivity_MAX = Offline;
constexpr int Connectivity_ARRAYSIZE = Connectivity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Connectivity_descriptor();
template<typename T>
inline const std::string& Connectivity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Connectivity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Connectivity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Connectivity_descriptor(), enum_t_value);
}
inline bool Connectivity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Connectivity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Connectivity>(
    Connectivity_descriptor(), name, value);
}
// ===================================================================

class Users final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.Users) */ {
 public:
  inline Users() : Users(nullptr) {}
  ~Users() override;
  explicit PROTOBUF_CONSTEXPR Users(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Users(const Users& from);
  Users(Users&& from) noexcept
    : Users() {
    *this = ::std::move(from);
  }

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }
  inline Users& operator=(Users&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Users& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kUserRequest = 1,
    kUserOnlineRequest = 2,
    kUserList = 3,
    kUserUpdate = 4,
    kSecurityNumberRequest = 5,
    kSecurityNumberResponse = 6,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Users* internal_default_instance() {
    return reinterpret_cast<const Users*>(
               &_Users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Users& a, Users& b) {
    a.Swap(&b);
  }
  inline void Swap(Users* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Users>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Users& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Users& from) {
    Users::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Users* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.Users";
  }
  protected:
  explicit Users(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserRequestFieldNumber = 1,
    kUserOnlineRequestFieldNumber = 2,
    kUserListFieldNumber = 3,
    kUserUpdateFieldNumber = 4,
    kSecurityNumberRequestFieldNumber = 5,
    kSecurityNumberResponseFieldNumber = 6,
  };
  // .qaul.rpc.users.UserRequest user_request = 1;
  bool has_user_request() const;
  private:
  bool _internal_has_user_request() const;
  public:
  void clear_user_request();
  const ::qaul::rpc::users::UserRequest& user_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserRequest* release_user_request();
  ::qaul::rpc::users::UserRequest* mutable_user_request();
  void set_allocated_user_request(::qaul::rpc::users::UserRequest* user_request);
  private:
  const ::qaul::rpc::users::UserRequest& _internal_user_request() const;
  ::qaul::rpc::users::UserRequest* _internal_mutable_user_request();
  public:
  void unsafe_arena_set_allocated_user_request(
      ::qaul::rpc::users::UserRequest* user_request);
  ::qaul::rpc::users::UserRequest* unsafe_arena_release_user_request();

  // .qaul.rpc.users.UserOnlineRequest user_online_request = 2;
  bool has_user_online_request() const;
  private:
  bool _internal_has_user_online_request() const;
  public:
  void clear_user_online_request();
  const ::qaul::rpc::users::UserOnlineRequest& user_online_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserOnlineRequest* release_user_online_request();
  ::qaul::rpc::users::UserOnlineRequest* mutable_user_online_request();
  void set_allocated_user_online_request(::qaul::rpc::users::UserOnlineRequest* user_online_request);
  private:
  const ::qaul::rpc::users::UserOnlineRequest& _internal_user_online_request() const;
  ::qaul::rpc::users::UserOnlineRequest* _internal_mutable_user_online_request();
  public:
  void unsafe_arena_set_allocated_user_online_request(
      ::qaul::rpc::users::UserOnlineRequest* user_online_request);
  ::qaul::rpc::users::UserOnlineRequest* unsafe_arena_release_user_online_request();

  // .qaul.rpc.users.UserList user_list = 3;
  bool has_user_list() const;
  private:
  bool _internal_has_user_list() const;
  public:
  void clear_user_list();
  const ::qaul::rpc::users::UserList& user_list() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserList* release_user_list();
  ::qaul::rpc::users::UserList* mutable_user_list();
  void set_allocated_user_list(::qaul::rpc::users::UserList* user_list);
  private:
  const ::qaul::rpc::users::UserList& _internal_user_list() const;
  ::qaul::rpc::users::UserList* _internal_mutable_user_list();
  public:
  void unsafe_arena_set_allocated_user_list(
      ::qaul::rpc::users::UserList* user_list);
  ::qaul::rpc::users::UserList* unsafe_arena_release_user_list();

  // .qaul.rpc.users.UserEntry user_update = 4;
  bool has_user_update() const;
  private:
  bool _internal_has_user_update() const;
  public:
  void clear_user_update();
  const ::qaul::rpc::users::UserEntry& user_update() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserEntry* release_user_update();
  ::qaul::rpc::users::UserEntry* mutable_user_update();
  void set_allocated_user_update(::qaul::rpc::users::UserEntry* user_update);
  private:
  const ::qaul::rpc::users::UserEntry& _internal_user_update() const;
  ::qaul::rpc::users::UserEntry* _internal_mutable_user_update();
  public:
  void unsafe_arena_set_allocated_user_update(
      ::qaul::rpc::users::UserEntry* user_update);
  ::qaul::rpc::users::UserEntry* unsafe_arena_release_user_update();

  // .qaul.rpc.users.SecurityNumberRequest security_number_request = 5;
  bool has_security_number_request() const;
  private:
  bool _internal_has_security_number_request() const;
  public:
  void clear_security_number_request();
  const ::qaul::rpc::users::SecurityNumberRequest& security_number_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::SecurityNumberRequest* release_security_number_request();
  ::qaul::rpc::users::SecurityNumberRequest* mutable_security_number_request();
  void set_allocated_security_number_request(::qaul::rpc::users::SecurityNumberRequest* security_number_request);
  private:
  const ::qaul::rpc::users::SecurityNumberRequest& _internal_security_number_request() const;
  ::qaul::rpc::users::SecurityNumberRequest* _internal_mutable_security_number_request();
  public:
  void unsafe_arena_set_allocated_security_number_request(
      ::qaul::rpc::users::SecurityNumberRequest* security_number_request);
  ::qaul::rpc::users::SecurityNumberRequest* unsafe_arena_release_security_number_request();

  // .qaul.rpc.users.SecurityNumberResponse security_number_response = 6;
  bool has_security_number_response() const;
  private:
  bool _internal_has_security_number_response() const;
  public:
  void clear_security_number_response();
  const ::qaul::rpc::users::SecurityNumberResponse& security_number_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::SecurityNumberResponse* release_security_number_response();
  ::qaul::rpc::users::SecurityNumberResponse* mutable_security_number_response();
  void set_allocated_security_number_response(::qaul::rpc::users::SecurityNumberResponse* security_number_response);
  private:
  const ::qaul::rpc::users::SecurityNumberResponse& _internal_security_number_response() const;
  ::qaul::rpc::users::SecurityNumberResponse* _internal_mutable_security_number_response();
  public:
  void unsafe_arena_set_allocated_security_number_response(
      ::qaul::rpc::users::SecurityNumberResponse* security_number_response);
  ::qaul::rpc::users::SecurityNumberResponse* unsafe_arena_release_security_number_response();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.users.Users)
 private:
  class _Internal;
  void set_has_user_request();
  void set_has_user_online_request();
  void set_has_user_list();
  void set_has_user_update();
  void set_has_security_number_request();
  void set_has_security_number_response();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::users::UserRequest* user_request_;
      ::qaul::rpc::users::UserOnlineRequest* user_online_request_;
      ::qaul::rpc::users::UserList* user_list_;
      ::qaul::rpc::users::UserEntry* user_update_;
      ::qaul::rpc::users::SecurityNumberRequest* security_number_request_;
      ::qaul::rpc::users::SecurityNumberResponse* security_number_response_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UserRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UserRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserOnlineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserOnlineRequest) */ {
 public:
  inline UserOnlineRequest() : UserOnlineRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UserOnlineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserOnlineRequest(const UserOnlineRequest& from);
  UserOnlineRequest(UserOnlineRequest&& from) noexcept
    : UserOnlineRequest() {
    *this = ::std::move(from);
  }

  inline UserOnlineRequest& operator=(const UserOnlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOnlineRequest& operator=(UserOnlineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOnlineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOnlineRequest* internal_default_instance() {
    return reinterpret_cast<const UserOnlineRequest*>(
               &_UserOnlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserOnlineRequest& a, UserOnlineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOnlineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOnlineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOnlineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserOnlineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UserOnlineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UserOnlineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserOnlineRequest";
  }
  protected:
  explicit UserOnlineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserOnlineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  explicit PROTOBUF_CONSTEXPR UserList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserList& from) {
    UserList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserList";
  }
  protected:
  explicit UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .qaul.rpc.users.UserEntry user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::qaul::rpc::users::UserEntry* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >*
      mutable_user();
  private:
  const ::qaul::rpc::users::UserEntry& _internal_user(int index) const;
  ::qaul::rpc::users::UserEntry* _internal_add_user();
  public:
  const ::qaul::rpc::users::UserEntry& user(int index) const;
  ::qaul::rpc::users::UserEntry* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >&
      user() const;

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry > user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserEntry) */ {
 public:
  inline UserEntry() : UserEntry(nullptr) {}
  ~UserEntry() override;
  explicit PROTOBUF_CONSTEXPR UserEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEntry(const UserEntry& from);
  UserEntry(UserEntry&& from) noexcept
    : UserEntry() {
    *this = ::std::move(from);
  }

  inline UserEntry& operator=(const UserEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEntry& operator=(UserEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEntry* internal_default_instance() {
    return reinterpret_cast<const UserEntry*>(
               &_UserEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserEntry& a, UserEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserEntry& from) {
    UserEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserEntry";
  }
  protected:
  explicit UserEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 11,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kGroupIdFieldNumber = 3,
    kKeyBase58FieldNumber = 7,
    kConnectivityFieldNumber = 8,
    kVerifiedFieldNumber = 9,
    kBlockedFieldNumber = 10,
  };
  // repeated .qaul.rpc.users.RoutingTableConnection connections = 11;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::qaul::rpc::users::RoutingTableConnection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::RoutingTableConnection >*
      mutable_connections();
  private:
  const ::qaul::rpc::users::RoutingTableConnection& _internal_connections(int index) const;
  ::qaul::rpc::users::RoutingTableConnection* _internal_add_connections();
  public:
  const ::qaul::rpc::users::RoutingTableConnection& connections(int index) const;
  ::qaul::rpc::users::RoutingTableConnection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::RoutingTableConnection >&
      connections() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes group_id = 3;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string key_base58 = 7;
  void clear_key_base58();
  const std::string& key_base58() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_base58(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_base58();
  PROTOBUF_NODISCARD std::string* release_key_base58();
  void set_allocated_key_base58(std::string* key_base58);
  private:
  const std::string& _internal_key_base58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_base58(const std::string& value);
  std::string* _internal_mutable_key_base58();
  public:

  // .qaul.rpc.users.Connectivity connectivity = 8;
  void clear_connectivity();
  ::qaul::rpc::users::Connectivity connectivity() const;
  void set_connectivity(::qaul::rpc::users::Connectivity value);
  private:
  ::qaul::rpc::users::Connectivity _internal_connectivity() const;
  void _internal_set_connectivity(::qaul::rpc::users::Connectivity value);
  public:

  // bool verified = 9;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // bool blocked = 10;
  void clear_blocked();
  bool blocked() const;
  void set_blocked(bool value);
  private:
  bool _internal_blocked() const;
  void _internal_set_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::RoutingTableConnection > connections_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_base58_;
    int connectivity_;
    bool verified_;
    bool blocked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class RoutingTableConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.RoutingTableConnection) */ {
 public:
  inline RoutingTableConnection() : RoutingTableConnection(nullptr) {}
  ~RoutingTableConnection() override;
  explicit PROTOBUF_CONSTEXPR RoutingTableConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingTableConnection(const RoutingTableConnection& from);
  RoutingTableConnection(RoutingTableConnection&& from) noexcept
    : RoutingTableConnection() {
    *this = ::std::move(from);
  }

  inline RoutingTableConnection& operator=(const RoutingTableConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingTableConnection& operator=(RoutingTableConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingTableConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingTableConnection* internal_default_instance() {
    return reinterpret_cast<const RoutingTableConnection*>(
               &_RoutingTableConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoutingTableConnection& a, RoutingTableConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingTableConnection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingTableConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingTableConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingTableConnection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingTableConnection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingTableConnection& from) {
    RoutingTableConnection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingTableConnection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.RoutingTableConnection";
  }
  protected:
  explicit RoutingTableConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViaFieldNumber = 4,
    kModuleFieldNumber = 2,
    kRttFieldNumber = 3,
    kHopCountFieldNumber = 5,
  };
  // bytes via = 4;
  void clear_via();
  const std::string& via() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_via(ArgT0&& arg0, ArgT... args);
  std::string* mutable_via();
  PROTOBUF_NODISCARD std::string* release_via();
  void set_allocated_via(std::string* via);
  private:
  const std::string& _internal_via() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_via(const std::string& value);
  std::string* _internal_mutable_via();
  public:

  // .qaul.rpc.users.ConnectionModule module = 2;
  void clear_module();
  ::qaul::rpc::users::ConnectionModule module() const;
  void set_module(::qaul::rpc::users::ConnectionModule value);
  private:
  ::qaul::rpc::users::ConnectionModule _internal_module() const;
  void _internal_set_module(::qaul::rpc::users::ConnectionModule value);
  public:

  // uint32 rtt = 3;
  void clear_rtt();
  uint32_t rtt() const;
  void set_rtt(uint32_t value);
  private:
  uint32_t _internal_rtt() const;
  void _internal_set_rtt(uint32_t value);
  public:

  // uint32 hop_count = 5;
  void clear_hop_count();
  uint32_t hop_count() const;
  void set_hop_count(uint32_t value);
  private:
  uint32_t _internal_hop_count() const;
  void _internal_set_hop_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.RoutingTableConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr via_;
    int module_;
    uint32_t rtt_;
    uint32_t hop_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class SecurityNumberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.SecurityNumberRequest) */ {
 public:
  inline SecurityNumberRequest() : SecurityNumberRequest(nullptr) {}
  ~SecurityNumberRequest() override;
  explicit PROTOBUF_CONSTEXPR SecurityNumberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityNumberRequest(const SecurityNumberRequest& from);
  SecurityNumberRequest(SecurityNumberRequest&& from) noexcept
    : SecurityNumberRequest() {
    *this = ::std::move(from);
  }

  inline SecurityNumberRequest& operator=(const SecurityNumberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityNumberRequest& operator=(SecurityNumberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityNumberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityNumberRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityNumberRequest*>(
               &_SecurityNumberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SecurityNumberRequest& a, SecurityNumberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityNumberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityNumberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityNumberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityNumberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityNumberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SecurityNumberRequest& from) {
    SecurityNumberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityNumberRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.SecurityNumberRequest";
  }
  protected:
  explicit SecurityNumberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.SecurityNumberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class SecurityNumberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.SecurityNumberResponse) */ {
 public:
  inline SecurityNumberResponse() : SecurityNumberResponse(nullptr) {}
  ~SecurityNumberResponse() override;
  explicit PROTOBUF_CONSTEXPR SecurityNumberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityNumberResponse(const SecurityNumberResponse& from);
  SecurityNumberResponse(SecurityNumberResponse&& from) noexcept
    : SecurityNumberResponse() {
    *this = ::std::move(from);
  }

  inline SecurityNumberResponse& operator=(const SecurityNumberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityNumberResponse& operator=(SecurityNumberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityNumberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityNumberResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityNumberResponse*>(
               &_SecurityNumberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SecurityNumberResponse& a, SecurityNumberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityNumberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityNumberResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityNumberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityNumberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityNumberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SecurityNumberResponse& from) {
    SecurityNumberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityNumberResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.SecurityNumberResponse";
  }
  protected:
  explicit SecurityNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityNumberBlocksFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kSecurityHashFieldNumber = 2,
  };
  // repeated uint32 security_number_blocks = 3;
  int security_number_blocks_size() const;
  private:
  int _internal_security_number_blocks_size() const;
  public:
  void clear_security_number_blocks();
  private:
  uint32_t _internal_security_number_blocks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_security_number_blocks() const;
  void _internal_add_security_number_blocks(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_security_number_blocks();
  public:
  uint32_t security_number_blocks(int index) const;
  void set_security_number_blocks(int index, uint32_t value);
  void add_security_number_blocks(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      security_number_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_security_number_blocks();

  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes security_hash = 2;
  void clear_security_hash();
  const std::string& security_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_security_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_security_hash();
  PROTOBUF_NODISCARD std::string* release_security_hash();
  void set_allocated_security_hash(std::string* security_hash);
  private:
  const std::string& _internal_security_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_hash(const std::string& value);
  std::string* _internal_mutable_security_hash();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.SecurityNumberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > security_number_blocks_;
    mutable std::atomic<int> _security_number_blocks_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Users

// .qaul.rpc.users.UserRequest user_request = 1;
inline bool Users::_internal_has_user_request() const {
  return message_case() == kUserRequest;
}
inline bool Users::has_user_request() const {
  return _internal_has_user_request();
}
inline void Users::set_has_user_request() {
  _impl_._oneof_case_[0] = kUserRequest;
}
inline void Users::clear_user_request() {
  if (_internal_has_user_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserRequest* Users::release_user_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_request)
  if (_internal_has_user_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserRequest* temp = _impl_.message_.user_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserRequest& Users::_internal_user_request() const {
  return _internal_has_user_request()
      ? *_impl_.message_.user_request_
      : reinterpret_cast< ::qaul::rpc::users::UserRequest&>(::qaul::rpc::users::_UserRequest_default_instance_);
}
inline const ::qaul::rpc::users::UserRequest& Users::user_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_request)
  return _internal_user_request();
}
inline ::qaul::rpc::users::UserRequest* Users::unsafe_arena_release_user_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_request)
  if (_internal_has_user_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserRequest* temp = _impl_.message_.user_request_;
    _impl_.message_.user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_request(::qaul::rpc::users::UserRequest* user_request) {
  clear_message();
  if (user_request) {
    set_has_user_request();
    _impl_.message_.user_request_ = user_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_request)
}
inline ::qaul::rpc::users::UserRequest* Users::_internal_mutable_user_request() {
  if (!_internal_has_user_request()) {
    clear_message();
    set_has_user_request();
    _impl_.message_.user_request_ = CreateMaybeMessage< ::qaul::rpc::users::UserRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.user_request_;
}
inline ::qaul::rpc::users::UserRequest* Users::mutable_user_request() {
  ::qaul::rpc::users::UserRequest* _msg = _internal_mutable_user_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_request)
  return _msg;
}

// .qaul.rpc.users.UserOnlineRequest user_online_request = 2;
inline bool Users::_internal_has_user_online_request() const {
  return message_case() == kUserOnlineRequest;
}
inline bool Users::has_user_online_request() const {
  return _internal_has_user_online_request();
}
inline void Users::set_has_user_online_request() {
  _impl_._oneof_case_[0] = kUserOnlineRequest;
}
inline void Users::clear_user_online_request() {
  if (_internal_has_user_online_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_online_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::release_user_online_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_online_request)
  if (_internal_has_user_online_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserOnlineRequest* temp = _impl_.message_.user_online_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_online_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserOnlineRequest& Users::_internal_user_online_request() const {
  return _internal_has_user_online_request()
      ? *_impl_.message_.user_online_request_
      : reinterpret_cast< ::qaul::rpc::users::UserOnlineRequest&>(::qaul::rpc::users::_UserOnlineRequest_default_instance_);
}
inline const ::qaul::rpc::users::UserOnlineRequest& Users::user_online_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_online_request)
  return _internal_user_online_request();
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::unsafe_arena_release_user_online_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_online_request)
  if (_internal_has_user_online_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserOnlineRequest* temp = _impl_.message_.user_online_request_;
    _impl_.message_.user_online_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_online_request(::qaul::rpc::users::UserOnlineRequest* user_online_request) {
  clear_message();
  if (user_online_request) {
    set_has_user_online_request();
    _impl_.message_.user_online_request_ = user_online_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_online_request)
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::_internal_mutable_user_online_request() {
  if (!_internal_has_user_online_request()) {
    clear_message();
    set_has_user_online_request();
    _impl_.message_.user_online_request_ = CreateMaybeMessage< ::qaul::rpc::users::UserOnlineRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.user_online_request_;
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::mutable_user_online_request() {
  ::qaul::rpc::users::UserOnlineRequest* _msg = _internal_mutable_user_online_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_online_request)
  return _msg;
}

// .qaul.rpc.users.UserList user_list = 3;
inline bool Users::_internal_has_user_list() const {
  return message_case() == kUserList;
}
inline bool Users::has_user_list() const {
  return _internal_has_user_list();
}
inline void Users::set_has_user_list() {
  _impl_._oneof_case_[0] = kUserList;
}
inline void Users::clear_user_list() {
  if (_internal_has_user_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_list_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserList* Users::release_user_list() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_list)
  if (_internal_has_user_list()) {
    clear_has_message();
    ::qaul::rpc::users::UserList* temp = _impl_.message_.user_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserList& Users::_internal_user_list() const {
  return _internal_has_user_list()
      ? *_impl_.message_.user_list_
      : reinterpret_cast< ::qaul::rpc::users::UserList&>(::qaul::rpc::users::_UserList_default_instance_);
}
inline const ::qaul::rpc::users::UserList& Users::user_list() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_list)
  return _internal_user_list();
}
inline ::qaul::rpc::users::UserList* Users::unsafe_arena_release_user_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_list)
  if (_internal_has_user_list()) {
    clear_has_message();
    ::qaul::rpc::users::UserList* temp = _impl_.message_.user_list_;
    _impl_.message_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_list(::qaul::rpc::users::UserList* user_list) {
  clear_message();
  if (user_list) {
    set_has_user_list();
    _impl_.message_.user_list_ = user_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_list)
}
inline ::qaul::rpc::users::UserList* Users::_internal_mutable_user_list() {
  if (!_internal_has_user_list()) {
    clear_message();
    set_has_user_list();
    _impl_.message_.user_list_ = CreateMaybeMessage< ::qaul::rpc::users::UserList >(GetArenaForAllocation());
  }
  return _impl_.message_.user_list_;
}
inline ::qaul::rpc::users::UserList* Users::mutable_user_list() {
  ::qaul::rpc::users::UserList* _msg = _internal_mutable_user_list();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_list)
  return _msg;
}

// .qaul.rpc.users.UserEntry user_update = 4;
inline bool Users::_internal_has_user_update() const {
  return message_case() == kUserUpdate;
}
inline bool Users::has_user_update() const {
  return _internal_has_user_update();
}
inline void Users::set_has_user_update() {
  _impl_._oneof_case_[0] = kUserUpdate;
}
inline void Users::clear_user_update() {
  if (_internal_has_user_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_update_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserEntry* Users::release_user_update() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_update)
  if (_internal_has_user_update()) {
    clear_has_message();
    ::qaul::rpc::users::UserEntry* temp = _impl_.message_.user_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserEntry& Users::_internal_user_update() const {
  return _internal_has_user_update()
      ? *_impl_.message_.user_update_
      : reinterpret_cast< ::qaul::rpc::users::UserEntry&>(::qaul::rpc::users::_UserEntry_default_instance_);
}
inline const ::qaul::rpc::users::UserEntry& Users::user_update() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_update)
  return _internal_user_update();
}
inline ::qaul::rpc::users::UserEntry* Users::unsafe_arena_release_user_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_update)
  if (_internal_has_user_update()) {
    clear_has_message();
    ::qaul::rpc::users::UserEntry* temp = _impl_.message_.user_update_;
    _impl_.message_.user_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_update(::qaul::rpc::users::UserEntry* user_update) {
  clear_message();
  if (user_update) {
    set_has_user_update();
    _impl_.message_.user_update_ = user_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_update)
}
inline ::qaul::rpc::users::UserEntry* Users::_internal_mutable_user_update() {
  if (!_internal_has_user_update()) {
    clear_message();
    set_has_user_update();
    _impl_.message_.user_update_ = CreateMaybeMessage< ::qaul::rpc::users::UserEntry >(GetArenaForAllocation());
  }
  return _impl_.message_.user_update_;
}
inline ::qaul::rpc::users::UserEntry* Users::mutable_user_update() {
  ::qaul::rpc::users::UserEntry* _msg = _internal_mutable_user_update();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_update)
  return _msg;
}

// .qaul.rpc.users.SecurityNumberRequest security_number_request = 5;
inline bool Users::_internal_has_security_number_request() const {
  return message_case() == kSecurityNumberRequest;
}
inline bool Users::has_security_number_request() const {
  return _internal_has_security_number_request();
}
inline void Users::set_has_security_number_request() {
  _impl_._oneof_case_[0] = kSecurityNumberRequest;
}
inline void Users::clear_security_number_request() {
  if (_internal_has_security_number_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.security_number_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::SecurityNumberRequest* Users::release_security_number_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.security_number_request)
  if (_internal_has_security_number_request()) {
    clear_has_message();
    ::qaul::rpc::users::SecurityNumberRequest* temp = _impl_.message_.security_number_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.security_number_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::SecurityNumberRequest& Users::_internal_security_number_request() const {
  return _internal_has_security_number_request()
      ? *_impl_.message_.security_number_request_
      : reinterpret_cast< ::qaul::rpc::users::SecurityNumberRequest&>(::qaul::rpc::users::_SecurityNumberRequest_default_instance_);
}
inline const ::qaul::rpc::users::SecurityNumberRequest& Users::security_number_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.security_number_request)
  return _internal_security_number_request();
}
inline ::qaul::rpc::users::SecurityNumberRequest* Users::unsafe_arena_release_security_number_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.security_number_request)
  if (_internal_has_security_number_request()) {
    clear_has_message();
    ::qaul::rpc::users::SecurityNumberRequest* temp = _impl_.message_.security_number_request_;
    _impl_.message_.security_number_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_security_number_request(::qaul::rpc::users::SecurityNumberRequest* security_number_request) {
  clear_message();
  if (security_number_request) {
    set_has_security_number_request();
    _impl_.message_.security_number_request_ = security_number_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.security_number_request)
}
inline ::qaul::rpc::users::SecurityNumberRequest* Users::_internal_mutable_security_number_request() {
  if (!_internal_has_security_number_request()) {
    clear_message();
    set_has_security_number_request();
    _impl_.message_.security_number_request_ = CreateMaybeMessage< ::qaul::rpc::users::SecurityNumberRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.security_number_request_;
}
inline ::qaul::rpc::users::SecurityNumberRequest* Users::mutable_security_number_request() {
  ::qaul::rpc::users::SecurityNumberRequest* _msg = _internal_mutable_security_number_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.security_number_request)
  return _msg;
}

// .qaul.rpc.users.SecurityNumberResponse security_number_response = 6;
inline bool Users::_internal_has_security_number_response() const {
  return message_case() == kSecurityNumberResponse;
}
inline bool Users::has_security_number_response() const {
  return _internal_has_security_number_response();
}
inline void Users::set_has_security_number_response() {
  _impl_._oneof_case_[0] = kSecurityNumberResponse;
}
inline void Users::clear_security_number_response() {
  if (_internal_has_security_number_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.security_number_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::SecurityNumberResponse* Users::release_security_number_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.security_number_response)
  if (_internal_has_security_number_response()) {
    clear_has_message();
    ::qaul::rpc::users::SecurityNumberResponse* temp = _impl_.message_.security_number_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.security_number_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::SecurityNumberResponse& Users::_internal_security_number_response() const {
  return _internal_has_security_number_response()
      ? *_impl_.message_.security_number_response_
      : reinterpret_cast< ::qaul::rpc::users::SecurityNumberResponse&>(::qaul::rpc::users::_SecurityNumberResponse_default_instance_);
}
inline const ::qaul::rpc::users::SecurityNumberResponse& Users::security_number_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.security_number_response)
  return _internal_security_number_response();
}
inline ::qaul::rpc::users::SecurityNumberResponse* Users::unsafe_arena_release_security_number_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.security_number_response)
  if (_internal_has_security_number_response()) {
    clear_has_message();
    ::qaul::rpc::users::SecurityNumberResponse* temp = _impl_.message_.security_number_response_;
    _impl_.message_.security_number_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_security_number_response(::qaul::rpc::users::SecurityNumberResponse* security_number_response) {
  clear_message();
  if (security_number_response) {
    set_has_security_number_response();
    _impl_.message_.security_number_response_ = security_number_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.security_number_response)
}
inline ::qaul::rpc::users::SecurityNumberResponse* Users::_internal_mutable_security_number_response() {
  if (!_internal_has_security_number_response()) {
    clear_message();
    set_has_security_number_response();
    _impl_.message_.security_number_response_ = CreateMaybeMessage< ::qaul::rpc::users::SecurityNumberResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.security_number_response_;
}
inline ::qaul::rpc::users::SecurityNumberResponse* Users::mutable_security_number_response() {
  ::qaul::rpc::users::SecurityNumberResponse* _msg = _internal_mutable_security_number_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.security_number_response)
  return _msg;
}

inline bool Users::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Users::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Users::MessageCase Users::message_case() const {
  return Users::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserRequest

// -------------------------------------------------------------------

// UserOnlineRequest

// -------------------------------------------------------------------

// UserList

// repeated .qaul.rpc.users.UserEntry user = 1;
inline int UserList::_internal_user_size() const {
  return _impl_.user_.size();
}
inline int UserList::user_size() const {
  return _internal_user_size();
}
inline void UserList::clear_user() {
  _impl_.user_.Clear();
}
inline ::qaul::rpc::users::UserEntry* UserList::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserList.user)
  return _impl_.user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >*
UserList::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.users.UserList.user)
  return &_impl_.user_;
}
inline const ::qaul::rpc::users::UserEntry& UserList::_internal_user(int index) const {
  return _impl_.user_.Get(index);
}
inline const ::qaul::rpc::users::UserEntry& UserList::user(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserList.user)
  return _internal_user(index);
}
inline ::qaul::rpc::users::UserEntry* UserList::_internal_add_user() {
  return _impl_.user_.Add();
}
inline ::qaul::rpc::users::UserEntry* UserList::add_user() {
  ::qaul::rpc::users::UserEntry* _add = _internal_add_user();
  // @@protoc_insertion_point(field_add:qaul.rpc.users.UserList.user)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >&
UserList::user() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.users.UserList.user)
  return _impl_.user_;
}

// -------------------------------------------------------------------

// UserEntry

// string name = 1;
inline void UserEntry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserEntry::name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.name)
}
inline std::string* UserEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.name)
  return _s;
}
inline const std::string& UserEntry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserEntry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.name)
  return _impl_.name_.Release();
}
inline void UserEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.name)
}

// bytes id = 2;
inline void UserEntry::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserEntry::id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.id)
}
inline std::string* UserEntry::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.id)
  return _s;
}
inline const std::string& UserEntry::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UserEntry::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.id)
  return _impl_.id_.Release();
}
inline void UserEntry::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.id)
}

// bytes group_id = 3;
inline void UserEntry::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& UserEntry::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.group_id)
}
inline std::string* UserEntry::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.group_id)
  return _s;
}
inline const std::string& UserEntry::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void UserEntry::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.group_id)
  return _impl_.group_id_.Release();
}
inline void UserEntry::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.group_id)
}

// string key_base58 = 7;
inline void UserEntry::clear_key_base58() {
  _impl_.key_base58_.ClearToEmpty();
}
inline const std::string& UserEntry::key_base58() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.key_base58)
  return _internal_key_base58();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_key_base58(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_base58_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.key_base58)
}
inline std::string* UserEntry::mutable_key_base58() {
  std::string* _s = _internal_mutable_key_base58();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.key_base58)
  return _s;
}
inline const std::string& UserEntry::_internal_key_base58() const {
  return _impl_.key_base58_.Get();
}
inline void UserEntry::_internal_set_key_base58(const std::string& value) {
  
  _impl_.key_base58_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_key_base58() {
  
  return _impl_.key_base58_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_key_base58() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.key_base58)
  return _impl_.key_base58_.Release();
}
inline void UserEntry::set_allocated_key_base58(std::string* key_base58) {
  if (key_base58 != nullptr) {
    
  } else {
    
  }
  _impl_.key_base58_.SetAllocated(key_base58, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_base58_.IsDefault()) {
    _impl_.key_base58_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.key_base58)
}

// .qaul.rpc.users.Connectivity connectivity = 8;
inline void UserEntry::clear_connectivity() {
  _impl_.connectivity_ = 0;
}
inline ::qaul::rpc::users::Connectivity UserEntry::_internal_connectivity() const {
  return static_cast< ::qaul::rpc::users::Connectivity >(_impl_.connectivity_);
}
inline ::qaul::rpc::users::Connectivity UserEntry::connectivity() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.connectivity)
  return _internal_connectivity();
}
inline void UserEntry::_internal_set_connectivity(::qaul::rpc::users::Connectivity value) {
  
  _impl_.connectivity_ = value;
}
inline void UserEntry::set_connectivity(::qaul::rpc::users::Connectivity value) {
  _internal_set_connectivity(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.connectivity)
}

// bool verified = 9;
inline void UserEntry::clear_verified() {
  _impl_.verified_ = false;
}
inline bool UserEntry::_internal_verified() const {
  return _impl_.verified_;
}
inline bool UserEntry::verified() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.verified)
  return _internal_verified();
}
inline void UserEntry::_internal_set_verified(bool value) {
  
  _impl_.verified_ = value;
}
inline void UserEntry::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.verified)
}

// bool blocked = 10;
inline void UserEntry::clear_blocked() {
  _impl_.blocked_ = false;
}
inline bool UserEntry::_internal_blocked() const {
  return _impl_.blocked_;
}
inline bool UserEntry::blocked() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.blocked)
  return _internal_blocked();
}
inline void UserEntry::_internal_set_blocked(bool value) {
  
  _impl_.blocked_ = value;
}
inline void UserEntry::set_blocked(bool value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.blocked)
}

// repeated .qaul.rpc.users.RoutingTableConnection connections = 11;
inline int UserEntry::_internal_connections_size() const {
  return _impl_.connections_.size();
}
inline int UserEntry::connections_size() const {
  return _internal_connections_size();
}
inline void UserEntry::clear_connections() {
  _impl_.connections_.Clear();
}
inline ::qaul::rpc::users::RoutingTableConnection* UserEntry::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.connections)
  return _impl_.connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::RoutingTableConnection >*
UserEntry::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.users.UserEntry.connections)
  return &_impl_.connections_;
}
inline const ::qaul::rpc::users::RoutingTableConnection& UserEntry::_internal_connections(int index) const {
  return _impl_.connections_.Get(index);
}
inline const ::qaul::rpc::users::RoutingTableConnection& UserEntry::connections(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.connections)
  return _internal_connections(index);
}
inline ::qaul::rpc::users::RoutingTableConnection* UserEntry::_internal_add_connections() {
  return _impl_.connections_.Add();
}
inline ::qaul::rpc::users::RoutingTableConnection* UserEntry::add_connections() {
  ::qaul::rpc::users::RoutingTableConnection* _add = _internal_add_connections();
  // @@protoc_insertion_point(field_add:qaul.rpc.users.UserEntry.connections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::RoutingTableConnection >&
UserEntry::connections() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.users.UserEntry.connections)
  return _impl_.connections_;
}

// -------------------------------------------------------------------

// RoutingTableConnection

// .qaul.rpc.users.ConnectionModule module = 2;
inline void RoutingTableConnection::clear_module() {
  _impl_.module_ = 0;
}
inline ::qaul::rpc::users::ConnectionModule RoutingTableConnection::_internal_module() const {
  return static_cast< ::qaul::rpc::users::ConnectionModule >(_impl_.module_);
}
inline ::qaul::rpc::users::ConnectionModule RoutingTableConnection::module() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.RoutingTableConnection.module)
  return _internal_module();
}
inline void RoutingTableConnection::_internal_set_module(::qaul::rpc::users::ConnectionModule value) {
  
  _impl_.module_ = value;
}
inline void RoutingTableConnection::set_module(::qaul::rpc::users::ConnectionModule value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.RoutingTableConnection.module)
}

// uint32 rtt = 3;
inline void RoutingTableConnection::clear_rtt() {
  _impl_.rtt_ = 0u;
}
inline uint32_t RoutingTableConnection::_internal_rtt() const {
  return _impl_.rtt_;
}
inline uint32_t RoutingTableConnection::rtt() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.RoutingTableConnection.rtt)
  return _internal_rtt();
}
inline void RoutingTableConnection::_internal_set_rtt(uint32_t value) {
  
  _impl_.rtt_ = value;
}
inline void RoutingTableConnection::set_rtt(uint32_t value) {
  _internal_set_rtt(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.RoutingTableConnection.rtt)
}

// uint32 hop_count = 5;
inline void RoutingTableConnection::clear_hop_count() {
  _impl_.hop_count_ = 0u;
}
inline uint32_t RoutingTableConnection::_internal_hop_count() const {
  return _impl_.hop_count_;
}
inline uint32_t RoutingTableConnection::hop_count() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.RoutingTableConnection.hop_count)
  return _internal_hop_count();
}
inline void RoutingTableConnection::_internal_set_hop_count(uint32_t value) {
  
  _impl_.hop_count_ = value;
}
inline void RoutingTableConnection::set_hop_count(uint32_t value) {
  _internal_set_hop_count(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.RoutingTableConnection.hop_count)
}

// bytes via = 4;
inline void RoutingTableConnection::clear_via() {
  _impl_.via_.ClearToEmpty();
}
inline const std::string& RoutingTableConnection::via() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.RoutingTableConnection.via)
  return _internal_via();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoutingTableConnection::set_via(ArgT0&& arg0, ArgT... args) {
 
 _impl_.via_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.RoutingTableConnection.via)
}
inline std::string* RoutingTableConnection::mutable_via() {
  std::string* _s = _internal_mutable_via();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.RoutingTableConnection.via)
  return _s;
}
inline const std::string& RoutingTableConnection::_internal_via() const {
  return _impl_.via_.Get();
}
inline void RoutingTableConnection::_internal_set_via(const std::string& value) {
  
  _impl_.via_.Set(value, GetArenaForAllocation());
}
inline std::string* RoutingTableConnection::_internal_mutable_via() {
  
  return _impl_.via_.Mutable(GetArenaForAllocation());
}
inline std::string* RoutingTableConnection::release_via() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.RoutingTableConnection.via)
  return _impl_.via_.Release();
}
inline void RoutingTableConnection::set_allocated_via(std::string* via) {
  if (via != nullptr) {
    
  } else {
    
  }
  _impl_.via_.SetAllocated(via, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.via_.IsDefault()) {
    _impl_.via_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.RoutingTableConnection.via)
}

// -------------------------------------------------------------------

// SecurityNumberRequest

// bytes user_id = 1;
inline void SecurityNumberRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& SecurityNumberRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.SecurityNumberRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SecurityNumberRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.SecurityNumberRequest.user_id)
}
inline std::string* SecurityNumberRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.SecurityNumberRequest.user_id)
  return _s;
}
inline const std::string& SecurityNumberRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void SecurityNumberRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SecurityNumberRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SecurityNumberRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.SecurityNumberRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void SecurityNumberRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.SecurityNumberRequest.user_id)
}

// -------------------------------------------------------------------

// SecurityNumberResponse

// bytes user_id = 1;
inline void SecurityNumberResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& SecurityNumberResponse::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.SecurityNumberResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SecurityNumberResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.SecurityNumberResponse.user_id)
}
inline std::string* SecurityNumberResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.SecurityNumberResponse.user_id)
  return _s;
}
inline const std::string& SecurityNumberResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void SecurityNumberResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SecurityNumberResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SecurityNumberResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.SecurityNumberResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void SecurityNumberResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.SecurityNumberResponse.user_id)
}

// bytes security_hash = 2;
inline void SecurityNumberResponse::clear_security_hash() {
  _impl_.security_hash_.ClearToEmpty();
}
inline const std::string& SecurityNumberResponse::security_hash() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.SecurityNumberResponse.security_hash)
  return _internal_security_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SecurityNumberResponse::set_security_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.security_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.SecurityNumberResponse.security_hash)
}
inline std::string* SecurityNumberResponse::mutable_security_hash() {
  std::string* _s = _internal_mutable_security_hash();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.SecurityNumberResponse.security_hash)
  return _s;
}
inline const std::string& SecurityNumberResponse::_internal_security_hash() const {
  return _impl_.security_hash_.Get();
}
inline void SecurityNumberResponse::_internal_set_security_hash(const std::string& value) {
  
  _impl_.security_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* SecurityNumberResponse::_internal_mutable_security_hash() {
  
  return _impl_.security_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* SecurityNumberResponse::release_security_hash() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.SecurityNumberResponse.security_hash)
  return _impl_.security_hash_.Release();
}
inline void SecurityNumberResponse::set_allocated_security_hash(std::string* security_hash) {
  if (security_hash != nullptr) {
    
  } else {
    
  }
  _impl_.security_hash_.SetAllocated(security_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.security_hash_.IsDefault()) {
    _impl_.security_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.SecurityNumberResponse.security_hash)
}

// repeated uint32 security_number_blocks = 3;
inline int SecurityNumberResponse::_internal_security_number_blocks_size() const {
  return _impl_.security_number_blocks_.size();
}
inline int SecurityNumberResponse::security_number_blocks_size() const {
  return _internal_security_number_blocks_size();
}
inline void SecurityNumberResponse::clear_security_number_blocks() {
  _impl_.security_number_blocks_.Clear();
}
inline uint32_t SecurityNumberResponse::_internal_security_number_blocks(int index) const {
  return _impl_.security_number_blocks_.Get(index);
}
inline uint32_t SecurityNumberResponse::security_number_blocks(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.SecurityNumberResponse.security_number_blocks)
  return _internal_security_number_blocks(index);
}
inline void SecurityNumberResponse::set_security_number_blocks(int index, uint32_t value) {
  _impl_.security_number_blocks_.Set(index, value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.SecurityNumberResponse.security_number_blocks)
}
inline void SecurityNumberResponse::_internal_add_security_number_blocks(uint32_t value) {
  _impl_.security_number_blocks_.Add(value);
}
inline void SecurityNumberResponse::add_security_number_blocks(uint32_t value) {
  _internal_add_security_number_blocks(value);
  // @@protoc_insertion_point(field_add:qaul.rpc.users.SecurityNumberResponse.security_number_blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SecurityNumberResponse::_internal_security_number_blocks() const {
  return _impl_.security_number_blocks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SecurityNumberResponse::security_number_blocks() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.users.SecurityNumberResponse.security_number_blocks)
  return _internal_security_number_blocks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SecurityNumberResponse::_internal_mutable_security_number_blocks() {
  return &_impl_.security_number_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SecurityNumberResponse::mutable_security_number_blocks() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.users.SecurityNumberResponse.security_number_blocks)
  return _internal_mutable_security_number_blocks();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace users
}  // namespace rpc
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::rpc::users::ConnectionModule> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::users::ConnectionModule>() {
  return ::qaul::rpc::users::ConnectionModule_descriptor();
}
template <> struct is_proto_enum< ::qaul::rpc::users::Connectivity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::users::Connectivity>() {
  return ::qaul::rpc::users::Connectivity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2fusers_2eproto
