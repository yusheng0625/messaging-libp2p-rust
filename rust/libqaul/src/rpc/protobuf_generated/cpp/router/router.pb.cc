// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/router.proto

#include "router/router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace rpc {
namespace router {
PROTOBUF_CONSTEXPR Router::Router(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterDefaultTypeInternal _Router_default_instance_;
PROTOBUF_CONSTEXPR RoutingTableRequest::RoutingTableRequest(
    ::_pbi::ConstantInitialized) {}
struct RoutingTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingTableRequestDefaultTypeInternal() {}
  union {
    RoutingTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingTableRequestDefaultTypeInternal _RoutingTableRequest_default_instance_;
PROTOBUF_CONSTEXPR RoutingTableList::RoutingTableList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routing_table_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingTableListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingTableListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingTableListDefaultTypeInternal() {}
  union {
    RoutingTableList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingTableListDefaultTypeInternal _RoutingTableList_default_instance_;
PROTOBUF_CONSTEXPR RoutingTableEntry::RoutingTableEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connections_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingTableEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingTableEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingTableEntryDefaultTypeInternal() {}
  union {
    RoutingTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingTableEntryDefaultTypeInternal _RoutingTableEntry_default_instance_;
PROTOBUF_CONSTEXPR RoutingTableConnection::RoutingTableConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.via_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_)*/0
  , /*decltype(_impl_.rtt_)*/0u
  , /*decltype(_impl_.hop_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingTableConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingTableConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingTableConnectionDefaultTypeInternal() {}
  union {
    RoutingTableConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingTableConnectionDefaultTypeInternal _RoutingTableConnection_default_instance_;
PROTOBUF_CONSTEXPR ConnectionsRequest::ConnectionsRequest(
    ::_pbi::ConstantInitialized) {}
struct ConnectionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionsRequestDefaultTypeInternal() {}
  union {
    ConnectionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionsRequestDefaultTypeInternal _ConnectionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ConnectionsList::ConnectionsList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lan_)*/{}
  , /*decltype(_impl_.internet_)*/{}
  , /*decltype(_impl_.ble_)*/{}
  , /*decltype(_impl_.local_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionsListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionsListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionsListDefaultTypeInternal() {}
  union {
    ConnectionsList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionsListDefaultTypeInternal _ConnectionsList_default_instance_;
PROTOBUF_CONSTEXPR ConnectionsUserEntry::ConnectionsUserEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connections_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionsUserEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionsUserEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionsUserEntryDefaultTypeInternal() {}
  union {
    ConnectionsUserEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionsUserEntryDefaultTypeInternal _ConnectionsUserEntry_default_instance_;
PROTOBUF_CONSTEXPR ConnectionEntry::ConnectionEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.via_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rtt_)*/0u
  , /*decltype(_impl_.hop_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionEntryDefaultTypeInternal() {}
  union {
    ConnectionEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionEntryDefaultTypeInternal _ConnectionEntry_default_instance_;
PROTOBUF_CONSTEXPR NeighboursRequest::NeighboursRequest(
    ::_pbi::ConstantInitialized) {}
struct NeighboursRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NeighboursRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NeighboursRequestDefaultTypeInternal() {}
  union {
    NeighboursRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NeighboursRequestDefaultTypeInternal _NeighboursRequest_default_instance_;
PROTOBUF_CONSTEXPR NeighboursList::NeighboursList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lan_)*/{}
  , /*decltype(_impl_.internet_)*/{}
  , /*decltype(_impl_.ble_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NeighboursListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NeighboursListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NeighboursListDefaultTypeInternal() {}
  union {
    NeighboursList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NeighboursListDefaultTypeInternal _NeighboursList_default_instance_;
PROTOBUF_CONSTEXPR NeighboursEntry::NeighboursEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rtt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NeighboursEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NeighboursEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NeighboursEntryDefaultTypeInternal() {}
  union {
    NeighboursEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NeighboursEntryDefaultTypeInternal _NeighboursEntry_default_instance_;
}  // namespace router
}  // namespace rpc
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_router_2frouter_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_router_2frouter_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_router_2frouter_2eproto = nullptr;

const uint32_t TableStruct_router_2frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::Router, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::Router, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableList, _impl_.routing_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableEntry, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableEntry, _impl_.connections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, _impl_.rtt_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, _impl_.hop_count_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, _impl_.via_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, _impl_.internet_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, _impl_.ble_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, _impl_.local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsUserEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsUserEntry, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsUserEntry, _impl_.connections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, _impl_.rtt_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, _impl_.hop_count_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, _impl_.via_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursList, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursList, _impl_.internet_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursList, _impl_.ble_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursEntry, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursEntry, _impl_.rtt_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::rpc::router::Router)},
  { 13, -1, -1, sizeof(::qaul::rpc::router::RoutingTableRequest)},
  { 19, -1, -1, sizeof(::qaul::rpc::router::RoutingTableList)},
  { 26, -1, -1, sizeof(::qaul::rpc::router::RoutingTableEntry)},
  { 34, -1, -1, sizeof(::qaul::rpc::router::RoutingTableConnection)},
  { 44, -1, -1, sizeof(::qaul::rpc::router::ConnectionsRequest)},
  { 50, -1, -1, sizeof(::qaul::rpc::router::ConnectionsList)},
  { 60, -1, -1, sizeof(::qaul::rpc::router::ConnectionsUserEntry)},
  { 68, -1, -1, sizeof(::qaul::rpc::router::ConnectionEntry)},
  { 77, -1, -1, sizeof(::qaul::rpc::router::NeighboursRequest)},
  { 83, -1, -1, sizeof(::qaul::rpc::router::NeighboursList)},
  { 92, -1, -1, sizeof(::qaul::rpc::router::NeighboursEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::rpc::router::_Router_default_instance_._instance,
  &::qaul::rpc::router::_RoutingTableRequest_default_instance_._instance,
  &::qaul::rpc::router::_RoutingTableList_default_instance_._instance,
  &::qaul::rpc::router::_RoutingTableEntry_default_instance_._instance,
  &::qaul::rpc::router::_RoutingTableConnection_default_instance_._instance,
  &::qaul::rpc::router::_ConnectionsRequest_default_instance_._instance,
  &::qaul::rpc::router::_ConnectionsList_default_instance_._instance,
  &::qaul::rpc::router::_ConnectionsUserEntry_default_instance_._instance,
  &::qaul::rpc::router::_ConnectionEntry_default_instance_._instance,
  &::qaul::rpc::router::_NeighboursRequest_default_instance_._instance,
  &::qaul::rpc::router::_NeighboursList_default_instance_._instance,
  &::qaul::rpc::router::_NeighboursEntry_default_instance_._instance,
};

const char descriptor_table_protodef_router_2frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023router/router.proto\022\017qaul.rpc.router\"\226"
  "\003\n\006Router\022E\n\025routing_table_request\030\001 \001(\013"
  "2$.qaul.rpc.router.RoutingTableRequestH\000"
  "\022:\n\rrouting_table\030\002 \001(\0132!.qaul.rpc.route"
  "r.RoutingTableListH\000\022B\n\023connections_requ"
  "est\030\003 \001(\0132#.qaul.rpc.router.ConnectionsR"
  "equestH\000\022<\n\020connections_list\030\004 \001(\0132 .qau"
  "l.rpc.router.ConnectionsListH\000\022@\n\022neighb"
  "ours_request\030\005 \001(\0132\".qaul.rpc.router.Nei"
  "ghboursRequestH\000\022:\n\017neighbours_list\030\006 \001("
  "\0132\037.qaul.rpc.router.NeighboursListH\000B\t\n\007"
  "message\"\025\n\023RoutingTableRequest\"M\n\020Routin"
  "gTableList\0229\n\rrouting_table\030\001 \003(\0132\".qaul"
  ".rpc.router.RoutingTableEntry\"b\n\021Routing"
  "TableEntry\022\017\n\007user_id\030\001 \001(\014\022<\n\013connectio"
  "ns\030\002 \003(\0132\'.qaul.rpc.router.RoutingTableC"
  "onnection\"x\n\026RoutingTableConnection\0221\n\006m"
  "odule\030\002 \001(\0162!.qaul.rpc.router.Connection"
  "Module\022\013\n\003rtt\030\003 \001(\r\022\021\n\thop_count\030\005 \001(\r\022\013"
  "\n\003via\030\004 \001(\014\"\024\n\022ConnectionsRequest\"\350\001\n\017Co"
  "nnectionsList\0222\n\003lan\030\001 \003(\0132%.qaul.rpc.ro"
  "uter.ConnectionsUserEntry\0227\n\010internet\030\002 "
  "\003(\0132%.qaul.rpc.router.ConnectionsUserEnt"
  "ry\0222\n\003ble\030\003 \003(\0132%.qaul.rpc.router.Connec"
  "tionsUserEntry\0224\n\005local\030\004 \003(\0132%.qaul.rpc"
  ".router.ConnectionsUserEntry\"^\n\024Connecti"
  "onsUserEntry\022\017\n\007user_id\030\001 \001(\014\0225\n\013connect"
  "ions\030\002 \003(\0132 .qaul.rpc.router.ConnectionE"
  "ntry\">\n\017ConnectionEntry\022\013\n\003rtt\030\001 \001(\r\022\021\n\t"
  "hop_count\030\002 \001(\r\022\013\n\003via\030\003 \001(\014\"\023\n\021Neighbou"
  "rsRequest\"\242\001\n\016NeighboursList\022-\n\003lan\030\001 \003("
  "\0132 .qaul.rpc.router.NeighboursEntry\0222\n\010i"
  "nternet\030\002 \003(\0132 .qaul.rpc.router.Neighbou"
  "rsEntry\022-\n\003ble\030\003 \003(\0132 .qaul.rpc.router.N"
  "eighboursEntry\"/\n\017NeighboursEntry\022\017\n\007nod"
  "e_id\030\001 \001(\014\022\013\n\003rtt\030\002 \001(\r*G\n\020ConnectionMod"
  "ule\022\010\n\004NONE\020\000\022\007\n\003LAN\020\001\022\014\n\010INTERNET\020\002\022\007\n\003"
  "BLE\020\003\022\t\n\005LOCAL\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_router_2frouter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_router_2frouter_2eproto = {
    false, false, 1504, descriptor_table_protodef_router_2frouter_2eproto,
    "router/router.proto",
    &descriptor_table_router_2frouter_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_router_2frouter_2eproto::offsets,
    file_level_metadata_router_2frouter_2eproto, file_level_enum_descriptors_router_2frouter_2eproto,
    file_level_service_descriptors_router_2frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_router_2frouter_2eproto_getter() {
  return &descriptor_table_router_2frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_router_2frouter_2eproto(&descriptor_table_router_2frouter_2eproto);
namespace qaul {
namespace rpc {
namespace router {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionModule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2frouter_2eproto);
  return file_level_enum_descriptors_router_2frouter_2eproto[0];
}
bool ConnectionModule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Router::_Internal {
 public:
  static const ::qaul::rpc::router::RoutingTableRequest& routing_table_request(const Router* msg);
  static const ::qaul::rpc::router::RoutingTableList& routing_table(const Router* msg);
  static const ::qaul::rpc::router::ConnectionsRequest& connections_request(const Router* msg);
  static const ::qaul::rpc::router::ConnectionsList& connections_list(const Router* msg);
  static const ::qaul::rpc::router::NeighboursRequest& neighbours_request(const Router* msg);
  static const ::qaul::rpc::router::NeighboursList& neighbours_list(const Router* msg);
};

const ::qaul::rpc::router::RoutingTableRequest&
Router::_Internal::routing_table_request(const Router* msg) {
  return *msg->_impl_.message_.routing_table_request_;
}
const ::qaul::rpc::router::RoutingTableList&
Router::_Internal::routing_table(const Router* msg) {
  return *msg->_impl_.message_.routing_table_;
}
const ::qaul::rpc::router::ConnectionsRequest&
Router::_Internal::connections_request(const Router* msg) {
  return *msg->_impl_.message_.connections_request_;
}
const ::qaul::rpc::router::ConnectionsList&
Router::_Internal::connections_list(const Router* msg) {
  return *msg->_impl_.message_.connections_list_;
}
const ::qaul::rpc::router::NeighboursRequest&
Router::_Internal::neighbours_request(const Router* msg) {
  return *msg->_impl_.message_.neighbours_request_;
}
const ::qaul::rpc::router::NeighboursList&
Router::_Internal::neighbours_list(const Router* msg) {
  return *msg->_impl_.message_.neighbours_list_;
}
void Router::set_allocated_routing_table_request(::qaul::rpc::router::RoutingTableRequest* routing_table_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (routing_table_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_table_request);
    if (message_arena != submessage_arena) {
      routing_table_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_table_request, submessage_arena);
    }
    set_has_routing_table_request();
    _impl_.message_.routing_table_request_ = routing_table_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.routing_table_request)
}
void Router::set_allocated_routing_table(::qaul::rpc::router::RoutingTableList* routing_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (routing_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_table);
    if (message_arena != submessage_arena) {
      routing_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_table, submessage_arena);
    }
    set_has_routing_table();
    _impl_.message_.routing_table_ = routing_table;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.routing_table)
}
void Router::set_allocated_connections_request(::qaul::rpc::router::ConnectionsRequest* connections_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connections_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connections_request);
    if (message_arena != submessage_arena) {
      connections_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connections_request, submessage_arena);
    }
    set_has_connections_request();
    _impl_.message_.connections_request_ = connections_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.connections_request)
}
void Router::set_allocated_connections_list(::qaul::rpc::router::ConnectionsList* connections_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connections_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connections_list);
    if (message_arena != submessage_arena) {
      connections_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connections_list, submessage_arena);
    }
    set_has_connections_list();
    _impl_.message_.connections_list_ = connections_list;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.connections_list)
}
void Router::set_allocated_neighbours_request(::qaul::rpc::router::NeighboursRequest* neighbours_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (neighbours_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(neighbours_request);
    if (message_arena != submessage_arena) {
      neighbours_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbours_request, submessage_arena);
    }
    set_has_neighbours_request();
    _impl_.message_.neighbours_request_ = neighbours_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.neighbours_request)
}
void Router::set_allocated_neighbours_list(::qaul::rpc::router::NeighboursList* neighbours_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (neighbours_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(neighbours_list);
    if (message_arena != submessage_arena) {
      neighbours_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbours_list, submessage_arena);
    }
    set_has_neighbours_list();
    _impl_.message_.neighbours_list_ = neighbours_list;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.neighbours_list)
}
Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Router* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRoutingTableRequest: {
      _this->_internal_mutable_routing_table_request()->::qaul::rpc::router::RoutingTableRequest::MergeFrom(
          from._internal_routing_table_request());
      break;
    }
    case kRoutingTable: {
      _this->_internal_mutable_routing_table()->::qaul::rpc::router::RoutingTableList::MergeFrom(
          from._internal_routing_table());
      break;
    }
    case kConnectionsRequest: {
      _this->_internal_mutable_connections_request()->::qaul::rpc::router::ConnectionsRequest::MergeFrom(
          from._internal_connections_request());
      break;
    }
    case kConnectionsList: {
      _this->_internal_mutable_connections_list()->::qaul::rpc::router::ConnectionsList::MergeFrom(
          from._internal_connections_list());
      break;
    }
    case kNeighboursRequest: {
      _this->_internal_mutable_neighbours_request()->::qaul::rpc::router::NeighboursRequest::MergeFrom(
          from._internal_neighbours_request());
      break;
    }
    case kNeighboursList: {
      _this->_internal_mutable_neighbours_list()->::qaul::rpc::router::NeighboursList::MergeFrom(
          from._internal_neighbours_list());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.Router)
}

inline void Router::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.Router)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Router::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Router::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.rpc.router.Router)
  switch (message_case()) {
    case kRoutingTableRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.routing_table_request_;
      }
      break;
    }
    case kRoutingTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.routing_table_;
      }
      break;
    }
    case kConnectionsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connections_request_;
      }
      break;
    }
    case kConnectionsList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.connections_list_;
      }
      break;
    }
    case kNeighboursRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.neighbours_request_;
      }
      break;
    }
    case kNeighboursList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.neighbours_list_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.Router)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.rpc.router.RoutingTableRequest routing_table_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_table_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.router.RoutingTableList routing_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.router.ConnectionsRequest connections_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_connections_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.router.ConnectionsList connections_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connections_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.router.NeighboursRequest neighbours_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbours_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.router.NeighboursList neighbours_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbours_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Router::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.Router)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.rpc.router.RoutingTableRequest routing_table_request = 1;
  if (_internal_has_routing_table_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::routing_table_request(this),
        _Internal::routing_table_request(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.router.RoutingTableList routing_table = 2;
  if (_internal_has_routing_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routing_table(this),
        _Internal::routing_table(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.router.ConnectionsRequest connections_request = 3;
  if (_internal_has_connections_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::connections_request(this),
        _Internal::connections_request(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.router.ConnectionsList connections_list = 4;
  if (_internal_has_connections_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::connections_list(this),
        _Internal::connections_list(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.router.NeighboursRequest neighbours_request = 5;
  if (_internal_has_neighbours_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::neighbours_request(this),
        _Internal::neighbours_request(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.router.NeighboursList neighbours_list = 6;
  if (_internal_has_neighbours_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::neighbours_list(this),
        _Internal::neighbours_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.Router)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.rpc.router.RoutingTableRequest routing_table_request = 1;
    case kRoutingTableRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.routing_table_request_);
      break;
    }
    // .qaul.rpc.router.RoutingTableList routing_table = 2;
    case kRoutingTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.routing_table_);
      break;
    }
    // .qaul.rpc.router.ConnectionsRequest connections_request = 3;
    case kConnectionsRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connections_request_);
      break;
    }
    // .qaul.rpc.router.ConnectionsList connections_list = 4;
    case kConnectionsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.connections_list_);
      break;
    }
    // .qaul.rpc.router.NeighboursRequest neighbours_request = 5;
    case kNeighboursRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.neighbours_request_);
      break;
    }
    // .qaul.rpc.router.NeighboursList neighbours_list = 6;
    case kNeighboursList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.neighbours_list_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Router::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Router::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Router::GetClassData() const { return &_class_data_; }


void Router::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Router*>(&to_msg);
  auto& from = static_cast<const Router&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.Router)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRoutingTableRequest: {
      _this->_internal_mutable_routing_table_request()->::qaul::rpc::router::RoutingTableRequest::MergeFrom(
          from._internal_routing_table_request());
      break;
    }
    case kRoutingTable: {
      _this->_internal_mutable_routing_table()->::qaul::rpc::router::RoutingTableList::MergeFrom(
          from._internal_routing_table());
      break;
    }
    case kConnectionsRequest: {
      _this->_internal_mutable_connections_request()->::qaul::rpc::router::ConnectionsRequest::MergeFrom(
          from._internal_connections_request());
      break;
    }
    case kConnectionsList: {
      _this->_internal_mutable_connections_list()->::qaul::rpc::router::ConnectionsList::MergeFrom(
          from._internal_connections_list());
      break;
    }
    case kNeighboursRequest: {
      _this->_internal_mutable_neighbours_request()->::qaul::rpc::router::NeighboursRequest::MergeFrom(
          from._internal_neighbours_request());
      break;
    }
    case kNeighboursList: {
      _this->_internal_mutable_neighbours_list()->::qaul::rpc::router::NeighboursList::MergeFrom(
          from._internal_neighbours_list());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[0]);
}

// ===================================================================

class RoutingTableRequest::_Internal {
 public:
};

RoutingTableRequest::RoutingTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableRequest)
}
RoutingTableRequest::RoutingTableRequest(const RoutingTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RoutingTableRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[1]);
}

// ===================================================================

class RoutingTableList::_Internal {
 public:
};

RoutingTableList::RoutingTableList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableList)
}
RoutingTableList::RoutingTableList(const RoutingTableList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingTableList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routing_table_){from._impl_.routing_table_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableList)
}

inline void RoutingTableList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routing_table_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingTableList::~RoutingTableList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.RoutingTableList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingTableList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routing_table_.~RepeatedPtrField();
}

void RoutingTableList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingTableList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.RoutingTableList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routing_table_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingTableList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.router.RoutingTableEntry routing_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routing_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingTableList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.RoutingTableList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.RoutingTableEntry routing_table = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routing_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_routing_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.RoutingTableList)
  return target;
}

size_t RoutingTableList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.RoutingTableList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.RoutingTableEntry routing_table = 1;
  total_size += 1UL * this->_internal_routing_table_size();
  for (const auto& msg : this->_impl_.routing_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingTableList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableList::GetClassData() const { return &_class_data_; }


void RoutingTableList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingTableList*>(&to_msg);
  auto& from = static_cast<const RoutingTableList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.RoutingTableList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routing_table_.MergeFrom(from._impl_.routing_table_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingTableList::CopyFrom(const RoutingTableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.RoutingTableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTableList::IsInitialized() const {
  return true;
}

void RoutingTableList::InternalSwap(RoutingTableList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routing_table_.InternalSwap(&other->_impl_.routing_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[2]);
}

// ===================================================================

class RoutingTableEntry::_Internal {
 public:
};

RoutingTableEntry::RoutingTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableEntry)
}
RoutingTableEntry::RoutingTableEntry(const RoutingTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingTableEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connections_){from._impl_.connections_}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableEntry)
}

inline void RoutingTableEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connections_){arena}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoutingTableEntry::~RoutingTableEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.RoutingTableEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connections_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
}

void RoutingTableEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.RoutingTableEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connections_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingTableEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.RoutingTableConnection connections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingTableEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.RoutingTableEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .qaul.rpc.router.RoutingTableConnection connections = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connections_size()); i < n; i++) {
    const auto& repfield = this->_internal_connections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.RoutingTableEntry)
  return target;
}

size_t RoutingTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.RoutingTableEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.RoutingTableConnection connections = 2;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->_impl_.connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableEntry::GetClassData() const { return &_class_data_; }


void RoutingTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingTableEntry*>(&to_msg);
  auto& from = static_cast<const RoutingTableEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.RoutingTableEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connections_.MergeFrom(from._impl_.connections_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingTableEntry::CopyFrom(const RoutingTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.RoutingTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTableEntry::IsInitialized() const {
  return true;
}

void RoutingTableEntry::InternalSwap(RoutingTableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connections_.InternalSwap(&other->_impl_.connections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[3]);
}

// ===================================================================

class RoutingTableConnection::_Internal {
 public:
};

RoutingTableConnection::RoutingTableConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableConnection)
}
RoutingTableConnection::RoutingTableConnection(const RoutingTableConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingTableConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.via_){}
    , decltype(_impl_.module_){}
    , decltype(_impl_.rtt_){}
    , decltype(_impl_.hop_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.via_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.via_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_via().empty()) {
    _this->_impl_.via_.Set(from._internal_via(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.module_, &from._impl_.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hop_count_) -
    reinterpret_cast<char*>(&_impl_.module_)) + sizeof(_impl_.hop_count_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableConnection)
}

inline void RoutingTableConnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.via_){}
    , decltype(_impl_.module_){0}
    , decltype(_impl_.rtt_){0u}
    , decltype(_impl_.hop_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.via_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.via_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoutingTableConnection::~RoutingTableConnection() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.RoutingTableConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingTableConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.via_.Destroy();
}

void RoutingTableConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingTableConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.RoutingTableConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.via_.ClearToEmpty();
  ::memset(&_impl_.module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hop_count_) -
      reinterpret_cast<char*>(&_impl_.module_)) + sizeof(_impl_.hop_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingTableConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.rpc.router.ConnectionModule module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_module(static_cast<::qaul::rpc::router::ConnectionModule>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes via = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_via();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hop_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingTableConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.RoutingTableConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.rpc.router.ConnectionModule module = 2;
  if (this->_internal_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_module(), target);
  }

  // uint32 rtt = 3;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtt(), target);
  }

  // bytes via = 4;
  if (!this->_internal_via().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_via(), target);
  }

  // uint32 hop_count = 5;
  if (this->_internal_hop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hop_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.RoutingTableConnection)
  return target;
}

size_t RoutingTableConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.RoutingTableConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes via = 4;
  if (!this->_internal_via().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_via());
  }

  // .qaul.rpc.router.ConnectionModule module = 2;
  if (this->_internal_module() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_module());
  }

  // uint32 rtt = 3;
  if (this->_internal_rtt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtt());
  }

  // uint32 hop_count = 5;
  if (this->_internal_hop_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hop_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingTableConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableConnection::GetClassData() const { return &_class_data_; }


void RoutingTableConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingTableConnection*>(&to_msg);
  auto& from = static_cast<const RoutingTableConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.RoutingTableConnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_via().empty()) {
    _this->_internal_set_via(from._internal_via());
  }
  if (from._internal_module() != 0) {
    _this->_internal_set_module(from._internal_module());
  }
  if (from._internal_rtt() != 0) {
    _this->_internal_set_rtt(from._internal_rtt());
  }
  if (from._internal_hop_count() != 0) {
    _this->_internal_set_hop_count(from._internal_hop_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingTableConnection::CopyFrom(const RoutingTableConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.RoutingTableConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTableConnection::IsInitialized() const {
  return true;
}

void RoutingTableConnection::InternalSwap(RoutingTableConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.via_, lhs_arena,
      &other->_impl_.via_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingTableConnection, _impl_.hop_count_)
      + sizeof(RoutingTableConnection::_impl_.hop_count_)
      - PROTOBUF_FIELD_OFFSET(RoutingTableConnection, _impl_.module_)>(
          reinterpret_cast<char*>(&_impl_.module_),
          reinterpret_cast<char*>(&other->_impl_.module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[4]);
}

// ===================================================================

class ConnectionsRequest::_Internal {
 public:
};

ConnectionsRequest::ConnectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionsRequest)
}
ConnectionsRequest::ConnectionsRequest(const ConnectionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ConnectionsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ConnectionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[5]);
}

// ===================================================================

class ConnectionsList::_Internal {
 public:
};

ConnectionsList::ConnectionsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionsList)
}
ConnectionsList::ConnectionsList(const ConnectionsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionsList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lan_){from._impl_.lan_}
    , decltype(_impl_.internet_){from._impl_.internet_}
    , decltype(_impl_.ble_){from._impl_.ble_}
    , decltype(_impl_.local_){from._impl_.local_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionsList)
}

inline void ConnectionsList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lan_){arena}
    , decltype(_impl_.internet_){arena}
    , decltype(_impl_.ble_){arena}
    , decltype(_impl_.local_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectionsList::~ConnectionsList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.ConnectionsList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionsList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lan_.~RepeatedPtrField();
  _impl_.internet_.~RepeatedPtrField();
  _impl_.ble_.~RepeatedPtrField();
  _impl_.local_.~RepeatedPtrField();
}

void ConnectionsList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionsList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.ConnectionsList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lan_.Clear();
  _impl_.internet_.Clear();
  _impl_.ble_.Clear();
  _impl_.local_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionsList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.router.ConnectionsUserEntry lan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionsUserEntry internet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionsUserEntry ble = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ble(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionsUserEntry local = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionsList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.ConnectionsList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.ConnectionsUserEntry lan = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lan_size()); i < n; i++) {
    const auto& repfield = this->_internal_lan(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry internet = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internet_size()); i < n; i++) {
    const auto& repfield = this->_internal_internet(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry ble = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ble_size()); i < n; i++) {
    const auto& repfield = this->_internal_ble(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry local = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_size()); i < n; i++) {
    const auto& repfield = this->_internal_local(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.ConnectionsList)
  return target;
}

size_t ConnectionsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.ConnectionsList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.ConnectionsUserEntry lan = 1;
  total_size += 1UL * this->_internal_lan_size();
  for (const auto& msg : this->_impl_.lan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry internet = 2;
  total_size += 1UL * this->_internal_internet_size();
  for (const auto& msg : this->_impl_.internet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry ble = 3;
  total_size += 1UL * this->_internal_ble_size();
  for (const auto& msg : this->_impl_.ble_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry local = 4;
  total_size += 1UL * this->_internal_local_size();
  for (const auto& msg : this->_impl_.local_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionsList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionsList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionsList::GetClassData() const { return &_class_data_; }


void ConnectionsList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionsList*>(&to_msg);
  auto& from = static_cast<const ConnectionsList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.ConnectionsList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lan_.MergeFrom(from._impl_.lan_);
  _this->_impl_.internet_.MergeFrom(from._impl_.internet_);
  _this->_impl_.ble_.MergeFrom(from._impl_.ble_);
  _this->_impl_.local_.MergeFrom(from._impl_.local_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionsList::CopyFrom(const ConnectionsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.ConnectionsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionsList::IsInitialized() const {
  return true;
}

void ConnectionsList::InternalSwap(ConnectionsList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lan_.InternalSwap(&other->_impl_.lan_);
  _impl_.internet_.InternalSwap(&other->_impl_.internet_);
  _impl_.ble_.InternalSwap(&other->_impl_.ble_);
  _impl_.local_.InternalSwap(&other->_impl_.local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionsList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[6]);
}

// ===================================================================

class ConnectionsUserEntry::_Internal {
 public:
};

ConnectionsUserEntry::ConnectionsUserEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionsUserEntry)
}
ConnectionsUserEntry::ConnectionsUserEntry(const ConnectionsUserEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionsUserEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connections_){from._impl_.connections_}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionsUserEntry)
}

inline void ConnectionsUserEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connections_){arena}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionsUserEntry::~ConnectionsUserEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.ConnectionsUserEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionsUserEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connections_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
}

void ConnectionsUserEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionsUserEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.ConnectionsUserEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connections_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionsUserEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionEntry connections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionsUserEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.ConnectionsUserEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .qaul.rpc.router.ConnectionEntry connections = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connections_size()); i < n; i++) {
    const auto& repfield = this->_internal_connections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.ConnectionsUserEntry)
  return target;
}

size_t ConnectionsUserEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.ConnectionsUserEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.ConnectionEntry connections = 2;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->_impl_.connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionsUserEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionsUserEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionsUserEntry::GetClassData() const { return &_class_data_; }


void ConnectionsUserEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionsUserEntry*>(&to_msg);
  auto& from = static_cast<const ConnectionsUserEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.ConnectionsUserEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connections_.MergeFrom(from._impl_.connections_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionsUserEntry::CopyFrom(const ConnectionsUserEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.ConnectionsUserEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionsUserEntry::IsInitialized() const {
  return true;
}

void ConnectionsUserEntry::InternalSwap(ConnectionsUserEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connections_.InternalSwap(&other->_impl_.connections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionsUserEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[7]);
}

// ===================================================================

class ConnectionEntry::_Internal {
 public:
};

ConnectionEntry::ConnectionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionEntry)
}
ConnectionEntry::ConnectionEntry(const ConnectionEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.via_){}
    , decltype(_impl_.rtt_){}
    , decltype(_impl_.hop_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.via_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.via_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_via().empty()) {
    _this->_impl_.via_.Set(from._internal_via(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rtt_, &from._impl_.rtt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hop_count_) -
    reinterpret_cast<char*>(&_impl_.rtt_)) + sizeof(_impl_.hop_count_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionEntry)
}

inline void ConnectionEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.via_){}
    , decltype(_impl_.rtt_){0u}
    , decltype(_impl_.hop_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.via_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.via_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionEntry::~ConnectionEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.ConnectionEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.via_.Destroy();
}

void ConnectionEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.ConnectionEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.via_.ClearToEmpty();
  ::memset(&_impl_.rtt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hop_count_) -
      reinterpret_cast<char*>(&_impl_.rtt_)) + sizeof(_impl_.hop_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rtt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hop_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes via = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_via();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.ConnectionEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rtt = 1;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rtt(), target);
  }

  // uint32 hop_count = 2;
  if (this->_internal_hop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hop_count(), target);
  }

  // bytes via = 3;
  if (!this->_internal_via().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_via(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.ConnectionEntry)
  return target;
}

size_t ConnectionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.ConnectionEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes via = 3;
  if (!this->_internal_via().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_via());
  }

  // uint32 rtt = 1;
  if (this->_internal_rtt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtt());
  }

  // uint32 hop_count = 2;
  if (this->_internal_hop_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hop_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionEntry::GetClassData() const { return &_class_data_; }


void ConnectionEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionEntry*>(&to_msg);
  auto& from = static_cast<const ConnectionEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.ConnectionEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_via().empty()) {
    _this->_internal_set_via(from._internal_via());
  }
  if (from._internal_rtt() != 0) {
    _this->_internal_set_rtt(from._internal_rtt());
  }
  if (from._internal_hop_count() != 0) {
    _this->_internal_set_hop_count(from._internal_hop_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionEntry::CopyFrom(const ConnectionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.ConnectionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionEntry::IsInitialized() const {
  return true;
}

void ConnectionEntry::InternalSwap(ConnectionEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.via_, lhs_arena,
      &other->_impl_.via_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionEntry, _impl_.hop_count_)
      + sizeof(ConnectionEntry::_impl_.hop_count_)
      - PROTOBUF_FIELD_OFFSET(ConnectionEntry, _impl_.rtt_)>(
          reinterpret_cast<char*>(&_impl_.rtt_),
          reinterpret_cast<char*>(&other->_impl_.rtt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[8]);
}

// ===================================================================

class NeighboursRequest::_Internal {
 public:
};

NeighboursRequest::NeighboursRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.NeighboursRequest)
}
NeighboursRequest::NeighboursRequest(const NeighboursRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NeighboursRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.NeighboursRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeighboursRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeighboursRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NeighboursRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[9]);
}

// ===================================================================

class NeighboursList::_Internal {
 public:
};

NeighboursList::NeighboursList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.NeighboursList)
}
NeighboursList::NeighboursList(const NeighboursList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NeighboursList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lan_){from._impl_.lan_}
    , decltype(_impl_.internet_){from._impl_.internet_}
    , decltype(_impl_.ble_){from._impl_.ble_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.NeighboursList)
}

inline void NeighboursList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lan_){arena}
    , decltype(_impl_.internet_){arena}
    , decltype(_impl_.ble_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NeighboursList::~NeighboursList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.NeighboursList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NeighboursList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lan_.~RepeatedPtrField();
  _impl_.internet_.~RepeatedPtrField();
  _impl_.ble_.~RepeatedPtrField();
}

void NeighboursList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NeighboursList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.NeighboursList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lan_.Clear();
  _impl_.internet_.Clear();
  _impl_.ble_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeighboursList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.router.NeighboursEntry lan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.NeighboursEntry internet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.NeighboursEntry ble = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ble(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NeighboursList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.NeighboursList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.NeighboursEntry lan = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lan_size()); i < n; i++) {
    const auto& repfield = this->_internal_lan(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .qaul.rpc.router.NeighboursEntry internet = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internet_size()); i < n; i++) {
    const auto& repfield = this->_internal_internet(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .qaul.rpc.router.NeighboursEntry ble = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ble_size()); i < n; i++) {
    const auto& repfield = this->_internal_ble(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.NeighboursList)
  return target;
}

size_t NeighboursList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.NeighboursList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.NeighboursEntry lan = 1;
  total_size += 1UL * this->_internal_lan_size();
  for (const auto& msg : this->_impl_.lan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.NeighboursEntry internet = 2;
  total_size += 1UL * this->_internal_internet_size();
  for (const auto& msg : this->_impl_.internet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.NeighboursEntry ble = 3;
  total_size += 1UL * this->_internal_ble_size();
  for (const auto& msg : this->_impl_.ble_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeighboursList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NeighboursList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeighboursList::GetClassData() const { return &_class_data_; }


void NeighboursList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NeighboursList*>(&to_msg);
  auto& from = static_cast<const NeighboursList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.NeighboursList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lan_.MergeFrom(from._impl_.lan_);
  _this->_impl_.internet_.MergeFrom(from._impl_.internet_);
  _this->_impl_.ble_.MergeFrom(from._impl_.ble_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeighboursList::CopyFrom(const NeighboursList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.NeighboursList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighboursList::IsInitialized() const {
  return true;
}

void NeighboursList::InternalSwap(NeighboursList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lan_.InternalSwap(&other->_impl_.lan_);
  _impl_.internet_.InternalSwap(&other->_impl_.internet_);
  _impl_.ble_.InternalSwap(&other->_impl_.ble_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeighboursList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[10]);
}

// ===================================================================

class NeighboursEntry::_Internal {
 public:
};

NeighboursEntry::NeighboursEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.NeighboursEntry)
}
NeighboursEntry::NeighboursEntry(const NeighboursEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NeighboursEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , decltype(_impl_.rtt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.rtt_ = from._impl_.rtt_;
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.NeighboursEntry)
}

inline void NeighboursEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , decltype(_impl_.rtt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NeighboursEntry::~NeighboursEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.NeighboursEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NeighboursEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
}

void NeighboursEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NeighboursEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.NeighboursEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_id_.ClearToEmpty();
  _impl_.rtt_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeighboursEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NeighboursEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.NeighboursEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.NeighboursEntry)
  return target;
}

size_t NeighboursEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.NeighboursEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeighboursEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NeighboursEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeighboursEntry::GetClassData() const { return &_class_data_; }


void NeighboursEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NeighboursEntry*>(&to_msg);
  auto& from = static_cast<const NeighboursEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.NeighboursEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_rtt() != 0) {
    _this->_internal_set_rtt(from._internal_rtt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeighboursEntry::CopyFrom(const NeighboursEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.NeighboursEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighboursEntry::IsInitialized() const {
  return true;
}

void NeighboursEntry::InternalSwap(NeighboursEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_id_, lhs_arena,
      &other->_impl_.node_id_, rhs_arena
  );
  swap(_impl_.rtt_, other->_impl_.rtt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeighboursEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace router
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::Router*
Arena::CreateMaybeMessage< ::qaul::rpc::router::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableRequest*
Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableList*
Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableEntry*
Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableConnection*
Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionsRequest*
Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionsList*
Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionsList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionsList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionsUserEntry*
Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionsUserEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionsUserEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionEntry*
Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::NeighboursRequest*
Arena::CreateMaybeMessage< ::qaul::rpc::router::NeighboursRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::NeighboursRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::NeighboursList*
Arena::CreateMaybeMessage< ::qaul::rpc::router::NeighboursList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::NeighboursList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::NeighboursEntry*
Arena::CreateMaybeMessage< ::qaul::rpc::router::NeighboursEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::NeighboursEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
