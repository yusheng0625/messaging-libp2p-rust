// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/router_net_info.proto

#include "router/router_net_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace net {
namespace router_net_info {
PROTOBUF_CONSTEXPR RouterInfoContainer::RouterInfoContainer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterInfoContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterInfoContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterInfoContainerDefaultTypeInternal() {}
  union {
    RouterInfoContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterInfoContainerDefaultTypeInternal _RouterInfoContainer_default_instance_;
PROTOBUF_CONSTEXPR RouterInfoContent::RouterInfoContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.routerinfomodule_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterInfoContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterInfoContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterInfoContentDefaultTypeInternal() {}
  union {
    RouterInfoContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterInfoContentDefaultTypeInternal _RouterInfoContent_default_instance_;
PROTOBUF_CONSTEXPR RouterInfoMessage::RouterInfoMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routes_)*/nullptr
  , /*decltype(_impl_.feeds_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterInfoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterInfoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterInfoMessageDefaultTypeInternal() {}
  union {
    RouterInfoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterInfoMessageDefaultTypeInternal _RouterInfoMessage_default_instance_;
PROTOBUF_CONSTEXPR RoutingInfoTable::RoutingInfoTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingInfoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingInfoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingInfoTableDefaultTypeInternal() {}
  union {
    RoutingInfoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingInfoTableDefaultTypeInternal _RoutingInfoTable_default_instance_;
PROTOBUF_CONSTEXPR RoutingInfoEntry::RoutingInfoEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rtt_)*/0u
  , /*decltype(_impl_.pgid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingInfoEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingInfoEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingInfoEntryDefaultTypeInternal() {}
  union {
    RoutingInfoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingInfoEntryDefaultTypeInternal _RoutingInfoEntry_default_instance_;
PROTOBUF_CONSTEXPR UserIdTable::UserIdTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserIdTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserIdTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserIdTableDefaultTypeInternal() {}
  union {
    UserIdTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserIdTableDefaultTypeInternal _UserIdTable_default_instance_;
PROTOBUF_CONSTEXPR UserInfoTable::UserInfoTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoTableDefaultTypeInternal() {}
  union {
    UserInfoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoTableDefaultTypeInternal _UserInfoTable_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR FeedIdsTable::FeedIdsTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedIdsTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedIdsTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedIdsTableDefaultTypeInternal() {}
  union {
    FeedIdsTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedIdsTableDefaultTypeInternal _FeedIdsTable_default_instance_;
PROTOBUF_CONSTEXPR FeedRequestMessage::FeedRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feeds_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedRequestMessageDefaultTypeInternal() {}
  union {
    FeedRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedRequestMessageDefaultTypeInternal _FeedRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR FeedResponseMessage::FeedResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feeds_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedResponseMessageDefaultTypeInternal() {}
  union {
    FeedResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedResponseMessageDefaultTypeInternal _FeedResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR FeedResponseTable::FeedResponseTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedResponseTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedResponseTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedResponseTableDefaultTypeInternal() {}
  union {
    FeedResponseTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedResponseTableDefaultTypeInternal _FeedResponseTable_default_instance_;
PROTOBUF_CONSTEXPR FeedMessage::FeedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedMessageDefaultTypeInternal() {}
  union {
    FeedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedMessageDefaultTypeInternal _FeedMessage_default_instance_;
}  // namespace router_net_info
}  // namespace net
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_router_2frouter_5fnet_5finfo_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_router_2frouter_5fnet_5finfo_2eproto = nullptr;

const uint32_t TableStruct_router_2frouter_5fnet_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContainer, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContainer, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, _impl_.routerinfomodule_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, _impl_.routes_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, _impl_.feeds_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoTable, _impl_.entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, _impl_.rtt_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, _impl_.hc_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, _impl_.pgid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserIdTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserIdTable, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfoTable, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedIdsTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedIdsTable, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedRequestMessage, _impl_.feeds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedResponseMessage, _impl_.feeds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedResponseTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedResponseTable, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedMessage, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedMessage, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedMessage, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::FeedMessage, _impl_.time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::net::router_net_info::RouterInfoContainer)},
  { 8, -1, -1, sizeof(::qaul::net::router_net_info::RouterInfoContent)},
  { 18, -1, -1, sizeof(::qaul::net::router_net_info::RouterInfoMessage)},
  { 28, -1, -1, sizeof(::qaul::net::router_net_info::RoutingInfoTable)},
  { 35, -1, -1, sizeof(::qaul::net::router_net_info::RoutingInfoEntry)},
  { 45, -1, -1, sizeof(::qaul::net::router_net_info::UserIdTable)},
  { 52, -1, -1, sizeof(::qaul::net::router_net_info::UserInfoTable)},
  { 59, -1, -1, sizeof(::qaul::net::router_net_info::UserInfo)},
  { 68, -1, -1, sizeof(::qaul::net::router_net_info::FeedIdsTable)},
  { 75, -1, -1, sizeof(::qaul::net::router_net_info::FeedRequestMessage)},
  { 82, -1, -1, sizeof(::qaul::net::router_net_info::FeedResponseMessage)},
  { 89, -1, -1, sizeof(::qaul::net::router_net_info::FeedResponseTable)},
  { 96, -1, -1, sizeof(::qaul::net::router_net_info::FeedMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::net::router_net_info::_RouterInfoContainer_default_instance_._instance,
  &::qaul::net::router_net_info::_RouterInfoContent_default_instance_._instance,
  &::qaul::net::router_net_info::_RouterInfoMessage_default_instance_._instance,
  &::qaul::net::router_net_info::_RoutingInfoTable_default_instance_._instance,
  &::qaul::net::router_net_info::_RoutingInfoEntry_default_instance_._instance,
  &::qaul::net::router_net_info::_UserIdTable_default_instance_._instance,
  &::qaul::net::router_net_info::_UserInfoTable_default_instance_._instance,
  &::qaul::net::router_net_info::_UserInfo_default_instance_._instance,
  &::qaul::net::router_net_info::_FeedIdsTable_default_instance_._instance,
  &::qaul::net::router_net_info::_FeedRequestMessage_default_instance_._instance,
  &::qaul::net::router_net_info::_FeedResponseMessage_default_instance_._instance,
  &::qaul::net::router_net_info::_FeedResponseTable_default_instance_._instance,
  &::qaul::net::router_net_info::_FeedMessage_default_instance_._instance,
};

const char descriptor_table_protodef_router_2frouter_5fnet_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034router/router_net_info.proto\022\030qaul.net"
  ".router_net_info\"9\n\023RouterInfoContainer\022"
  "\021\n\tsignature\030\001 \001(\014\022\017\n\007message\030\002 \001(\014\"\204\001\n\021"
  "RouterInfoContent\022\n\n\002id\030\001 \001(\014\022D\n\020routerI"
  "nfoModule\030\002 \001(\0162*.qaul.net.router_net_in"
  "fo.RouterInfoModule\022\017\n\007content\030\003 \001(\014\022\014\n\004"
  "time\030\004 \001(\004\"\247\001\n\021RouterInfoMessage\022\014\n\004node"
  "\030\001 \001(\014\022:\n\006routes\030\002 \001(\0132*.qaul.net.router"
  "_net_info.RoutingInfoTable\0225\n\005feeds\030\004 \001("
  "\0132&.qaul.net.router_net_info.FeedIdsTabl"
  "e\022\021\n\ttimestamp\030\005 \001(\004\"M\n\020RoutingInfoTable"
  "\0229\n\005entry\030\001 \003(\0132*.qaul.net.router_net_in"
  "fo.RoutingInfoEntry\"G\n\020RoutingInfoEntry\022"
  "\014\n\004user\030\001 \001(\014\022\013\n\003rtt\030\002 \001(\r\022\n\n\002hc\030\003 \001(\014\022\014"
  "\n\004pgid\030\005 \001(\r\"\032\n\013UserIdTable\022\013\n\003ids\030\001 \003(\014"
  "\"A\n\rUserInfoTable\0220\n\004info\030\001 \003(\0132\".qaul.n"
  "et.router_net_info.UserInfo\"1\n\010UserInfo\022"
  "\n\n\002id\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\022\014\n\004name\030\003 \001(\t\"\033"
  "\n\014FeedIdsTable\022\013\n\003ids\030\001 \003(\014\"K\n\022FeedReque"
  "stMessage\0225\n\005feeds\030\001 \001(\0132&.qaul.net.rout"
  "er_net_info.FeedIdsTable\"Q\n\023FeedResponse"
  "Message\022:\n\005feeds\030\001 \001(\0132+.qaul.net.router"
  "_net_info.FeedResponseTable\"L\n\021FeedRespo"
  "nseTable\0227\n\010messages\030\001 \003(\0132%.qaul.net.ro"
  "uter_net_info.FeedMessage\"S\n\013FeedMessage"
  "\022\022\n\nmessage_id\030\001 \001(\014\022\021\n\tsender_id\030\002 \001(\014\022"
  "\017\n\007content\030\003 \001(\t\022\014\n\004time\030\004 \001(\004*m\n\020Router"
  "InfoModule\022\017\n\013ROUTER_INFO\020\000\022\020\n\014FEED_REQU"
  "EST\020\001\022\021\n\rFEED_RESPONSE\020\002\022\020\n\014USER_REQUEST"
  "\020\003\022\021\n\rUSER_RESPONSE\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_router_2frouter_5fnet_5finfo_2eproto = {
    false, false, 1189, descriptor_table_protodef_router_2frouter_5fnet_5finfo_2eproto,
    "router/router_net_info.proto",
    &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_router_2frouter_5fnet_5finfo_2eproto::offsets,
    file_level_metadata_router_2frouter_5fnet_5finfo_2eproto, file_level_enum_descriptors_router_2frouter_5fnet_5finfo_2eproto,
    file_level_service_descriptors_router_2frouter_5fnet_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter() {
  return &descriptor_table_router_2frouter_5fnet_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_router_2frouter_5fnet_5finfo_2eproto(&descriptor_table_router_2frouter_5fnet_5finfo_2eproto);
namespace qaul {
namespace net {
namespace router_net_info {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouterInfoModule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2frouter_5fnet_5finfo_2eproto);
  return file_level_enum_descriptors_router_2frouter_5fnet_5finfo_2eproto[0];
}
bool RouterInfoModule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RouterInfoContainer::_Internal {
 public:
};

RouterInfoContainer::RouterInfoContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RouterInfoContainer)
}
RouterInfoContainer::RouterInfoContainer(const RouterInfoContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouterInfoContainer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RouterInfoContainer)
}

inline void RouterInfoContainer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouterInfoContainer::~RouterInfoContainer() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RouterInfoContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouterInfoContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
  _impl_.message_.Destroy();
}

void RouterInfoContainer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouterInfoContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RouterInfoContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterInfoContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouterInfoContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RouterInfoContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RouterInfoContainer)
  return target;
}

size_t RouterInfoContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RouterInfoContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouterInfoContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouterInfoContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouterInfoContainer::GetClassData() const { return &_class_data_; }


void RouterInfoContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouterInfoContainer*>(&to_msg);
  auto& from = static_cast<const RouterInfoContainer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RouterInfoContainer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouterInfoContainer::CopyFrom(const RouterInfoContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RouterInfoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoContainer::IsInitialized() const {
  return true;
}

void RouterInfoContainer::InternalSwap(RouterInfoContainer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterInfoContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[0]);
}

// ===================================================================

class RouterInfoContent::_Internal {
 public:
};

RouterInfoContent::RouterInfoContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RouterInfoContent)
}
RouterInfoContent::RouterInfoContent(const RouterInfoContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouterInfoContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.routerinfomodule_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.routerinfomodule_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.routerinfomodule_));
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RouterInfoContent)
}

inline void RouterInfoContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.routerinfomodule_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouterInfoContent::~RouterInfoContent() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RouterInfoContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouterInfoContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.content_.Destroy();
}

void RouterInfoContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouterInfoContent::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RouterInfoContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.routerinfomodule_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.routerinfomodule_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterInfoContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.RouterInfoModule routerInfoModule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_routerinfomodule(static_cast<::qaul::net::router_net_info::RouterInfoModule>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouterInfoContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RouterInfoContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .qaul.net.router_net_info.RouterInfoModule routerInfoModule = 2;
  if (this->_internal_routerinfomodule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_routerinfomodule(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  // uint64 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RouterInfoContent)
  return target;
}

size_t RouterInfoContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RouterInfoContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // uint64 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  // .qaul.net.router_net_info.RouterInfoModule routerInfoModule = 2;
  if (this->_internal_routerinfomodule() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_routerinfomodule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouterInfoContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouterInfoContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouterInfoContent::GetClassData() const { return &_class_data_; }


void RouterInfoContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouterInfoContent*>(&to_msg);
  auto& from = static_cast<const RouterInfoContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RouterInfoContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_routerinfomodule() != 0) {
    _this->_internal_set_routerinfomodule(from._internal_routerinfomodule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouterInfoContent::CopyFrom(const RouterInfoContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RouterInfoContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoContent::IsInitialized() const {
  return true;
}

void RouterInfoContent::InternalSwap(RouterInfoContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouterInfoContent, _impl_.routerinfomodule_)
      + sizeof(RouterInfoContent::_impl_.routerinfomodule_)
      - PROTOBUF_FIELD_OFFSET(RouterInfoContent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterInfoContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[1]);
}

// ===================================================================

class RouterInfoMessage::_Internal {
 public:
  static const ::qaul::net::router_net_info::RoutingInfoTable& routes(const RouterInfoMessage* msg);
  static const ::qaul::net::router_net_info::FeedIdsTable& feeds(const RouterInfoMessage* msg);
};

const ::qaul::net::router_net_info::RoutingInfoTable&
RouterInfoMessage::_Internal::routes(const RouterInfoMessage* msg) {
  return *msg->_impl_.routes_;
}
const ::qaul::net::router_net_info::FeedIdsTable&
RouterInfoMessage::_Internal::feeds(const RouterInfoMessage* msg) {
  return *msg->_impl_.feeds_;
}
RouterInfoMessage::RouterInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RouterInfoMessage)
}
RouterInfoMessage::RouterInfoMessage(const RouterInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouterInfoMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , decltype(_impl_.routes_){nullptr}
    , decltype(_impl_.feeds_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    _this->_impl_.node_.Set(from._internal_node(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_routes()) {
    _this->_impl_.routes_ = new ::qaul::net::router_net_info::RoutingInfoTable(*from._impl_.routes_);
  }
  if (from._internal_has_feeds()) {
    _this->_impl_.feeds_ = new ::qaul::net::router_net_info::FeedIdsTable(*from._impl_.feeds_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RouterInfoMessage)
}

inline void RouterInfoMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , decltype(_impl_.routes_){nullptr}
    , decltype(_impl_.feeds_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouterInfoMessage::~RouterInfoMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RouterInfoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouterInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.Destroy();
  if (this != internal_default_instance()) delete _impl_.routes_;
  if (this != internal_default_instance()) delete _impl_.feeds_;
}

void RouterInfoMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouterInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RouterInfoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.routes_ != nullptr) {
    delete _impl_.routes_;
  }
  _impl_.routes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.feeds_ != nullptr) {
    delete _impl_.feeds_;
  }
  _impl_.feeds_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterInfoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.RoutingInfoTable routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.FeedIdsTable feeds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_feeds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouterInfoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RouterInfoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node = 1;
  if (!this->_internal_node().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node(), target);
  }

  // .qaul.net.router_net_info.RoutingInfoTable routes = 2;
  if (this->_internal_has_routes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routes(this),
        _Internal::routes(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.router_net_info.FeedIdsTable feeds = 4;
  if (this->_internal_has_feeds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::feeds(this),
        _Internal::feeds(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RouterInfoMessage)
  return target;
}

size_t RouterInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RouterInfoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node = 1;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node());
  }

  // .qaul.net.router_net_info.RoutingInfoTable routes = 2;
  if (this->_internal_has_routes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routes_);
  }

  // .qaul.net.router_net_info.FeedIdsTable feeds = 4;
  if (this->_internal_has_feeds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feeds_);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouterInfoMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouterInfoMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouterInfoMessage::GetClassData() const { return &_class_data_; }


void RouterInfoMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouterInfoMessage*>(&to_msg);
  auto& from = static_cast<const RouterInfoMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RouterInfoMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _this->_internal_set_node(from._internal_node());
  }
  if (from._internal_has_routes()) {
    _this->_internal_mutable_routes()->::qaul::net::router_net_info::RoutingInfoTable::MergeFrom(
        from._internal_routes());
  }
  if (from._internal_has_feeds()) {
    _this->_internal_mutable_feeds()->::qaul::net::router_net_info::FeedIdsTable::MergeFrom(
        from._internal_feeds());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouterInfoMessage::CopyFrom(const RouterInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RouterInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoMessage::IsInitialized() const {
  return true;
}

void RouterInfoMessage::InternalSwap(RouterInfoMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_, lhs_arena,
      &other->_impl_.node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouterInfoMessage, _impl_.timestamp_)
      + sizeof(RouterInfoMessage::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(RouterInfoMessage, _impl_.routes_)>(
          reinterpret_cast<char*>(&_impl_.routes_),
          reinterpret_cast<char*>(&other->_impl_.routes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterInfoMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[2]);
}

// ===================================================================

class RoutingInfoTable::_Internal {
 public:
};

RoutingInfoTable::RoutingInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RoutingInfoTable)
}
RoutingInfoTable::RoutingInfoTable(const RoutingInfoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingInfoTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RoutingInfoTable)
}

inline void RoutingInfoTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingInfoTable::~RoutingInfoTable() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RoutingInfoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingInfoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void RoutingInfoTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingInfoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RoutingInfoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInfoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.net.router_net_info.RoutingInfoEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingInfoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RoutingInfoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.RoutingInfoEntry entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RoutingInfoTable)
  return target;
}

size_t RoutingInfoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RoutingInfoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.RoutingInfoEntry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInfoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingInfoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInfoTable::GetClassData() const { return &_class_data_; }


void RoutingInfoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingInfoTable*>(&to_msg);
  auto& from = static_cast<const RoutingInfoTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RoutingInfoTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInfoTable::CopyFrom(const RoutingInfoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RoutingInfoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInfoTable::IsInitialized() const {
  return true;
}

void RoutingInfoTable::InternalSwap(RoutingInfoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInfoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[3]);
}

// ===================================================================

class RoutingInfoEntry::_Internal {
 public:
};

RoutingInfoEntry::RoutingInfoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RoutingInfoEntry)
}
RoutingInfoEntry::RoutingInfoEntry(const RoutingInfoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingInfoEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.hc_){}
    , decltype(_impl_.rtt_){}
    , decltype(_impl_.pgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hc().empty()) {
    _this->_impl_.hc_.Set(from._internal_hc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rtt_, &from._impl_.rtt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pgid_) -
    reinterpret_cast<char*>(&_impl_.rtt_)) + sizeof(_impl_.pgid_));
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RoutingInfoEntry)
}

inline void RoutingInfoEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.hc_){}
    , decltype(_impl_.rtt_){0u}
    , decltype(_impl_.pgid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoutingInfoEntry::~RoutingInfoEntry() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RoutingInfoEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingInfoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
  _impl_.hc_.Destroy();
}

void RoutingInfoEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingInfoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RoutingInfoEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.hc_.ClearToEmpty();
  ::memset(&_impl_.rtt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pgid_) -
      reinterpret_cast<char*>(&_impl_.rtt_)) + sizeof(_impl_.pgid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInfoEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.pgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingInfoEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RoutingInfoEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user = 1;
  if (!this->_internal_user().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user(), target);
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtt(), target);
  }

  // bytes hc = 3;
  if (!this->_internal_hc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hc(), target);
  }

  // uint32 pgid = 5;
  if (this->_internal_pgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RoutingInfoEntry)
  return target;
}

size_t RoutingInfoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RoutingInfoEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user());
  }

  // bytes hc = 3;
  if (!this->_internal_hc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hc());
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtt());
  }

  // uint32 pgid = 5;
  if (this->_internal_pgid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInfoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingInfoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInfoEntry::GetClassData() const { return &_class_data_; }


void RoutingInfoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingInfoEntry*>(&to_msg);
  auto& from = static_cast<const RoutingInfoEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RoutingInfoEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_hc().empty()) {
    _this->_internal_set_hc(from._internal_hc());
  }
  if (from._internal_rtt() != 0) {
    _this->_internal_set_rtt(from._internal_rtt());
  }
  if (from._internal_pgid() != 0) {
    _this->_internal_set_pgid(from._internal_pgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInfoEntry::CopyFrom(const RoutingInfoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RoutingInfoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInfoEntry::IsInitialized() const {
  return true;
}

void RoutingInfoEntry::InternalSwap(RoutingInfoEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hc_, lhs_arena,
      &other->_impl_.hc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingInfoEntry, _impl_.pgid_)
      + sizeof(RoutingInfoEntry::_impl_.pgid_)
      - PROTOBUF_FIELD_OFFSET(RoutingInfoEntry, _impl_.rtt_)>(
          reinterpret_cast<char*>(&_impl_.rtt_),
          reinterpret_cast<char*>(&other->_impl_.rtt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInfoEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[4]);
}

// ===================================================================

class UserIdTable::_Internal {
 public:
};

UserIdTable::UserIdTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.UserIdTable)
}
UserIdTable::UserIdTable(const UserIdTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserIdTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.UserIdTable)
}

inline void UserIdTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserIdTable::~UserIdTable() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.UserIdTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserIdTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
}

void UserIdTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserIdTable::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.UserIdTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIdTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIdTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.UserIdTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.UserIdTable)
  return target;
}

size_t UserIdTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.UserIdTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIdTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserIdTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIdTable::GetClassData() const { return &_class_data_; }


void UserIdTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserIdTable*>(&to_msg);
  auto& from = static_cast<const UserIdTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.UserIdTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIdTable::CopyFrom(const UserIdTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.UserIdTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdTable::IsInitialized() const {
  return true;
}

void UserIdTable::InternalSwap(UserIdTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIdTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[5]);
}

// ===================================================================

class UserInfoTable::_Internal {
 public:
};

UserInfoTable::UserInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.UserInfoTable)
}
UserInfoTable::UserInfoTable(const UserInfoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfoTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){from._impl_.info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.UserInfoTable)
}

inline void UserInfoTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserInfoTable::~UserInfoTable() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.UserInfoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.~RepeatedPtrField();
}

void UserInfoTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.UserInfoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.net.router_net_info.UserInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.UserInfoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.UserInfo info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.UserInfoTable)
  return target;
}

size_t UserInfoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.UserInfoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.UserInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->_impl_.info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoTable::GetClassData() const { return &_class_data_; }


void UserInfoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfoTable*>(&to_msg);
  auto& from = static_cast<const UserInfoTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.UserInfoTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_.MergeFrom(from._impl_.info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoTable::CopyFrom(const UserInfoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.UserInfoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoTable::IsInitialized() const {
  return true;
}

void UserInfoTable::InternalSwap(UserInfoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[6]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.key_.Destroy();
  _impl_.name_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.net.router_net_info.UserInfo.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.net.router_net_info.UserInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[7]);
}

// ===================================================================

class FeedIdsTable::_Internal {
 public:
};

FeedIdsTable::FeedIdsTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.FeedIdsTable)
}
FeedIdsTable::FeedIdsTable(const FeedIdsTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedIdsTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.FeedIdsTable)
}

inline void FeedIdsTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeedIdsTable::~FeedIdsTable() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.FeedIdsTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedIdsTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
}

void FeedIdsTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedIdsTable::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.FeedIdsTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedIdsTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedIdsTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.FeedIdsTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.FeedIdsTable)
  return target;
}

size_t FeedIdsTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.FeedIdsTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedIdsTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedIdsTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedIdsTable::GetClassData() const { return &_class_data_; }


void FeedIdsTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedIdsTable*>(&to_msg);
  auto& from = static_cast<const FeedIdsTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.FeedIdsTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedIdsTable::CopyFrom(const FeedIdsTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.FeedIdsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedIdsTable::IsInitialized() const {
  return true;
}

void FeedIdsTable::InternalSwap(FeedIdsTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedIdsTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[8]);
}

// ===================================================================

class FeedRequestMessage::_Internal {
 public:
  static const ::qaul::net::router_net_info::FeedIdsTable& feeds(const FeedRequestMessage* msg);
};

const ::qaul::net::router_net_info::FeedIdsTable&
FeedRequestMessage::_Internal::feeds(const FeedRequestMessage* msg) {
  return *msg->_impl_.feeds_;
}
FeedRequestMessage::FeedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.FeedRequestMessage)
}
FeedRequestMessage::FeedRequestMessage(const FeedRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feeds_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feeds()) {
    _this->_impl_.feeds_ = new ::qaul::net::router_net_info::FeedIdsTable(*from._impl_.feeds_);
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.FeedRequestMessage)
}

inline void FeedRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feeds_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeedRequestMessage::~FeedRequestMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.FeedRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feeds_;
}

void FeedRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.FeedRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.feeds_ != nullptr) {
    delete _impl_.feeds_;
  }
  _impl_.feeds_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.net.router_net_info.FeedIdsTable feeds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feeds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.FeedRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.net.router_net_info.FeedIdsTable feeds = 1;
  if (this->_internal_has_feeds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feeds(this),
        _Internal::feeds(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.FeedRequestMessage)
  return target;
}

size_t FeedRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.FeedRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .qaul.net.router_net_info.FeedIdsTable feeds = 1;
  if (this->_internal_has_feeds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feeds_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedRequestMessage::GetClassData() const { return &_class_data_; }


void FeedRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedRequestMessage*>(&to_msg);
  auto& from = static_cast<const FeedRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.FeedRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feeds()) {
    _this->_internal_mutable_feeds()->::qaul::net::router_net_info::FeedIdsTable::MergeFrom(
        from._internal_feeds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedRequestMessage::CopyFrom(const FeedRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.FeedRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedRequestMessage::IsInitialized() const {
  return true;
}

void FeedRequestMessage::InternalSwap(FeedRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.feeds_, other->_impl_.feeds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[9]);
}

// ===================================================================

class FeedResponseMessage::_Internal {
 public:
  static const ::qaul::net::router_net_info::FeedResponseTable& feeds(const FeedResponseMessage* msg);
};

const ::qaul::net::router_net_info::FeedResponseTable&
FeedResponseMessage::_Internal::feeds(const FeedResponseMessage* msg) {
  return *msg->_impl_.feeds_;
}
FeedResponseMessage::FeedResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.FeedResponseMessage)
}
FeedResponseMessage::FeedResponseMessage(const FeedResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feeds_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feeds()) {
    _this->_impl_.feeds_ = new ::qaul::net::router_net_info::FeedResponseTable(*from._impl_.feeds_);
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.FeedResponseMessage)
}

inline void FeedResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feeds_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeedResponseMessage::~FeedResponseMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.FeedResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feeds_;
}

void FeedResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.FeedResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.feeds_ != nullptr) {
    delete _impl_.feeds_;
  }
  _impl_.feeds_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.net.router_net_info.FeedResponseTable feeds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feeds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.FeedResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.net.router_net_info.FeedResponseTable feeds = 1;
  if (this->_internal_has_feeds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feeds(this),
        _Internal::feeds(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.FeedResponseMessage)
  return target;
}

size_t FeedResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.FeedResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .qaul.net.router_net_info.FeedResponseTable feeds = 1;
  if (this->_internal_has_feeds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feeds_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedResponseMessage::GetClassData() const { return &_class_data_; }


void FeedResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedResponseMessage*>(&to_msg);
  auto& from = static_cast<const FeedResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.FeedResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feeds()) {
    _this->_internal_mutable_feeds()->::qaul::net::router_net_info::FeedResponseTable::MergeFrom(
        from._internal_feeds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedResponseMessage::CopyFrom(const FeedResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.FeedResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedResponseMessage::IsInitialized() const {
  return true;
}

void FeedResponseMessage::InternalSwap(FeedResponseMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.feeds_, other->_impl_.feeds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[10]);
}

// ===================================================================

class FeedResponseTable::_Internal {
 public:
};

FeedResponseTable::FeedResponseTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.FeedResponseTable)
}
FeedResponseTable::FeedResponseTable(const FeedResponseTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedResponseTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.FeedResponseTable)
}

inline void FeedResponseTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeedResponseTable::~FeedResponseTable() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.FeedResponseTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedResponseTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void FeedResponseTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedResponseTable::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.FeedResponseTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedResponseTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.net.router_net_info.FeedMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedResponseTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.FeedResponseTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.FeedMessage messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.FeedResponseTable)
  return target;
}

size_t FeedResponseTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.FeedResponseTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.FeedMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedResponseTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedResponseTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedResponseTable::GetClassData() const { return &_class_data_; }


void FeedResponseTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedResponseTable*>(&to_msg);
  auto& from = static_cast<const FeedResponseTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.FeedResponseTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedResponseTable::CopyFrom(const FeedResponseTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.FeedResponseTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedResponseTable::IsInitialized() const {
  return true;
}

void FeedResponseTable::InternalSwap(FeedResponseTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedResponseTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[11]);
}

// ===================================================================

class FeedMessage::_Internal {
 public:
};

FeedMessage::FeedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.FeedMessage)
}
FeedMessage::FeedMessage(const FeedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    _this->_impl_.sender_id_.Set(from._internal_sender_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.FeedMessage)
}

inline void FeedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedMessage::~FeedMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.FeedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_id_.Destroy();
  _impl_.sender_id_.Destroy();
  _impl_.content_.Destroy();
}

void FeedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.FeedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.sender_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.net.router_net_info.FeedMessage.content"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.FeedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message_id = 1;
  if (!this->_internal_message_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // bytes sender_id = 2;
  if (!this->_internal_sender_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sender_id(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.net.router_net_info.FeedMessage.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // uint64 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.FeedMessage)
  return target;
}

size_t FeedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.FeedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_id());
  }

  // bytes sender_id = 2;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_id());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedMessage::GetClassData() const { return &_class_data_; }


void FeedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedMessage*>(&to_msg);
  auto& from = static_cast<const FeedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.FeedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedMessage::CopyFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedMessage::IsInitialized() const {
  return true;
}

void FeedMessage::InternalSwap(FeedMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_id_, lhs_arena,
      &other->_impl_.sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace router_net_info
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RouterInfoContainer*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RouterInfoContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RouterInfoContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RouterInfoContent*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RouterInfoContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RouterInfoContent >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RouterInfoMessage*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RouterInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RouterInfoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RoutingInfoTable*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RoutingInfoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RoutingInfoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RoutingInfoEntry*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RoutingInfoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RoutingInfoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::UserIdTable*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::UserIdTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::UserIdTable >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::UserInfoTable*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::UserInfoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::UserInfoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::UserInfo*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::FeedIdsTable*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::FeedIdsTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::FeedIdsTable >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::FeedRequestMessage*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::FeedRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::FeedRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::FeedResponseMessage*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::FeedResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::FeedResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::FeedResponseTable*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::FeedResponseTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::FeedResponseTable >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::FeedMessage*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::FeedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::FeedMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
