// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc/debug.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2fdebug_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2fdebug_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2fdebug_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2fdebug_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2fdebug_2eproto;
namespace qaul {
namespace rpc {
namespace debug {
class Debug;
struct DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class DeleteLibqaulLogsRequest;
struct DeleteLibqaulLogsRequestDefaultTypeInternal;
extern DeleteLibqaulLogsRequestDefaultTypeInternal _DeleteLibqaulLogsRequest_default_instance_;
class HeartbeatRequest;
struct HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class HeartbeatResponse;
struct HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class LogToFile;
struct LogToFileDefaultTypeInternal;
extern LogToFileDefaultTypeInternal _LogToFile_default_instance_;
class Panic;
struct PanicDefaultTypeInternal;
extern PanicDefaultTypeInternal _Panic_default_instance_;
class StoragePathRequest;
struct StoragePathRequestDefaultTypeInternal;
extern StoragePathRequestDefaultTypeInternal _StoragePathRequest_default_instance_;
class StoragePathResponse;
struct StoragePathResponseDefaultTypeInternal;
extern StoragePathResponseDefaultTypeInternal _StoragePathResponse_default_instance_;
}  // namespace debug
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::debug::Debug* Arena::CreateMaybeMessage<::qaul::rpc::debug::Debug>(Arena*);
template<> ::qaul::rpc::debug::DeleteLibqaulLogsRequest* Arena::CreateMaybeMessage<::qaul::rpc::debug::DeleteLibqaulLogsRequest>(Arena*);
template<> ::qaul::rpc::debug::HeartbeatRequest* Arena::CreateMaybeMessage<::qaul::rpc::debug::HeartbeatRequest>(Arena*);
template<> ::qaul::rpc::debug::HeartbeatResponse* Arena::CreateMaybeMessage<::qaul::rpc::debug::HeartbeatResponse>(Arena*);
template<> ::qaul::rpc::debug::LogToFile* Arena::CreateMaybeMessage<::qaul::rpc::debug::LogToFile>(Arena*);
template<> ::qaul::rpc::debug::Panic* Arena::CreateMaybeMessage<::qaul::rpc::debug::Panic>(Arena*);
template<> ::qaul::rpc::debug::StoragePathRequest* Arena::CreateMaybeMessage<::qaul::rpc::debug::StoragePathRequest>(Arena*);
template<> ::qaul::rpc::debug::StoragePathResponse* Arena::CreateMaybeMessage<::qaul::rpc::debug::StoragePathResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace debug {

// ===================================================================

class Debug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.Debug) */ {
 public:
  inline Debug() : Debug(nullptr) {}
  ~Debug() override;
  explicit PROTOBUF_CONSTEXPR Debug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Debug(const Debug& from);
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug& operator=(Debug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Debug& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kHeartbeatRequest = 1,
    kHeartbeatResponse = 2,
    kPanic = 3,
    kLogToFile = 4,
    kStoragePathRequest = 5,
    kStoragePathResponse = 6,
    kDeleteLibqaulLogsRequest = 7,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Debug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Debug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Debug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Debug& from) {
    Debug::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.Debug";
  }
  protected:
  explicit Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatRequestFieldNumber = 1,
    kHeartbeatResponseFieldNumber = 2,
    kPanicFieldNumber = 3,
    kLogToFileFieldNumber = 4,
    kStoragePathRequestFieldNumber = 5,
    kStoragePathResponseFieldNumber = 6,
    kDeleteLibqaulLogsRequestFieldNumber = 7,
  };
  // .qaul.rpc.debug.HeartbeatRequest heartbeat_request = 1;
  bool has_heartbeat_request() const;
  private:
  bool _internal_has_heartbeat_request() const;
  public:
  void clear_heartbeat_request();
  const ::qaul::rpc::debug::HeartbeatRequest& heartbeat_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::debug::HeartbeatRequest* release_heartbeat_request();
  ::qaul::rpc::debug::HeartbeatRequest* mutable_heartbeat_request();
  void set_allocated_heartbeat_request(::qaul::rpc::debug::HeartbeatRequest* heartbeat_request);
  private:
  const ::qaul::rpc::debug::HeartbeatRequest& _internal_heartbeat_request() const;
  ::qaul::rpc::debug::HeartbeatRequest* _internal_mutable_heartbeat_request();
  public:
  void unsafe_arena_set_allocated_heartbeat_request(
      ::qaul::rpc::debug::HeartbeatRequest* heartbeat_request);
  ::qaul::rpc::debug::HeartbeatRequest* unsafe_arena_release_heartbeat_request();

  // .qaul.rpc.debug.HeartbeatResponse heartbeat_response = 2;
  bool has_heartbeat_response() const;
  private:
  bool _internal_has_heartbeat_response() const;
  public:
  void clear_heartbeat_response();
  const ::qaul::rpc::debug::HeartbeatResponse& heartbeat_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::debug::HeartbeatResponse* release_heartbeat_response();
  ::qaul::rpc::debug::HeartbeatResponse* mutable_heartbeat_response();
  void set_allocated_heartbeat_response(::qaul::rpc::debug::HeartbeatResponse* heartbeat_response);
  private:
  const ::qaul::rpc::debug::HeartbeatResponse& _internal_heartbeat_response() const;
  ::qaul::rpc::debug::HeartbeatResponse* _internal_mutable_heartbeat_response();
  public:
  void unsafe_arena_set_allocated_heartbeat_response(
      ::qaul::rpc::debug::HeartbeatResponse* heartbeat_response);
  ::qaul::rpc::debug::HeartbeatResponse* unsafe_arena_release_heartbeat_response();

  // .qaul.rpc.debug.Panic panic = 3;
  bool has_panic() const;
  private:
  bool _internal_has_panic() const;
  public:
  void clear_panic();
  const ::qaul::rpc::debug::Panic& panic() const;
  PROTOBUF_NODISCARD ::qaul::rpc::debug::Panic* release_panic();
  ::qaul::rpc::debug::Panic* mutable_panic();
  void set_allocated_panic(::qaul::rpc::debug::Panic* panic);
  private:
  const ::qaul::rpc::debug::Panic& _internal_panic() const;
  ::qaul::rpc::debug::Panic* _internal_mutable_panic();
  public:
  void unsafe_arena_set_allocated_panic(
      ::qaul::rpc::debug::Panic* panic);
  ::qaul::rpc::debug::Panic* unsafe_arena_release_panic();

  // .qaul.rpc.debug.LogToFile log_to_file = 4;
  bool has_log_to_file() const;
  private:
  bool _internal_has_log_to_file() const;
  public:
  void clear_log_to_file();
  const ::qaul::rpc::debug::LogToFile& log_to_file() const;
  PROTOBUF_NODISCARD ::qaul::rpc::debug::LogToFile* release_log_to_file();
  ::qaul::rpc::debug::LogToFile* mutable_log_to_file();
  void set_allocated_log_to_file(::qaul::rpc::debug::LogToFile* log_to_file);
  private:
  const ::qaul::rpc::debug::LogToFile& _internal_log_to_file() const;
  ::qaul::rpc::debug::LogToFile* _internal_mutable_log_to_file();
  public:
  void unsafe_arena_set_allocated_log_to_file(
      ::qaul::rpc::debug::LogToFile* log_to_file);
  ::qaul::rpc::debug::LogToFile* unsafe_arena_release_log_to_file();

  // .qaul.rpc.debug.StoragePathRequest storage_path_request = 5;
  bool has_storage_path_request() const;
  private:
  bool _internal_has_storage_path_request() const;
  public:
  void clear_storage_path_request();
  const ::qaul::rpc::debug::StoragePathRequest& storage_path_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::debug::StoragePathRequest* release_storage_path_request();
  ::qaul::rpc::debug::StoragePathRequest* mutable_storage_path_request();
  void set_allocated_storage_path_request(::qaul::rpc::debug::StoragePathRequest* storage_path_request);
  private:
  const ::qaul::rpc::debug::StoragePathRequest& _internal_storage_path_request() const;
  ::qaul::rpc::debug::StoragePathRequest* _internal_mutable_storage_path_request();
  public:
  void unsafe_arena_set_allocated_storage_path_request(
      ::qaul::rpc::debug::StoragePathRequest* storage_path_request);
  ::qaul::rpc::debug::StoragePathRequest* unsafe_arena_release_storage_path_request();

  // .qaul.rpc.debug.StoragePathResponse storage_path_response = 6;
  bool has_storage_path_response() const;
  private:
  bool _internal_has_storage_path_response() const;
  public:
  void clear_storage_path_response();
  const ::qaul::rpc::debug::StoragePathResponse& storage_path_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::debug::StoragePathResponse* release_storage_path_response();
  ::qaul::rpc::debug::StoragePathResponse* mutable_storage_path_response();
  void set_allocated_storage_path_response(::qaul::rpc::debug::StoragePathResponse* storage_path_response);
  private:
  const ::qaul::rpc::debug::StoragePathResponse& _internal_storage_path_response() const;
  ::qaul::rpc::debug::StoragePathResponse* _internal_mutable_storage_path_response();
  public:
  void unsafe_arena_set_allocated_storage_path_response(
      ::qaul::rpc::debug::StoragePathResponse* storage_path_response);
  ::qaul::rpc::debug::StoragePathResponse* unsafe_arena_release_storage_path_response();

  // .qaul.rpc.debug.DeleteLibqaulLogsRequest delete_libqaul_logs_request = 7;
  bool has_delete_libqaul_logs_request() const;
  private:
  bool _internal_has_delete_libqaul_logs_request() const;
  public:
  void clear_delete_libqaul_logs_request();
  const ::qaul::rpc::debug::DeleteLibqaulLogsRequest& delete_libqaul_logs_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::debug::DeleteLibqaulLogsRequest* release_delete_libqaul_logs_request();
  ::qaul::rpc::debug::DeleteLibqaulLogsRequest* mutable_delete_libqaul_logs_request();
  void set_allocated_delete_libqaul_logs_request(::qaul::rpc::debug::DeleteLibqaulLogsRequest* delete_libqaul_logs_request);
  private:
  const ::qaul::rpc::debug::DeleteLibqaulLogsRequest& _internal_delete_libqaul_logs_request() const;
  ::qaul::rpc::debug::DeleteLibqaulLogsRequest* _internal_mutable_delete_libqaul_logs_request();
  public:
  void unsafe_arena_set_allocated_delete_libqaul_logs_request(
      ::qaul::rpc::debug::DeleteLibqaulLogsRequest* delete_libqaul_logs_request);
  ::qaul::rpc::debug::DeleteLibqaulLogsRequest* unsafe_arena_release_delete_libqaul_logs_request();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.Debug)
 private:
  class _Internal;
  void set_has_heartbeat_request();
  void set_has_heartbeat_response();
  void set_has_panic();
  void set_has_log_to_file();
  void set_has_storage_path_request();
  void set_has_storage_path_response();
  void set_has_delete_libqaul_logs_request();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::debug::HeartbeatRequest* heartbeat_request_;
      ::qaul::rpc::debug::HeartbeatResponse* heartbeat_response_;
      ::qaul::rpc::debug::Panic* panic_;
      ::qaul::rpc::debug::LogToFile* log_to_file_;
      ::qaul::rpc::debug::StoragePathRequest* storage_path_request_;
      ::qaul::rpc::debug::StoragePathResponse* storage_path_response_;
      ::qaul::rpc::debug::DeleteLibqaulLogsRequest* delete_libqaul_logs_request_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.HeartbeatRequest) */ {
 public:
  inline HeartbeatRequest() : HeartbeatRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatRequest(const HeartbeatRequest& from);
  HeartbeatRequest(HeartbeatRequest&& from) noexcept
    : HeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
               &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HeartbeatRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HeartbeatRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.HeartbeatRequest";
  }
  protected:
  explicit HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.HeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.HeartbeatResponse) */ {
 public:
  inline HeartbeatResponse() : HeartbeatResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatResponse(const HeartbeatResponse& from);
  HeartbeatResponse(HeartbeatResponse&& from) noexcept
    : HeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
               &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HeartbeatResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HeartbeatResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.HeartbeatResponse";
  }
  protected:
  explicit HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.HeartbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class Panic final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.Panic) */ {
 public:
  inline Panic() : Panic(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Panic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Panic(const Panic& from);
  Panic(Panic&& from) noexcept
    : Panic() {
    *this = ::std::move(from);
  }

  inline Panic& operator=(const Panic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Panic& operator=(Panic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Panic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Panic* internal_default_instance() {
    return reinterpret_cast<const Panic*>(
               &_Panic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Panic& a, Panic& b) {
    a.Swap(&b);
  }
  inline void Swap(Panic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Panic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Panic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Panic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Panic& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Panic& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.Panic";
  }
  protected:
  explicit Panic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.Panic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class LogToFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.LogToFile) */ {
 public:
  inline LogToFile() : LogToFile(nullptr) {}
  ~LogToFile() override;
  explicit PROTOBUF_CONSTEXPR LogToFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogToFile(const LogToFile& from);
  LogToFile(LogToFile&& from) noexcept
    : LogToFile() {
    *this = ::std::move(from);
  }

  inline LogToFile& operator=(const LogToFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogToFile& operator=(LogToFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogToFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogToFile* internal_default_instance() {
    return reinterpret_cast<const LogToFile*>(
               &_LogToFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogToFile& a, LogToFile& b) {
    a.Swap(&b);
  }
  inline void Swap(LogToFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogToFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogToFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogToFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogToFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogToFile& from) {
    LogToFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogToFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.LogToFile";
  }
  protected:
  explicit LogToFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.LogToFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class StoragePathRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.StoragePathRequest) */ {
 public:
  inline StoragePathRequest() : StoragePathRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StoragePathRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoragePathRequest(const StoragePathRequest& from);
  StoragePathRequest(StoragePathRequest&& from) noexcept
    : StoragePathRequest() {
    *this = ::std::move(from);
  }

  inline StoragePathRequest& operator=(const StoragePathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoragePathRequest& operator=(StoragePathRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoragePathRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoragePathRequest* internal_default_instance() {
    return reinterpret_cast<const StoragePathRequest*>(
               &_StoragePathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StoragePathRequest& a, StoragePathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StoragePathRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoragePathRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoragePathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoragePathRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StoragePathRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StoragePathRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.StoragePathRequest";
  }
  protected:
  explicit StoragePathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.StoragePathRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class StoragePathResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.StoragePathResponse) */ {
 public:
  inline StoragePathResponse() : StoragePathResponse(nullptr) {}
  ~StoragePathResponse() override;
  explicit PROTOBUF_CONSTEXPR StoragePathResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoragePathResponse(const StoragePathResponse& from);
  StoragePathResponse(StoragePathResponse&& from) noexcept
    : StoragePathResponse() {
    *this = ::std::move(from);
  }

  inline StoragePathResponse& operator=(const StoragePathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoragePathResponse& operator=(StoragePathResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoragePathResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoragePathResponse* internal_default_instance() {
    return reinterpret_cast<const StoragePathResponse*>(
               &_StoragePathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StoragePathResponse& a, StoragePathResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StoragePathResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoragePathResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoragePathResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoragePathResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoragePathResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoragePathResponse& from) {
    StoragePathResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoragePathResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.StoragePathResponse";
  }
  protected:
  explicit StoragePathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoragePathFieldNumber = 1,
  };
  // string storage_path = 1;
  void clear_storage_path();
  const std::string& storage_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage_path();
  PROTOBUF_NODISCARD std::string* release_storage_path();
  void set_allocated_storage_path(std::string* storage_path);
  private:
  const std::string& _internal_storage_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_path(const std::string& value);
  std::string* _internal_mutable_storage_path();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.StoragePathResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// -------------------------------------------------------------------

class DeleteLibqaulLogsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.debug.DeleteLibqaulLogsRequest) */ {
 public:
  inline DeleteLibqaulLogsRequest() : DeleteLibqaulLogsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeleteLibqaulLogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteLibqaulLogsRequest(const DeleteLibqaulLogsRequest& from);
  DeleteLibqaulLogsRequest(DeleteLibqaulLogsRequest&& from) noexcept
    : DeleteLibqaulLogsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLibqaulLogsRequest& operator=(const DeleteLibqaulLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLibqaulLogsRequest& operator=(DeleteLibqaulLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteLibqaulLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteLibqaulLogsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLibqaulLogsRequest*>(
               &_DeleteLibqaulLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteLibqaulLogsRequest& a, DeleteLibqaulLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLibqaulLogsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLibqaulLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteLibqaulLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteLibqaulLogsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteLibqaulLogsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteLibqaulLogsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.debug.DeleteLibqaulLogsRequest";
  }
  protected:
  explicit DeleteLibqaulLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.debug.DeleteLibqaulLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_2fdebug_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Debug

// .qaul.rpc.debug.HeartbeatRequest heartbeat_request = 1;
inline bool Debug::_internal_has_heartbeat_request() const {
  return message_case() == kHeartbeatRequest;
}
inline bool Debug::has_heartbeat_request() const {
  return _internal_has_heartbeat_request();
}
inline void Debug::set_has_heartbeat_request() {
  _impl_._oneof_case_[0] = kHeartbeatRequest;
}
inline void Debug::clear_heartbeat_request() {
  if (_internal_has_heartbeat_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.heartbeat_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::debug::HeartbeatRequest* Debug::release_heartbeat_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.Debug.heartbeat_request)
  if (_internal_has_heartbeat_request()) {
    clear_has_message();
    ::qaul::rpc::debug::HeartbeatRequest* temp = _impl_.message_.heartbeat_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.heartbeat_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::debug::HeartbeatRequest& Debug::_internal_heartbeat_request() const {
  return _internal_has_heartbeat_request()
      ? *_impl_.message_.heartbeat_request_
      : reinterpret_cast< ::qaul::rpc::debug::HeartbeatRequest&>(::qaul::rpc::debug::_HeartbeatRequest_default_instance_);
}
inline const ::qaul::rpc::debug::HeartbeatRequest& Debug::heartbeat_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.Debug.heartbeat_request)
  return _internal_heartbeat_request();
}
inline ::qaul::rpc::debug::HeartbeatRequest* Debug::unsafe_arena_release_heartbeat_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.debug.Debug.heartbeat_request)
  if (_internal_has_heartbeat_request()) {
    clear_has_message();
    ::qaul::rpc::debug::HeartbeatRequest* temp = _impl_.message_.heartbeat_request_;
    _impl_.message_.heartbeat_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Debug::unsafe_arena_set_allocated_heartbeat_request(::qaul::rpc::debug::HeartbeatRequest* heartbeat_request) {
  clear_message();
  if (heartbeat_request) {
    set_has_heartbeat_request();
    _impl_.message_.heartbeat_request_ = heartbeat_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.debug.Debug.heartbeat_request)
}
inline ::qaul::rpc::debug::HeartbeatRequest* Debug::_internal_mutable_heartbeat_request() {
  if (!_internal_has_heartbeat_request()) {
    clear_message();
    set_has_heartbeat_request();
    _impl_.message_.heartbeat_request_ = CreateMaybeMessage< ::qaul::rpc::debug::HeartbeatRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.heartbeat_request_;
}
inline ::qaul::rpc::debug::HeartbeatRequest* Debug::mutable_heartbeat_request() {
  ::qaul::rpc::debug::HeartbeatRequest* _msg = _internal_mutable_heartbeat_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.Debug.heartbeat_request)
  return _msg;
}

// .qaul.rpc.debug.HeartbeatResponse heartbeat_response = 2;
inline bool Debug::_internal_has_heartbeat_response() const {
  return message_case() == kHeartbeatResponse;
}
inline bool Debug::has_heartbeat_response() const {
  return _internal_has_heartbeat_response();
}
inline void Debug::set_has_heartbeat_response() {
  _impl_._oneof_case_[0] = kHeartbeatResponse;
}
inline void Debug::clear_heartbeat_response() {
  if (_internal_has_heartbeat_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.heartbeat_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::debug::HeartbeatResponse* Debug::release_heartbeat_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.Debug.heartbeat_response)
  if (_internal_has_heartbeat_response()) {
    clear_has_message();
    ::qaul::rpc::debug::HeartbeatResponse* temp = _impl_.message_.heartbeat_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.heartbeat_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::debug::HeartbeatResponse& Debug::_internal_heartbeat_response() const {
  return _internal_has_heartbeat_response()
      ? *_impl_.message_.heartbeat_response_
      : reinterpret_cast< ::qaul::rpc::debug::HeartbeatResponse&>(::qaul::rpc::debug::_HeartbeatResponse_default_instance_);
}
inline const ::qaul::rpc::debug::HeartbeatResponse& Debug::heartbeat_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.Debug.heartbeat_response)
  return _internal_heartbeat_response();
}
inline ::qaul::rpc::debug::HeartbeatResponse* Debug::unsafe_arena_release_heartbeat_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.debug.Debug.heartbeat_response)
  if (_internal_has_heartbeat_response()) {
    clear_has_message();
    ::qaul::rpc::debug::HeartbeatResponse* temp = _impl_.message_.heartbeat_response_;
    _impl_.message_.heartbeat_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Debug::unsafe_arena_set_allocated_heartbeat_response(::qaul::rpc::debug::HeartbeatResponse* heartbeat_response) {
  clear_message();
  if (heartbeat_response) {
    set_has_heartbeat_response();
    _impl_.message_.heartbeat_response_ = heartbeat_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.debug.Debug.heartbeat_response)
}
inline ::qaul::rpc::debug::HeartbeatResponse* Debug::_internal_mutable_heartbeat_response() {
  if (!_internal_has_heartbeat_response()) {
    clear_message();
    set_has_heartbeat_response();
    _impl_.message_.heartbeat_response_ = CreateMaybeMessage< ::qaul::rpc::debug::HeartbeatResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.heartbeat_response_;
}
inline ::qaul::rpc::debug::HeartbeatResponse* Debug::mutable_heartbeat_response() {
  ::qaul::rpc::debug::HeartbeatResponse* _msg = _internal_mutable_heartbeat_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.Debug.heartbeat_response)
  return _msg;
}

// .qaul.rpc.debug.Panic panic = 3;
inline bool Debug::_internal_has_panic() const {
  return message_case() == kPanic;
}
inline bool Debug::has_panic() const {
  return _internal_has_panic();
}
inline void Debug::set_has_panic() {
  _impl_._oneof_case_[0] = kPanic;
}
inline void Debug::clear_panic() {
  if (_internal_has_panic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.panic_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::debug::Panic* Debug::release_panic() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.Debug.panic)
  if (_internal_has_panic()) {
    clear_has_message();
    ::qaul::rpc::debug::Panic* temp = _impl_.message_.panic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.panic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::debug::Panic& Debug::_internal_panic() const {
  return _internal_has_panic()
      ? *_impl_.message_.panic_
      : reinterpret_cast< ::qaul::rpc::debug::Panic&>(::qaul::rpc::debug::_Panic_default_instance_);
}
inline const ::qaul::rpc::debug::Panic& Debug::panic() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.Debug.panic)
  return _internal_panic();
}
inline ::qaul::rpc::debug::Panic* Debug::unsafe_arena_release_panic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.debug.Debug.panic)
  if (_internal_has_panic()) {
    clear_has_message();
    ::qaul::rpc::debug::Panic* temp = _impl_.message_.panic_;
    _impl_.message_.panic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Debug::unsafe_arena_set_allocated_panic(::qaul::rpc::debug::Panic* panic) {
  clear_message();
  if (panic) {
    set_has_panic();
    _impl_.message_.panic_ = panic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.debug.Debug.panic)
}
inline ::qaul::rpc::debug::Panic* Debug::_internal_mutable_panic() {
  if (!_internal_has_panic()) {
    clear_message();
    set_has_panic();
    _impl_.message_.panic_ = CreateMaybeMessage< ::qaul::rpc::debug::Panic >(GetArenaForAllocation());
  }
  return _impl_.message_.panic_;
}
inline ::qaul::rpc::debug::Panic* Debug::mutable_panic() {
  ::qaul::rpc::debug::Panic* _msg = _internal_mutable_panic();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.Debug.panic)
  return _msg;
}

// .qaul.rpc.debug.LogToFile log_to_file = 4;
inline bool Debug::_internal_has_log_to_file() const {
  return message_case() == kLogToFile;
}
inline bool Debug::has_log_to_file() const {
  return _internal_has_log_to_file();
}
inline void Debug::set_has_log_to_file() {
  _impl_._oneof_case_[0] = kLogToFile;
}
inline void Debug::clear_log_to_file() {
  if (_internal_has_log_to_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.log_to_file_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::debug::LogToFile* Debug::release_log_to_file() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.Debug.log_to_file)
  if (_internal_has_log_to_file()) {
    clear_has_message();
    ::qaul::rpc::debug::LogToFile* temp = _impl_.message_.log_to_file_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.log_to_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::debug::LogToFile& Debug::_internal_log_to_file() const {
  return _internal_has_log_to_file()
      ? *_impl_.message_.log_to_file_
      : reinterpret_cast< ::qaul::rpc::debug::LogToFile&>(::qaul::rpc::debug::_LogToFile_default_instance_);
}
inline const ::qaul::rpc::debug::LogToFile& Debug::log_to_file() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.Debug.log_to_file)
  return _internal_log_to_file();
}
inline ::qaul::rpc::debug::LogToFile* Debug::unsafe_arena_release_log_to_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.debug.Debug.log_to_file)
  if (_internal_has_log_to_file()) {
    clear_has_message();
    ::qaul::rpc::debug::LogToFile* temp = _impl_.message_.log_to_file_;
    _impl_.message_.log_to_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Debug::unsafe_arena_set_allocated_log_to_file(::qaul::rpc::debug::LogToFile* log_to_file) {
  clear_message();
  if (log_to_file) {
    set_has_log_to_file();
    _impl_.message_.log_to_file_ = log_to_file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.debug.Debug.log_to_file)
}
inline ::qaul::rpc::debug::LogToFile* Debug::_internal_mutable_log_to_file() {
  if (!_internal_has_log_to_file()) {
    clear_message();
    set_has_log_to_file();
    _impl_.message_.log_to_file_ = CreateMaybeMessage< ::qaul::rpc::debug::LogToFile >(GetArenaForAllocation());
  }
  return _impl_.message_.log_to_file_;
}
inline ::qaul::rpc::debug::LogToFile* Debug::mutable_log_to_file() {
  ::qaul::rpc::debug::LogToFile* _msg = _internal_mutable_log_to_file();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.Debug.log_to_file)
  return _msg;
}

// .qaul.rpc.debug.StoragePathRequest storage_path_request = 5;
inline bool Debug::_internal_has_storage_path_request() const {
  return message_case() == kStoragePathRequest;
}
inline bool Debug::has_storage_path_request() const {
  return _internal_has_storage_path_request();
}
inline void Debug::set_has_storage_path_request() {
  _impl_._oneof_case_[0] = kStoragePathRequest;
}
inline void Debug::clear_storage_path_request() {
  if (_internal_has_storage_path_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.storage_path_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::debug::StoragePathRequest* Debug::release_storage_path_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.Debug.storage_path_request)
  if (_internal_has_storage_path_request()) {
    clear_has_message();
    ::qaul::rpc::debug::StoragePathRequest* temp = _impl_.message_.storage_path_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.storage_path_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::debug::StoragePathRequest& Debug::_internal_storage_path_request() const {
  return _internal_has_storage_path_request()
      ? *_impl_.message_.storage_path_request_
      : reinterpret_cast< ::qaul::rpc::debug::StoragePathRequest&>(::qaul::rpc::debug::_StoragePathRequest_default_instance_);
}
inline const ::qaul::rpc::debug::StoragePathRequest& Debug::storage_path_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.Debug.storage_path_request)
  return _internal_storage_path_request();
}
inline ::qaul::rpc::debug::StoragePathRequest* Debug::unsafe_arena_release_storage_path_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.debug.Debug.storage_path_request)
  if (_internal_has_storage_path_request()) {
    clear_has_message();
    ::qaul::rpc::debug::StoragePathRequest* temp = _impl_.message_.storage_path_request_;
    _impl_.message_.storage_path_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Debug::unsafe_arena_set_allocated_storage_path_request(::qaul::rpc::debug::StoragePathRequest* storage_path_request) {
  clear_message();
  if (storage_path_request) {
    set_has_storage_path_request();
    _impl_.message_.storage_path_request_ = storage_path_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.debug.Debug.storage_path_request)
}
inline ::qaul::rpc::debug::StoragePathRequest* Debug::_internal_mutable_storage_path_request() {
  if (!_internal_has_storage_path_request()) {
    clear_message();
    set_has_storage_path_request();
    _impl_.message_.storage_path_request_ = CreateMaybeMessage< ::qaul::rpc::debug::StoragePathRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.storage_path_request_;
}
inline ::qaul::rpc::debug::StoragePathRequest* Debug::mutable_storage_path_request() {
  ::qaul::rpc::debug::StoragePathRequest* _msg = _internal_mutable_storage_path_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.Debug.storage_path_request)
  return _msg;
}

// .qaul.rpc.debug.StoragePathResponse storage_path_response = 6;
inline bool Debug::_internal_has_storage_path_response() const {
  return message_case() == kStoragePathResponse;
}
inline bool Debug::has_storage_path_response() const {
  return _internal_has_storage_path_response();
}
inline void Debug::set_has_storage_path_response() {
  _impl_._oneof_case_[0] = kStoragePathResponse;
}
inline void Debug::clear_storage_path_response() {
  if (_internal_has_storage_path_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.storage_path_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::debug::StoragePathResponse* Debug::release_storage_path_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.Debug.storage_path_response)
  if (_internal_has_storage_path_response()) {
    clear_has_message();
    ::qaul::rpc::debug::StoragePathResponse* temp = _impl_.message_.storage_path_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.storage_path_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::debug::StoragePathResponse& Debug::_internal_storage_path_response() const {
  return _internal_has_storage_path_response()
      ? *_impl_.message_.storage_path_response_
      : reinterpret_cast< ::qaul::rpc::debug::StoragePathResponse&>(::qaul::rpc::debug::_StoragePathResponse_default_instance_);
}
inline const ::qaul::rpc::debug::StoragePathResponse& Debug::storage_path_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.Debug.storage_path_response)
  return _internal_storage_path_response();
}
inline ::qaul::rpc::debug::StoragePathResponse* Debug::unsafe_arena_release_storage_path_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.debug.Debug.storage_path_response)
  if (_internal_has_storage_path_response()) {
    clear_has_message();
    ::qaul::rpc::debug::StoragePathResponse* temp = _impl_.message_.storage_path_response_;
    _impl_.message_.storage_path_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Debug::unsafe_arena_set_allocated_storage_path_response(::qaul::rpc::debug::StoragePathResponse* storage_path_response) {
  clear_message();
  if (storage_path_response) {
    set_has_storage_path_response();
    _impl_.message_.storage_path_response_ = storage_path_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.debug.Debug.storage_path_response)
}
inline ::qaul::rpc::debug::StoragePathResponse* Debug::_internal_mutable_storage_path_response() {
  if (!_internal_has_storage_path_response()) {
    clear_message();
    set_has_storage_path_response();
    _impl_.message_.storage_path_response_ = CreateMaybeMessage< ::qaul::rpc::debug::StoragePathResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.storage_path_response_;
}
inline ::qaul::rpc::debug::StoragePathResponse* Debug::mutable_storage_path_response() {
  ::qaul::rpc::debug::StoragePathResponse* _msg = _internal_mutable_storage_path_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.Debug.storage_path_response)
  return _msg;
}

// .qaul.rpc.debug.DeleteLibqaulLogsRequest delete_libqaul_logs_request = 7;
inline bool Debug::_internal_has_delete_libqaul_logs_request() const {
  return message_case() == kDeleteLibqaulLogsRequest;
}
inline bool Debug::has_delete_libqaul_logs_request() const {
  return _internal_has_delete_libqaul_logs_request();
}
inline void Debug::set_has_delete_libqaul_logs_request() {
  _impl_._oneof_case_[0] = kDeleteLibqaulLogsRequest;
}
inline void Debug::clear_delete_libqaul_logs_request() {
  if (_internal_has_delete_libqaul_logs_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.delete_libqaul_logs_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::debug::DeleteLibqaulLogsRequest* Debug::release_delete_libqaul_logs_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.Debug.delete_libqaul_logs_request)
  if (_internal_has_delete_libqaul_logs_request()) {
    clear_has_message();
    ::qaul::rpc::debug::DeleteLibqaulLogsRequest* temp = _impl_.message_.delete_libqaul_logs_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.delete_libqaul_logs_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::debug::DeleteLibqaulLogsRequest& Debug::_internal_delete_libqaul_logs_request() const {
  return _internal_has_delete_libqaul_logs_request()
      ? *_impl_.message_.delete_libqaul_logs_request_
      : reinterpret_cast< ::qaul::rpc::debug::DeleteLibqaulLogsRequest&>(::qaul::rpc::debug::_DeleteLibqaulLogsRequest_default_instance_);
}
inline const ::qaul::rpc::debug::DeleteLibqaulLogsRequest& Debug::delete_libqaul_logs_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.Debug.delete_libqaul_logs_request)
  return _internal_delete_libqaul_logs_request();
}
inline ::qaul::rpc::debug::DeleteLibqaulLogsRequest* Debug::unsafe_arena_release_delete_libqaul_logs_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.debug.Debug.delete_libqaul_logs_request)
  if (_internal_has_delete_libqaul_logs_request()) {
    clear_has_message();
    ::qaul::rpc::debug::DeleteLibqaulLogsRequest* temp = _impl_.message_.delete_libqaul_logs_request_;
    _impl_.message_.delete_libqaul_logs_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Debug::unsafe_arena_set_allocated_delete_libqaul_logs_request(::qaul::rpc::debug::DeleteLibqaulLogsRequest* delete_libqaul_logs_request) {
  clear_message();
  if (delete_libqaul_logs_request) {
    set_has_delete_libqaul_logs_request();
    _impl_.message_.delete_libqaul_logs_request_ = delete_libqaul_logs_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.debug.Debug.delete_libqaul_logs_request)
}
inline ::qaul::rpc::debug::DeleteLibqaulLogsRequest* Debug::_internal_mutable_delete_libqaul_logs_request() {
  if (!_internal_has_delete_libqaul_logs_request()) {
    clear_message();
    set_has_delete_libqaul_logs_request();
    _impl_.message_.delete_libqaul_logs_request_ = CreateMaybeMessage< ::qaul::rpc::debug::DeleteLibqaulLogsRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.delete_libqaul_logs_request_;
}
inline ::qaul::rpc::debug::DeleteLibqaulLogsRequest* Debug::mutable_delete_libqaul_logs_request() {
  ::qaul::rpc::debug::DeleteLibqaulLogsRequest* _msg = _internal_mutable_delete_libqaul_logs_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.Debug.delete_libqaul_logs_request)
  return _msg;
}

inline bool Debug::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Debug::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Debug::MessageCase Debug::message_case() const {
  return Debug::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HeartbeatRequest

// -------------------------------------------------------------------

// HeartbeatResponse

// -------------------------------------------------------------------

// Panic

// -------------------------------------------------------------------

// LogToFile

// bool enable = 1;
inline void LogToFile::clear_enable() {
  _impl_.enable_ = false;
}
inline bool LogToFile::_internal_enable() const {
  return _impl_.enable_;
}
inline bool LogToFile::enable() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.LogToFile.enable)
  return _internal_enable();
}
inline void LogToFile::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void LogToFile::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.debug.LogToFile.enable)
}

// -------------------------------------------------------------------

// StoragePathRequest

// -------------------------------------------------------------------

// StoragePathResponse

// string storage_path = 1;
inline void StoragePathResponse::clear_storage_path() {
  _impl_.storage_path_.ClearToEmpty();
}
inline const std::string& StoragePathResponse::storage_path() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.debug.StoragePathResponse.storage_path)
  return _internal_storage_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoragePathResponse::set_storage_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.storage_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.debug.StoragePathResponse.storage_path)
}
inline std::string* StoragePathResponse::mutable_storage_path() {
  std::string* _s = _internal_mutable_storage_path();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.debug.StoragePathResponse.storage_path)
  return _s;
}
inline const std::string& StoragePathResponse::_internal_storage_path() const {
  return _impl_.storage_path_.Get();
}
inline void StoragePathResponse::_internal_set_storage_path(const std::string& value) {
  
  _impl_.storage_path_.Set(value, GetArenaForAllocation());
}
inline std::string* StoragePathResponse::_internal_mutable_storage_path() {
  
  return _impl_.storage_path_.Mutable(GetArenaForAllocation());
}
inline std::string* StoragePathResponse::release_storage_path() {
  // @@protoc_insertion_point(field_release:qaul.rpc.debug.StoragePathResponse.storage_path)
  return _impl_.storage_path_.Release();
}
inline void StoragePathResponse::set_allocated_storage_path(std::string* storage_path) {
  if (storage_path != nullptr) {
    
  } else {
    
  }
  _impl_.storage_path_.SetAllocated(storage_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storage_path_.IsDefault()) {
    _impl_.storage_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.debug.StoragePathResponse.storage_path)
}

// -------------------------------------------------------------------

// DeleteLibqaulLogsRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace debug
}  // namespace rpc
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2fdebug_2eproto
