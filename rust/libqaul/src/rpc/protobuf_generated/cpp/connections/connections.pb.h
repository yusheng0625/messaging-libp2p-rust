// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connections/connections.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connections_2fconnections_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connections_2fconnections_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connections_2fconnections_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connections_2fconnections_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connections_2fconnections_2eproto;
namespace qaul {
namespace rpc {
namespace connections {
class Connections;
struct ConnectionsDefaultTypeInternal;
extern ConnectionsDefaultTypeInternal _Connections_default_instance_;
class InternetNodesEntry;
struct InternetNodesEntryDefaultTypeInternal;
extern InternetNodesEntryDefaultTypeInternal _InternetNodesEntry_default_instance_;
class InternetNodesList;
struct InternetNodesListDefaultTypeInternal;
extern InternetNodesListDefaultTypeInternal _InternetNodesList_default_instance_;
class InternetNodesRequest;
struct InternetNodesRequestDefaultTypeInternal;
extern InternetNodesRequestDefaultTypeInternal _InternetNodesRequest_default_instance_;
}  // namespace connections
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::connections::Connections* Arena::CreateMaybeMessage<::qaul::rpc::connections::Connections>(Arena*);
template<> ::qaul::rpc::connections::InternetNodesEntry* Arena::CreateMaybeMessage<::qaul::rpc::connections::InternetNodesEntry>(Arena*);
template<> ::qaul::rpc::connections::InternetNodesList* Arena::CreateMaybeMessage<::qaul::rpc::connections::InternetNodesList>(Arena*);
template<> ::qaul::rpc::connections::InternetNodesRequest* Arena::CreateMaybeMessage<::qaul::rpc::connections::InternetNodesRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace connections {

enum Info : int {
  REQUEST = 0,
  ADD_SUCCESS = 1,
  ADD_ERROR_INVALID = 2,
  REMOVE_SUCCESS = 5,
  STATE_SUCCESS = 6,
  REMOVE_ERROR_NOT_FOUND = 7,
  Info_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Info_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Info_IsValid(int value);
constexpr Info Info_MIN = REQUEST;
constexpr Info Info_MAX = REMOVE_ERROR_NOT_FOUND;
constexpr int Info_ARRAYSIZE = Info_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Info_descriptor();
template<typename T>
inline const std::string& Info_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Info>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Info_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Info_descriptor(), enum_t_value);
}
inline bool Info_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Info* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Info>(
    Info_descriptor(), name, value);
}
// ===================================================================

class Connections final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.connections.Connections) */ {
 public:
  inline Connections() : Connections(nullptr) {}
  ~Connections() override;
  explicit PROTOBUF_CONSTEXPR Connections(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Connections(const Connections& from);
  Connections(Connections&& from) noexcept
    : Connections() {
    *this = ::std::move(from);
  }

  inline Connections& operator=(const Connections& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connections& operator=(Connections&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connections& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kInternetNodesRequest = 1,
    kInternetNodesList = 2,
    kInternetNodesAdd = 3,
    kInternetNodesRemove = 4,
    kInternetNodesState = 5,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Connections* internal_default_instance() {
    return reinterpret_cast<const Connections*>(
               &_Connections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Connections& a, Connections& b) {
    a.Swap(&b);
  }
  inline void Swap(Connections* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connections* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connections* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Connections>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Connections& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Connections& from) {
    Connections::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connections* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.connections.Connections";
  }
  protected:
  explicit Connections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternetNodesRequestFieldNumber = 1,
    kInternetNodesListFieldNumber = 2,
    kInternetNodesAddFieldNumber = 3,
    kInternetNodesRemoveFieldNumber = 4,
    kInternetNodesStateFieldNumber = 5,
  };
  // .qaul.rpc.connections.InternetNodesRequest internet_nodes_request = 1;
  bool has_internet_nodes_request() const;
  private:
  bool _internal_has_internet_nodes_request() const;
  public:
  void clear_internet_nodes_request();
  const ::qaul::rpc::connections::InternetNodesRequest& internet_nodes_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::connections::InternetNodesRequest* release_internet_nodes_request();
  ::qaul::rpc::connections::InternetNodesRequest* mutable_internet_nodes_request();
  void set_allocated_internet_nodes_request(::qaul::rpc::connections::InternetNodesRequest* internet_nodes_request);
  private:
  const ::qaul::rpc::connections::InternetNodesRequest& _internal_internet_nodes_request() const;
  ::qaul::rpc::connections::InternetNodesRequest* _internal_mutable_internet_nodes_request();
  public:
  void unsafe_arena_set_allocated_internet_nodes_request(
      ::qaul::rpc::connections::InternetNodesRequest* internet_nodes_request);
  ::qaul::rpc::connections::InternetNodesRequest* unsafe_arena_release_internet_nodes_request();

  // .qaul.rpc.connections.InternetNodesList internet_nodes_list = 2;
  bool has_internet_nodes_list() const;
  private:
  bool _internal_has_internet_nodes_list() const;
  public:
  void clear_internet_nodes_list();
  const ::qaul::rpc::connections::InternetNodesList& internet_nodes_list() const;
  PROTOBUF_NODISCARD ::qaul::rpc::connections::InternetNodesList* release_internet_nodes_list();
  ::qaul::rpc::connections::InternetNodesList* mutable_internet_nodes_list();
  void set_allocated_internet_nodes_list(::qaul::rpc::connections::InternetNodesList* internet_nodes_list);
  private:
  const ::qaul::rpc::connections::InternetNodesList& _internal_internet_nodes_list() const;
  ::qaul::rpc::connections::InternetNodesList* _internal_mutable_internet_nodes_list();
  public:
  void unsafe_arena_set_allocated_internet_nodes_list(
      ::qaul::rpc::connections::InternetNodesList* internet_nodes_list);
  ::qaul::rpc::connections::InternetNodesList* unsafe_arena_release_internet_nodes_list();

  // .qaul.rpc.connections.InternetNodesEntry internet_nodes_add = 3;
  bool has_internet_nodes_add() const;
  private:
  bool _internal_has_internet_nodes_add() const;
  public:
  void clear_internet_nodes_add();
  const ::qaul::rpc::connections::InternetNodesEntry& internet_nodes_add() const;
  PROTOBUF_NODISCARD ::qaul::rpc::connections::InternetNodesEntry* release_internet_nodes_add();
  ::qaul::rpc::connections::InternetNodesEntry* mutable_internet_nodes_add();
  void set_allocated_internet_nodes_add(::qaul::rpc::connections::InternetNodesEntry* internet_nodes_add);
  private:
  const ::qaul::rpc::connections::InternetNodesEntry& _internal_internet_nodes_add() const;
  ::qaul::rpc::connections::InternetNodesEntry* _internal_mutable_internet_nodes_add();
  public:
  void unsafe_arena_set_allocated_internet_nodes_add(
      ::qaul::rpc::connections::InternetNodesEntry* internet_nodes_add);
  ::qaul::rpc::connections::InternetNodesEntry* unsafe_arena_release_internet_nodes_add();

  // .qaul.rpc.connections.InternetNodesEntry internet_nodes_remove = 4;
  bool has_internet_nodes_remove() const;
  private:
  bool _internal_has_internet_nodes_remove() const;
  public:
  void clear_internet_nodes_remove();
  const ::qaul::rpc::connections::InternetNodesEntry& internet_nodes_remove() const;
  PROTOBUF_NODISCARD ::qaul::rpc::connections::InternetNodesEntry* release_internet_nodes_remove();
  ::qaul::rpc::connections::InternetNodesEntry* mutable_internet_nodes_remove();
  void set_allocated_internet_nodes_remove(::qaul::rpc::connections::InternetNodesEntry* internet_nodes_remove);
  private:
  const ::qaul::rpc::connections::InternetNodesEntry& _internal_internet_nodes_remove() const;
  ::qaul::rpc::connections::InternetNodesEntry* _internal_mutable_internet_nodes_remove();
  public:
  void unsafe_arena_set_allocated_internet_nodes_remove(
      ::qaul::rpc::connections::InternetNodesEntry* internet_nodes_remove);
  ::qaul::rpc::connections::InternetNodesEntry* unsafe_arena_release_internet_nodes_remove();

  // .qaul.rpc.connections.InternetNodesEntry internet_nodes_state = 5;
  bool has_internet_nodes_state() const;
  private:
  bool _internal_has_internet_nodes_state() const;
  public:
  void clear_internet_nodes_state();
  const ::qaul::rpc::connections::InternetNodesEntry& internet_nodes_state() const;
  PROTOBUF_NODISCARD ::qaul::rpc::connections::InternetNodesEntry* release_internet_nodes_state();
  ::qaul::rpc::connections::InternetNodesEntry* mutable_internet_nodes_state();
  void set_allocated_internet_nodes_state(::qaul::rpc::connections::InternetNodesEntry* internet_nodes_state);
  private:
  const ::qaul::rpc::connections::InternetNodesEntry& _internal_internet_nodes_state() const;
  ::qaul::rpc::connections::InternetNodesEntry* _internal_mutable_internet_nodes_state();
  public:
  void unsafe_arena_set_allocated_internet_nodes_state(
      ::qaul::rpc::connections::InternetNodesEntry* internet_nodes_state);
  ::qaul::rpc::connections::InternetNodesEntry* unsafe_arena_release_internet_nodes_state();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.connections.Connections)
 private:
  class _Internal;
  void set_has_internet_nodes_request();
  void set_has_internet_nodes_list();
  void set_has_internet_nodes_add();
  void set_has_internet_nodes_remove();
  void set_has_internet_nodes_state();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::connections::InternetNodesRequest* internet_nodes_request_;
      ::qaul::rpc::connections::InternetNodesList* internet_nodes_list_;
      ::qaul::rpc::connections::InternetNodesEntry* internet_nodes_add_;
      ::qaul::rpc::connections::InternetNodesEntry* internet_nodes_remove_;
      ::qaul::rpc::connections::InternetNodesEntry* internet_nodes_state_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fconnections_2eproto;
};
// -------------------------------------------------------------------

class InternetNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.connections.InternetNodesRequest) */ {
 public:
  inline InternetNodesRequest() : InternetNodesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InternetNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternetNodesRequest(const InternetNodesRequest& from);
  InternetNodesRequest(InternetNodesRequest&& from) noexcept
    : InternetNodesRequest() {
    *this = ::std::move(from);
  }

  inline InternetNodesRequest& operator=(const InternetNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternetNodesRequest& operator=(InternetNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternetNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternetNodesRequest* internal_default_instance() {
    return reinterpret_cast<const InternetNodesRequest*>(
               &_InternetNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternetNodesRequest& a, InternetNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternetNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternetNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternetNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternetNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InternetNodesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InternetNodesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.connections.InternetNodesRequest";
  }
  protected:
  explicit InternetNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.connections.InternetNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fconnections_2eproto;
};
// -------------------------------------------------------------------

class InternetNodesList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.connections.InternetNodesList) */ {
 public:
  inline InternetNodesList() : InternetNodesList(nullptr) {}
  ~InternetNodesList() override;
  explicit PROTOBUF_CONSTEXPR InternetNodesList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternetNodesList(const InternetNodesList& from);
  InternetNodesList(InternetNodesList&& from) noexcept
    : InternetNodesList() {
    *this = ::std::move(from);
  }

  inline InternetNodesList& operator=(const InternetNodesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternetNodesList& operator=(InternetNodesList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternetNodesList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternetNodesList* internal_default_instance() {
    return reinterpret_cast<const InternetNodesList*>(
               &_InternetNodesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InternetNodesList& a, InternetNodesList& b) {
    a.Swap(&b);
  }
  inline void Swap(InternetNodesList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternetNodesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternetNodesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternetNodesList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternetNodesList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternetNodesList& from) {
    InternetNodesList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternetNodesList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.connections.InternetNodesList";
  }
  protected:
  explicit InternetNodesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // repeated .qaul.rpc.connections.InternetNodesEntry nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::qaul::rpc::connections::InternetNodesEntry* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::connections::InternetNodesEntry >*
      mutable_nodes();
  private:
  const ::qaul::rpc::connections::InternetNodesEntry& _internal_nodes(int index) const;
  ::qaul::rpc::connections::InternetNodesEntry* _internal_add_nodes();
  public:
  const ::qaul::rpc::connections::InternetNodesEntry& nodes(int index) const;
  ::qaul::rpc::connections::InternetNodesEntry* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::connections::InternetNodesEntry >&
      nodes() const;

  // .qaul.rpc.connections.Info info = 1;
  void clear_info();
  ::qaul::rpc::connections::Info info() const;
  void set_info(::qaul::rpc::connections::Info value);
  private:
  ::qaul::rpc::connections::Info _internal_info() const;
  void _internal_set_info(::qaul::rpc::connections::Info value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.connections.InternetNodesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::connections::InternetNodesEntry > nodes_;
    int info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fconnections_2eproto;
};
// -------------------------------------------------------------------

class InternetNodesEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.connections.InternetNodesEntry) */ {
 public:
  inline InternetNodesEntry() : InternetNodesEntry(nullptr) {}
  ~InternetNodesEntry() override;
  explicit PROTOBUF_CONSTEXPR InternetNodesEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternetNodesEntry(const InternetNodesEntry& from);
  InternetNodesEntry(InternetNodesEntry&& from) noexcept
    : InternetNodesEntry() {
    *this = ::std::move(from);
  }

  inline InternetNodesEntry& operator=(const InternetNodesEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternetNodesEntry& operator=(InternetNodesEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternetNodesEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternetNodesEntry* internal_default_instance() {
    return reinterpret_cast<const InternetNodesEntry*>(
               &_InternetNodesEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InternetNodesEntry& a, InternetNodesEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InternetNodesEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternetNodesEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternetNodesEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternetNodesEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternetNodesEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternetNodesEntry& from) {
    InternetNodesEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternetNodesEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.connections.InternetNodesEntry";
  }
  protected:
  explicit InternetNodesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool enabled = 2;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.connections.InternetNodesEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fconnections_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Connections

// .qaul.rpc.connections.InternetNodesRequest internet_nodes_request = 1;
inline bool Connections::_internal_has_internet_nodes_request() const {
  return message_case() == kInternetNodesRequest;
}
inline bool Connections::has_internet_nodes_request() const {
  return _internal_has_internet_nodes_request();
}
inline void Connections::set_has_internet_nodes_request() {
  _impl_._oneof_case_[0] = kInternetNodesRequest;
}
inline void Connections::clear_internet_nodes_request() {
  if (_internal_has_internet_nodes_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.internet_nodes_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::connections::InternetNodesRequest* Connections::release_internet_nodes_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.connections.Connections.internet_nodes_request)
  if (_internal_has_internet_nodes_request()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesRequest* temp = _impl_.message_.internet_nodes_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.internet_nodes_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::connections::InternetNodesRequest& Connections::_internal_internet_nodes_request() const {
  return _internal_has_internet_nodes_request()
      ? *_impl_.message_.internet_nodes_request_
      : reinterpret_cast< ::qaul::rpc::connections::InternetNodesRequest&>(::qaul::rpc::connections::_InternetNodesRequest_default_instance_);
}
inline const ::qaul::rpc::connections::InternetNodesRequest& Connections::internet_nodes_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.Connections.internet_nodes_request)
  return _internal_internet_nodes_request();
}
inline ::qaul::rpc::connections::InternetNodesRequest* Connections::unsafe_arena_release_internet_nodes_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.connections.Connections.internet_nodes_request)
  if (_internal_has_internet_nodes_request()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesRequest* temp = _impl_.message_.internet_nodes_request_;
    _impl_.message_.internet_nodes_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connections::unsafe_arena_set_allocated_internet_nodes_request(::qaul::rpc::connections::InternetNodesRequest* internet_nodes_request) {
  clear_message();
  if (internet_nodes_request) {
    set_has_internet_nodes_request();
    _impl_.message_.internet_nodes_request_ = internet_nodes_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.connections.Connections.internet_nodes_request)
}
inline ::qaul::rpc::connections::InternetNodesRequest* Connections::_internal_mutable_internet_nodes_request() {
  if (!_internal_has_internet_nodes_request()) {
    clear_message();
    set_has_internet_nodes_request();
    _impl_.message_.internet_nodes_request_ = CreateMaybeMessage< ::qaul::rpc::connections::InternetNodesRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.internet_nodes_request_;
}
inline ::qaul::rpc::connections::InternetNodesRequest* Connections::mutable_internet_nodes_request() {
  ::qaul::rpc::connections::InternetNodesRequest* _msg = _internal_mutable_internet_nodes_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.connections.Connections.internet_nodes_request)
  return _msg;
}

// .qaul.rpc.connections.InternetNodesList internet_nodes_list = 2;
inline bool Connections::_internal_has_internet_nodes_list() const {
  return message_case() == kInternetNodesList;
}
inline bool Connections::has_internet_nodes_list() const {
  return _internal_has_internet_nodes_list();
}
inline void Connections::set_has_internet_nodes_list() {
  _impl_._oneof_case_[0] = kInternetNodesList;
}
inline void Connections::clear_internet_nodes_list() {
  if (_internal_has_internet_nodes_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.internet_nodes_list_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::connections::InternetNodesList* Connections::release_internet_nodes_list() {
  // @@protoc_insertion_point(field_release:qaul.rpc.connections.Connections.internet_nodes_list)
  if (_internal_has_internet_nodes_list()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesList* temp = _impl_.message_.internet_nodes_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.internet_nodes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::connections::InternetNodesList& Connections::_internal_internet_nodes_list() const {
  return _internal_has_internet_nodes_list()
      ? *_impl_.message_.internet_nodes_list_
      : reinterpret_cast< ::qaul::rpc::connections::InternetNodesList&>(::qaul::rpc::connections::_InternetNodesList_default_instance_);
}
inline const ::qaul::rpc::connections::InternetNodesList& Connections::internet_nodes_list() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.Connections.internet_nodes_list)
  return _internal_internet_nodes_list();
}
inline ::qaul::rpc::connections::InternetNodesList* Connections::unsafe_arena_release_internet_nodes_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.connections.Connections.internet_nodes_list)
  if (_internal_has_internet_nodes_list()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesList* temp = _impl_.message_.internet_nodes_list_;
    _impl_.message_.internet_nodes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connections::unsafe_arena_set_allocated_internet_nodes_list(::qaul::rpc::connections::InternetNodesList* internet_nodes_list) {
  clear_message();
  if (internet_nodes_list) {
    set_has_internet_nodes_list();
    _impl_.message_.internet_nodes_list_ = internet_nodes_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.connections.Connections.internet_nodes_list)
}
inline ::qaul::rpc::connections::InternetNodesList* Connections::_internal_mutable_internet_nodes_list() {
  if (!_internal_has_internet_nodes_list()) {
    clear_message();
    set_has_internet_nodes_list();
    _impl_.message_.internet_nodes_list_ = CreateMaybeMessage< ::qaul::rpc::connections::InternetNodesList >(GetArenaForAllocation());
  }
  return _impl_.message_.internet_nodes_list_;
}
inline ::qaul::rpc::connections::InternetNodesList* Connections::mutable_internet_nodes_list() {
  ::qaul::rpc::connections::InternetNodesList* _msg = _internal_mutable_internet_nodes_list();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.connections.Connections.internet_nodes_list)
  return _msg;
}

// .qaul.rpc.connections.InternetNodesEntry internet_nodes_add = 3;
inline bool Connections::_internal_has_internet_nodes_add() const {
  return message_case() == kInternetNodesAdd;
}
inline bool Connections::has_internet_nodes_add() const {
  return _internal_has_internet_nodes_add();
}
inline void Connections::set_has_internet_nodes_add() {
  _impl_._oneof_case_[0] = kInternetNodesAdd;
}
inline void Connections::clear_internet_nodes_add() {
  if (_internal_has_internet_nodes_add()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.internet_nodes_add_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::release_internet_nodes_add() {
  // @@protoc_insertion_point(field_release:qaul.rpc.connections.Connections.internet_nodes_add)
  if (_internal_has_internet_nodes_add()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesEntry* temp = _impl_.message_.internet_nodes_add_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.internet_nodes_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::connections::InternetNodesEntry& Connections::_internal_internet_nodes_add() const {
  return _internal_has_internet_nodes_add()
      ? *_impl_.message_.internet_nodes_add_
      : reinterpret_cast< ::qaul::rpc::connections::InternetNodesEntry&>(::qaul::rpc::connections::_InternetNodesEntry_default_instance_);
}
inline const ::qaul::rpc::connections::InternetNodesEntry& Connections::internet_nodes_add() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.Connections.internet_nodes_add)
  return _internal_internet_nodes_add();
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::unsafe_arena_release_internet_nodes_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.connections.Connections.internet_nodes_add)
  if (_internal_has_internet_nodes_add()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesEntry* temp = _impl_.message_.internet_nodes_add_;
    _impl_.message_.internet_nodes_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connections::unsafe_arena_set_allocated_internet_nodes_add(::qaul::rpc::connections::InternetNodesEntry* internet_nodes_add) {
  clear_message();
  if (internet_nodes_add) {
    set_has_internet_nodes_add();
    _impl_.message_.internet_nodes_add_ = internet_nodes_add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.connections.Connections.internet_nodes_add)
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::_internal_mutable_internet_nodes_add() {
  if (!_internal_has_internet_nodes_add()) {
    clear_message();
    set_has_internet_nodes_add();
    _impl_.message_.internet_nodes_add_ = CreateMaybeMessage< ::qaul::rpc::connections::InternetNodesEntry >(GetArenaForAllocation());
  }
  return _impl_.message_.internet_nodes_add_;
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::mutable_internet_nodes_add() {
  ::qaul::rpc::connections::InternetNodesEntry* _msg = _internal_mutable_internet_nodes_add();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.connections.Connections.internet_nodes_add)
  return _msg;
}

// .qaul.rpc.connections.InternetNodesEntry internet_nodes_remove = 4;
inline bool Connections::_internal_has_internet_nodes_remove() const {
  return message_case() == kInternetNodesRemove;
}
inline bool Connections::has_internet_nodes_remove() const {
  return _internal_has_internet_nodes_remove();
}
inline void Connections::set_has_internet_nodes_remove() {
  _impl_._oneof_case_[0] = kInternetNodesRemove;
}
inline void Connections::clear_internet_nodes_remove() {
  if (_internal_has_internet_nodes_remove()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.internet_nodes_remove_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::release_internet_nodes_remove() {
  // @@protoc_insertion_point(field_release:qaul.rpc.connections.Connections.internet_nodes_remove)
  if (_internal_has_internet_nodes_remove()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesEntry* temp = _impl_.message_.internet_nodes_remove_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.internet_nodes_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::connections::InternetNodesEntry& Connections::_internal_internet_nodes_remove() const {
  return _internal_has_internet_nodes_remove()
      ? *_impl_.message_.internet_nodes_remove_
      : reinterpret_cast< ::qaul::rpc::connections::InternetNodesEntry&>(::qaul::rpc::connections::_InternetNodesEntry_default_instance_);
}
inline const ::qaul::rpc::connections::InternetNodesEntry& Connections::internet_nodes_remove() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.Connections.internet_nodes_remove)
  return _internal_internet_nodes_remove();
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::unsafe_arena_release_internet_nodes_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.connections.Connections.internet_nodes_remove)
  if (_internal_has_internet_nodes_remove()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesEntry* temp = _impl_.message_.internet_nodes_remove_;
    _impl_.message_.internet_nodes_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connections::unsafe_arena_set_allocated_internet_nodes_remove(::qaul::rpc::connections::InternetNodesEntry* internet_nodes_remove) {
  clear_message();
  if (internet_nodes_remove) {
    set_has_internet_nodes_remove();
    _impl_.message_.internet_nodes_remove_ = internet_nodes_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.connections.Connections.internet_nodes_remove)
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::_internal_mutable_internet_nodes_remove() {
  if (!_internal_has_internet_nodes_remove()) {
    clear_message();
    set_has_internet_nodes_remove();
    _impl_.message_.internet_nodes_remove_ = CreateMaybeMessage< ::qaul::rpc::connections::InternetNodesEntry >(GetArenaForAllocation());
  }
  return _impl_.message_.internet_nodes_remove_;
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::mutable_internet_nodes_remove() {
  ::qaul::rpc::connections::InternetNodesEntry* _msg = _internal_mutable_internet_nodes_remove();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.connections.Connections.internet_nodes_remove)
  return _msg;
}

// .qaul.rpc.connections.InternetNodesEntry internet_nodes_state = 5;
inline bool Connections::_internal_has_internet_nodes_state() const {
  return message_case() == kInternetNodesState;
}
inline bool Connections::has_internet_nodes_state() const {
  return _internal_has_internet_nodes_state();
}
inline void Connections::set_has_internet_nodes_state() {
  _impl_._oneof_case_[0] = kInternetNodesState;
}
inline void Connections::clear_internet_nodes_state() {
  if (_internal_has_internet_nodes_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.internet_nodes_state_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::release_internet_nodes_state() {
  // @@protoc_insertion_point(field_release:qaul.rpc.connections.Connections.internet_nodes_state)
  if (_internal_has_internet_nodes_state()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesEntry* temp = _impl_.message_.internet_nodes_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.internet_nodes_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::connections::InternetNodesEntry& Connections::_internal_internet_nodes_state() const {
  return _internal_has_internet_nodes_state()
      ? *_impl_.message_.internet_nodes_state_
      : reinterpret_cast< ::qaul::rpc::connections::InternetNodesEntry&>(::qaul::rpc::connections::_InternetNodesEntry_default_instance_);
}
inline const ::qaul::rpc::connections::InternetNodesEntry& Connections::internet_nodes_state() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.Connections.internet_nodes_state)
  return _internal_internet_nodes_state();
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::unsafe_arena_release_internet_nodes_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.connections.Connections.internet_nodes_state)
  if (_internal_has_internet_nodes_state()) {
    clear_has_message();
    ::qaul::rpc::connections::InternetNodesEntry* temp = _impl_.message_.internet_nodes_state_;
    _impl_.message_.internet_nodes_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Connections::unsafe_arena_set_allocated_internet_nodes_state(::qaul::rpc::connections::InternetNodesEntry* internet_nodes_state) {
  clear_message();
  if (internet_nodes_state) {
    set_has_internet_nodes_state();
    _impl_.message_.internet_nodes_state_ = internet_nodes_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.connections.Connections.internet_nodes_state)
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::_internal_mutable_internet_nodes_state() {
  if (!_internal_has_internet_nodes_state()) {
    clear_message();
    set_has_internet_nodes_state();
    _impl_.message_.internet_nodes_state_ = CreateMaybeMessage< ::qaul::rpc::connections::InternetNodesEntry >(GetArenaForAllocation());
  }
  return _impl_.message_.internet_nodes_state_;
}
inline ::qaul::rpc::connections::InternetNodesEntry* Connections::mutable_internet_nodes_state() {
  ::qaul::rpc::connections::InternetNodesEntry* _msg = _internal_mutable_internet_nodes_state();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.connections.Connections.internet_nodes_state)
  return _msg;
}

inline bool Connections::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Connections::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Connections::MessageCase Connections::message_case() const {
  return Connections::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InternetNodesRequest

// -------------------------------------------------------------------

// InternetNodesList

// .qaul.rpc.connections.Info info = 1;
inline void InternetNodesList::clear_info() {
  _impl_.info_ = 0;
}
inline ::qaul::rpc::connections::Info InternetNodesList::_internal_info() const {
  return static_cast< ::qaul::rpc::connections::Info >(_impl_.info_);
}
inline ::qaul::rpc::connections::Info InternetNodesList::info() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.InternetNodesList.info)
  return _internal_info();
}
inline void InternetNodesList::_internal_set_info(::qaul::rpc::connections::Info value) {
  
  _impl_.info_ = value;
}
inline void InternetNodesList::set_info(::qaul::rpc::connections::Info value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.connections.InternetNodesList.info)
}

// repeated .qaul.rpc.connections.InternetNodesEntry nodes = 2;
inline int InternetNodesList::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int InternetNodesList::nodes_size() const {
  return _internal_nodes_size();
}
inline void InternetNodesList::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::qaul::rpc::connections::InternetNodesEntry* InternetNodesList::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.connections.InternetNodesList.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::connections::InternetNodesEntry >*
InternetNodesList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.connections.InternetNodesList.nodes)
  return &_impl_.nodes_;
}
inline const ::qaul::rpc::connections::InternetNodesEntry& InternetNodesList::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::qaul::rpc::connections::InternetNodesEntry& InternetNodesList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.InternetNodesList.nodes)
  return _internal_nodes(index);
}
inline ::qaul::rpc::connections::InternetNodesEntry* InternetNodesList::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::qaul::rpc::connections::InternetNodesEntry* InternetNodesList::add_nodes() {
  ::qaul::rpc::connections::InternetNodesEntry* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:qaul.rpc.connections.InternetNodesList.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::connections::InternetNodesEntry >&
InternetNodesList::nodes() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.connections.InternetNodesList.nodes)
  return _impl_.nodes_;
}

// -------------------------------------------------------------------

// InternetNodesEntry

// string address = 1;
inline void InternetNodesEntry::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& InternetNodesEntry::address() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.InternetNodesEntry.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternetNodesEntry::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.connections.InternetNodesEntry.address)
}
inline std::string* InternetNodesEntry::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.connections.InternetNodesEntry.address)
  return _s;
}
inline const std::string& InternetNodesEntry::_internal_address() const {
  return _impl_.address_.Get();
}
inline void InternetNodesEntry::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* InternetNodesEntry::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* InternetNodesEntry::release_address() {
  // @@protoc_insertion_point(field_release:qaul.rpc.connections.InternetNodesEntry.address)
  return _impl_.address_.Release();
}
inline void InternetNodesEntry::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.connections.InternetNodesEntry.address)
}

// bool enabled = 2;
inline void InternetNodesEntry::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool InternetNodesEntry::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool InternetNodesEntry::enabled() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.connections.InternetNodesEntry.enabled)
  return _internal_enabled();
}
inline void InternetNodesEntry::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void InternetNodesEntry::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.connections.InternetNodesEntry.enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace connections
}  // namespace rpc
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::rpc::connections::Info> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::connections::Info>() {
  return ::qaul::rpc::connections::Info_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connections_2fconnections_2eproto
