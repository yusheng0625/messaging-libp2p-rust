// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connections/ble/ble_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fble_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fble_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connections_2fble_2fble_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connections_2fble_2fble_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connections_2fble_2fble_5frpc_2eproto;
namespace qaul {
namespace rpc {
namespace ble {
class Ble;
struct BleDefaultTypeInternal;
extern BleDefaultTypeInternal _Ble_default_instance_;
class DiscoveredRequest;
struct DiscoveredRequestDefaultTypeInternal;
extern DiscoveredRequestDefaultTypeInternal _DiscoveredRequest_default_instance_;
class DiscoveredResponse;
struct DiscoveredResponseDefaultTypeInternal;
extern DiscoveredResponseDefaultTypeInternal _DiscoveredResponse_default_instance_;
class InfoRequest;
struct InfoRequestDefaultTypeInternal;
extern InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
class InfoResponse;
struct InfoResponseDefaultTypeInternal;
extern InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
class RightsRequest;
struct RightsRequestDefaultTypeInternal;
extern RightsRequestDefaultTypeInternal _RightsRequest_default_instance_;
class RightsResult;
struct RightsResultDefaultTypeInternal;
extern RightsResultDefaultTypeInternal _RightsResult_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
}  // namespace ble
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::ble::Ble* Arena::CreateMaybeMessage<::qaul::rpc::ble::Ble>(Arena*);
template<> ::qaul::rpc::ble::DiscoveredRequest* Arena::CreateMaybeMessage<::qaul::rpc::ble::DiscoveredRequest>(Arena*);
template<> ::qaul::rpc::ble::DiscoveredResponse* Arena::CreateMaybeMessage<::qaul::rpc::ble::DiscoveredResponse>(Arena*);
template<> ::qaul::rpc::ble::InfoRequest* Arena::CreateMaybeMessage<::qaul::rpc::ble::InfoRequest>(Arena*);
template<> ::qaul::rpc::ble::InfoResponse* Arena::CreateMaybeMessage<::qaul::rpc::ble::InfoResponse>(Arena*);
template<> ::qaul::rpc::ble::RightsRequest* Arena::CreateMaybeMessage<::qaul::rpc::ble::RightsRequest>(Arena*);
template<> ::qaul::rpc::ble::RightsResult* Arena::CreateMaybeMessage<::qaul::rpc::ble::RightsResult>(Arena*);
template<> ::qaul::rpc::ble::StartRequest* Arena::CreateMaybeMessage<::qaul::rpc::ble::StartRequest>(Arena*);
template<> ::qaul::rpc::ble::StopRequest* Arena::CreateMaybeMessage<::qaul::rpc::ble::StopRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace ble {

// ===================================================================

class Ble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.Ble) */ {
 public:
  inline Ble() : Ble(nullptr) {}
  ~Ble() override;
  explicit PROTOBUF_CONSTEXPR Ble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ble(const Ble& from);
  Ble(Ble&& from) noexcept
    : Ble() {
    *this = ::std::move(from);
  }

  inline Ble& operator=(const Ble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ble& operator=(Ble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ble& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kInfoRequest = 1,
    kInfoResponse = 2,
    kStartRequest = 3,
    kStopRequest = 4,
    kDiscoveredRequest = 5,
    kDiscoveredResponse = 6,
    kRightsRequest = 7,
    kRightsResult = 8,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Ble* internal_default_instance() {
    return reinterpret_cast<const Ble*>(
               &_Ble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ble& a, Ble& b) {
    a.Swap(&b);
  }
  inline void Swap(Ble* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ble>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ble& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ble& from) {
    Ble::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ble* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.Ble";
  }
  protected:
  explicit Ble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoRequestFieldNumber = 1,
    kInfoResponseFieldNumber = 2,
    kStartRequestFieldNumber = 3,
    kStopRequestFieldNumber = 4,
    kDiscoveredRequestFieldNumber = 5,
    kDiscoveredResponseFieldNumber = 6,
    kRightsRequestFieldNumber = 7,
    kRightsResultFieldNumber = 8,
  };
  // .qaul.rpc.ble.InfoRequest info_request = 1;
  bool has_info_request() const;
  private:
  bool _internal_has_info_request() const;
  public:
  void clear_info_request();
  const ::qaul::rpc::ble::InfoRequest& info_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::InfoRequest* release_info_request();
  ::qaul::rpc::ble::InfoRequest* mutable_info_request();
  void set_allocated_info_request(::qaul::rpc::ble::InfoRequest* info_request);
  private:
  const ::qaul::rpc::ble::InfoRequest& _internal_info_request() const;
  ::qaul::rpc::ble::InfoRequest* _internal_mutable_info_request();
  public:
  void unsafe_arena_set_allocated_info_request(
      ::qaul::rpc::ble::InfoRequest* info_request);
  ::qaul::rpc::ble::InfoRequest* unsafe_arena_release_info_request();

  // .qaul.rpc.ble.InfoResponse info_response = 2;
  bool has_info_response() const;
  private:
  bool _internal_has_info_response() const;
  public:
  void clear_info_response();
  const ::qaul::rpc::ble::InfoResponse& info_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::InfoResponse* release_info_response();
  ::qaul::rpc::ble::InfoResponse* mutable_info_response();
  void set_allocated_info_response(::qaul::rpc::ble::InfoResponse* info_response);
  private:
  const ::qaul::rpc::ble::InfoResponse& _internal_info_response() const;
  ::qaul::rpc::ble::InfoResponse* _internal_mutable_info_response();
  public:
  void unsafe_arena_set_allocated_info_response(
      ::qaul::rpc::ble::InfoResponse* info_response);
  ::qaul::rpc::ble::InfoResponse* unsafe_arena_release_info_response();

  // .qaul.rpc.ble.StartRequest start_request = 3;
  bool has_start_request() const;
  private:
  bool _internal_has_start_request() const;
  public:
  void clear_start_request();
  const ::qaul::rpc::ble::StartRequest& start_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::StartRequest* release_start_request();
  ::qaul::rpc::ble::StartRequest* mutable_start_request();
  void set_allocated_start_request(::qaul::rpc::ble::StartRequest* start_request);
  private:
  const ::qaul::rpc::ble::StartRequest& _internal_start_request() const;
  ::qaul::rpc::ble::StartRequest* _internal_mutable_start_request();
  public:
  void unsafe_arena_set_allocated_start_request(
      ::qaul::rpc::ble::StartRequest* start_request);
  ::qaul::rpc::ble::StartRequest* unsafe_arena_release_start_request();

  // .qaul.rpc.ble.StopRequest stop_request = 4;
  bool has_stop_request() const;
  private:
  bool _internal_has_stop_request() const;
  public:
  void clear_stop_request();
  const ::qaul::rpc::ble::StopRequest& stop_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::StopRequest* release_stop_request();
  ::qaul::rpc::ble::StopRequest* mutable_stop_request();
  void set_allocated_stop_request(::qaul::rpc::ble::StopRequest* stop_request);
  private:
  const ::qaul::rpc::ble::StopRequest& _internal_stop_request() const;
  ::qaul::rpc::ble::StopRequest* _internal_mutable_stop_request();
  public:
  void unsafe_arena_set_allocated_stop_request(
      ::qaul::rpc::ble::StopRequest* stop_request);
  ::qaul::rpc::ble::StopRequest* unsafe_arena_release_stop_request();

  // .qaul.rpc.ble.DiscoveredRequest discovered_request = 5;
  bool has_discovered_request() const;
  private:
  bool _internal_has_discovered_request() const;
  public:
  void clear_discovered_request();
  const ::qaul::rpc::ble::DiscoveredRequest& discovered_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::DiscoveredRequest* release_discovered_request();
  ::qaul::rpc::ble::DiscoveredRequest* mutable_discovered_request();
  void set_allocated_discovered_request(::qaul::rpc::ble::DiscoveredRequest* discovered_request);
  private:
  const ::qaul::rpc::ble::DiscoveredRequest& _internal_discovered_request() const;
  ::qaul::rpc::ble::DiscoveredRequest* _internal_mutable_discovered_request();
  public:
  void unsafe_arena_set_allocated_discovered_request(
      ::qaul::rpc::ble::DiscoveredRequest* discovered_request);
  ::qaul::rpc::ble::DiscoveredRequest* unsafe_arena_release_discovered_request();

  // .qaul.rpc.ble.DiscoveredResponse discovered_response = 6;
  bool has_discovered_response() const;
  private:
  bool _internal_has_discovered_response() const;
  public:
  void clear_discovered_response();
  const ::qaul::rpc::ble::DiscoveredResponse& discovered_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::DiscoveredResponse* release_discovered_response();
  ::qaul::rpc::ble::DiscoveredResponse* mutable_discovered_response();
  void set_allocated_discovered_response(::qaul::rpc::ble::DiscoveredResponse* discovered_response);
  private:
  const ::qaul::rpc::ble::DiscoveredResponse& _internal_discovered_response() const;
  ::qaul::rpc::ble::DiscoveredResponse* _internal_mutable_discovered_response();
  public:
  void unsafe_arena_set_allocated_discovered_response(
      ::qaul::rpc::ble::DiscoveredResponse* discovered_response);
  ::qaul::rpc::ble::DiscoveredResponse* unsafe_arena_release_discovered_response();

  // .qaul.rpc.ble.RightsRequest rights_request = 7;
  bool has_rights_request() const;
  private:
  bool _internal_has_rights_request() const;
  public:
  void clear_rights_request();
  const ::qaul::rpc::ble::RightsRequest& rights_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::RightsRequest* release_rights_request();
  ::qaul::rpc::ble::RightsRequest* mutable_rights_request();
  void set_allocated_rights_request(::qaul::rpc::ble::RightsRequest* rights_request);
  private:
  const ::qaul::rpc::ble::RightsRequest& _internal_rights_request() const;
  ::qaul::rpc::ble::RightsRequest* _internal_mutable_rights_request();
  public:
  void unsafe_arena_set_allocated_rights_request(
      ::qaul::rpc::ble::RightsRequest* rights_request);
  ::qaul::rpc::ble::RightsRequest* unsafe_arena_release_rights_request();

  // .qaul.rpc.ble.RightsResult rights_result = 8;
  bool has_rights_result() const;
  private:
  bool _internal_has_rights_result() const;
  public:
  void clear_rights_result();
  const ::qaul::rpc::ble::RightsResult& rights_result() const;
  PROTOBUF_NODISCARD ::qaul::rpc::ble::RightsResult* release_rights_result();
  ::qaul::rpc::ble::RightsResult* mutable_rights_result();
  void set_allocated_rights_result(::qaul::rpc::ble::RightsResult* rights_result);
  private:
  const ::qaul::rpc::ble::RightsResult& _internal_rights_result() const;
  ::qaul::rpc::ble::RightsResult* _internal_mutable_rights_result();
  public:
  void unsafe_arena_set_allocated_rights_result(
      ::qaul::rpc::ble::RightsResult* rights_result);
  ::qaul::rpc::ble::RightsResult* unsafe_arena_release_rights_result();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.Ble)
 private:
  class _Internal;
  void set_has_info_request();
  void set_has_info_response();
  void set_has_start_request();
  void set_has_stop_request();
  void set_has_discovered_request();
  void set_has_discovered_response();
  void set_has_rights_request();
  void set_has_rights_result();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::ble::InfoRequest* info_request_;
      ::qaul::rpc::ble::InfoResponse* info_response_;
      ::qaul::rpc::ble::StartRequest* start_request_;
      ::qaul::rpc::ble::StopRequest* stop_request_;
      ::qaul::rpc::ble::DiscoveredRequest* discovered_request_;
      ::qaul::rpc::ble::DiscoveredResponse* discovered_response_;
      ::qaul::rpc::ble::RightsRequest* rights_request_;
      ::qaul::rpc::ble::RightsResult* rights_result_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class InfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.InfoRequest) */ {
 public:
  inline InfoRequest() : InfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoRequest(const InfoRequest& from);
  InfoRequest(InfoRequest&& from) noexcept
    : InfoRequest() {
    *this = ::std::move(from);
  }

  inline InfoRequest& operator=(const InfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoRequest& operator=(InfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoRequest* internal_default_instance() {
    return reinterpret_cast<const InfoRequest*>(
               &_InfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InfoRequest& a, InfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.InfoRequest";
  }
  protected:
  explicit InfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.InfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class InfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.InfoResponse) */ {
 public:
  inline InfoResponse() : InfoResponse(nullptr) {}
  ~InfoResponse() override;
  explicit PROTOBUF_CONSTEXPR InfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoResponse(const InfoResponse& from);
  InfoResponse(InfoResponse&& from) noexcept
    : InfoResponse() {
    *this = ::std::move(from);
  }

  inline InfoResponse& operator=(const InfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoResponse& operator=(InfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoResponse* internal_default_instance() {
    return reinterpret_cast<const InfoResponse*>(
               &_InfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InfoResponse& a, InfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InfoResponse& from) {
    InfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.InfoResponse";
  }
  protected:
  explicit InfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmallIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kDeviceInfoFieldNumber = 3,
  };
  // bytes small_id = 1;
  void clear_small_id();
  const std::string& small_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_small_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_small_id();
  PROTOBUF_NODISCARD std::string* release_small_id();
  void set_allocated_small_id(std::string* small_id);
  private:
  const std::string& _internal_small_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_small_id(const std::string& value);
  std::string* _internal_mutable_small_id();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes device_info = 3;
  void clear_device_info();
  const std::string& device_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_info();
  PROTOBUF_NODISCARD std::string* release_device_info();
  void set_allocated_device_info(std::string* device_info);
  private:
  const std::string& _internal_device_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_info(const std::string& value);
  std::string* _internal_mutable_device_info();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.InfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr small_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DiscoveredRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.DiscoveredRequest) */ {
 public:
  inline DiscoveredRequest() : DiscoveredRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DiscoveredRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveredRequest(const DiscoveredRequest& from);
  DiscoveredRequest(DiscoveredRequest&& from) noexcept
    : DiscoveredRequest() {
    *this = ::std::move(from);
  }

  inline DiscoveredRequest& operator=(const DiscoveredRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveredRequest& operator=(DiscoveredRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveredRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveredRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoveredRequest*>(
               &_DiscoveredRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DiscoveredRequest& a, DiscoveredRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveredRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveredRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveredRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveredRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DiscoveredRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DiscoveredRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.DiscoveredRequest";
  }
  protected:
  explicit DiscoveredRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.DiscoveredRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DiscoveredResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.DiscoveredResponse) */ {
 public:
  inline DiscoveredResponse() : DiscoveredResponse(nullptr) {}
  ~DiscoveredResponse() override;
  explicit PROTOBUF_CONSTEXPR DiscoveredResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveredResponse(const DiscoveredResponse& from);
  DiscoveredResponse(DiscoveredResponse&& from) noexcept
    : DiscoveredResponse() {
    *this = ::std::move(from);
  }

  inline DiscoveredResponse& operator=(const DiscoveredResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveredResponse& operator=(DiscoveredResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveredResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveredResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoveredResponse*>(
               &_DiscoveredResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiscoveredResponse& a, DiscoveredResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveredResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveredResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveredResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveredResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveredResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveredResponse& from) {
    DiscoveredResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveredResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.DiscoveredResponse";
  }
  protected:
  explicit DiscoveredResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesCountFieldNumber = 1,
    kToConfirmCountFieldNumber = 2,
  };
  // uint32 nodes_count = 1;
  void clear_nodes_count();
  uint32_t nodes_count() const;
  void set_nodes_count(uint32_t value);
  private:
  uint32_t _internal_nodes_count() const;
  void _internal_set_nodes_count(uint32_t value);
  public:

  // uint32 to_confirm_count = 2;
  void clear_to_confirm_count();
  uint32_t to_confirm_count() const;
  void set_to_confirm_count(uint32_t value);
  private:
  uint32_t _internal_to_confirm_count() const;
  void _internal_set_to_confirm_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.DiscoveredResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t nodes_count_;
    uint32_t to_confirm_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class RightsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.RightsRequest) */ {
 public:
  inline RightsRequest() : RightsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RightsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RightsRequest(const RightsRequest& from);
  RightsRequest(RightsRequest&& from) noexcept
    : RightsRequest() {
    *this = ::std::move(from);
  }

  inline RightsRequest& operator=(const RightsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RightsRequest& operator=(RightsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RightsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RightsRequest* internal_default_instance() {
    return reinterpret_cast<const RightsRequest*>(
               &_RightsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RightsRequest& a, RightsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RightsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RightsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RightsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RightsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RightsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RightsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.RightsRequest";
  }
  protected:
  explicit RightsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.RightsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// -------------------------------------------------------------------

class RightsResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.ble.RightsResult) */ {
 public:
  inline RightsResult() : RightsResult(nullptr) {}
  ~RightsResult() override;
  explicit PROTOBUF_CONSTEXPR RightsResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RightsResult(const RightsResult& from);
  RightsResult(RightsResult&& from) noexcept
    : RightsResult() {
    *this = ::std::move(from);
  }

  inline RightsResult& operator=(const RightsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RightsResult& operator=(RightsResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RightsResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RightsResult* internal_default_instance() {
    return reinterpret_cast<const RightsResult*>(
               &_RightsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RightsResult& a, RightsResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RightsResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RightsResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RightsResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RightsResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RightsResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RightsResult& from) {
    RightsResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RightsResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.ble.RightsResult";
  }
  protected:
  explicit RightsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightsGrantedFieldNumber = 1,
  };
  // bool rights_granted = 1;
  void clear_rights_granted();
  bool rights_granted() const;
  void set_rights_granted(bool value);
  private:
  bool _internal_rights_granted() const;
  void _internal_set_rights_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.ble.RightsResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool rights_granted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ble

// .qaul.rpc.ble.InfoRequest info_request = 1;
inline bool Ble::_internal_has_info_request() const {
  return message_case() == kInfoRequest;
}
inline bool Ble::has_info_request() const {
  return _internal_has_info_request();
}
inline void Ble::set_has_info_request() {
  _impl_._oneof_case_[0] = kInfoRequest;
}
inline void Ble::clear_info_request() {
  if (_internal_has_info_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.info_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::InfoRequest* Ble::release_info_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.info_request)
  if (_internal_has_info_request()) {
    clear_has_message();
    ::qaul::rpc::ble::InfoRequest* temp = _impl_.message_.info_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::InfoRequest& Ble::_internal_info_request() const {
  return _internal_has_info_request()
      ? *_impl_.message_.info_request_
      : reinterpret_cast< ::qaul::rpc::ble::InfoRequest&>(::qaul::rpc::ble::_InfoRequest_default_instance_);
}
inline const ::qaul::rpc::ble::InfoRequest& Ble::info_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.info_request)
  return _internal_info_request();
}
inline ::qaul::rpc::ble::InfoRequest* Ble::unsafe_arena_release_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.info_request)
  if (_internal_has_info_request()) {
    clear_has_message();
    ::qaul::rpc::ble::InfoRequest* temp = _impl_.message_.info_request_;
    _impl_.message_.info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_info_request(::qaul::rpc::ble::InfoRequest* info_request) {
  clear_message();
  if (info_request) {
    set_has_info_request();
    _impl_.message_.info_request_ = info_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.info_request)
}
inline ::qaul::rpc::ble::InfoRequest* Ble::_internal_mutable_info_request() {
  if (!_internal_has_info_request()) {
    clear_message();
    set_has_info_request();
    _impl_.message_.info_request_ = CreateMaybeMessage< ::qaul::rpc::ble::InfoRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.info_request_;
}
inline ::qaul::rpc::ble::InfoRequest* Ble::mutable_info_request() {
  ::qaul::rpc::ble::InfoRequest* _msg = _internal_mutable_info_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.info_request)
  return _msg;
}

// .qaul.rpc.ble.InfoResponse info_response = 2;
inline bool Ble::_internal_has_info_response() const {
  return message_case() == kInfoResponse;
}
inline bool Ble::has_info_response() const {
  return _internal_has_info_response();
}
inline void Ble::set_has_info_response() {
  _impl_._oneof_case_[0] = kInfoResponse;
}
inline void Ble::clear_info_response() {
  if (_internal_has_info_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.info_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::InfoResponse* Ble::release_info_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.info_response)
  if (_internal_has_info_response()) {
    clear_has_message();
    ::qaul::rpc::ble::InfoResponse* temp = _impl_.message_.info_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::InfoResponse& Ble::_internal_info_response() const {
  return _internal_has_info_response()
      ? *_impl_.message_.info_response_
      : reinterpret_cast< ::qaul::rpc::ble::InfoResponse&>(::qaul::rpc::ble::_InfoResponse_default_instance_);
}
inline const ::qaul::rpc::ble::InfoResponse& Ble::info_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.info_response)
  return _internal_info_response();
}
inline ::qaul::rpc::ble::InfoResponse* Ble::unsafe_arena_release_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.info_response)
  if (_internal_has_info_response()) {
    clear_has_message();
    ::qaul::rpc::ble::InfoResponse* temp = _impl_.message_.info_response_;
    _impl_.message_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_info_response(::qaul::rpc::ble::InfoResponse* info_response) {
  clear_message();
  if (info_response) {
    set_has_info_response();
    _impl_.message_.info_response_ = info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.info_response)
}
inline ::qaul::rpc::ble::InfoResponse* Ble::_internal_mutable_info_response() {
  if (!_internal_has_info_response()) {
    clear_message();
    set_has_info_response();
    _impl_.message_.info_response_ = CreateMaybeMessage< ::qaul::rpc::ble::InfoResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.info_response_;
}
inline ::qaul::rpc::ble::InfoResponse* Ble::mutable_info_response() {
  ::qaul::rpc::ble::InfoResponse* _msg = _internal_mutable_info_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.info_response)
  return _msg;
}

// .qaul.rpc.ble.StartRequest start_request = 3;
inline bool Ble::_internal_has_start_request() const {
  return message_case() == kStartRequest;
}
inline bool Ble::has_start_request() const {
  return _internal_has_start_request();
}
inline void Ble::set_has_start_request() {
  _impl_._oneof_case_[0] = kStartRequest;
}
inline void Ble::clear_start_request() {
  if (_internal_has_start_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.start_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::StartRequest* Ble::release_start_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.start_request)
  if (_internal_has_start_request()) {
    clear_has_message();
    ::qaul::rpc::ble::StartRequest* temp = _impl_.message_.start_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.start_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::StartRequest& Ble::_internal_start_request() const {
  return _internal_has_start_request()
      ? *_impl_.message_.start_request_
      : reinterpret_cast< ::qaul::rpc::ble::StartRequest&>(::qaul::rpc::ble::_StartRequest_default_instance_);
}
inline const ::qaul::rpc::ble::StartRequest& Ble::start_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.start_request)
  return _internal_start_request();
}
inline ::qaul::rpc::ble::StartRequest* Ble::unsafe_arena_release_start_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.start_request)
  if (_internal_has_start_request()) {
    clear_has_message();
    ::qaul::rpc::ble::StartRequest* temp = _impl_.message_.start_request_;
    _impl_.message_.start_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_start_request(::qaul::rpc::ble::StartRequest* start_request) {
  clear_message();
  if (start_request) {
    set_has_start_request();
    _impl_.message_.start_request_ = start_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.start_request)
}
inline ::qaul::rpc::ble::StartRequest* Ble::_internal_mutable_start_request() {
  if (!_internal_has_start_request()) {
    clear_message();
    set_has_start_request();
    _impl_.message_.start_request_ = CreateMaybeMessage< ::qaul::rpc::ble::StartRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.start_request_;
}
inline ::qaul::rpc::ble::StartRequest* Ble::mutable_start_request() {
  ::qaul::rpc::ble::StartRequest* _msg = _internal_mutable_start_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.start_request)
  return _msg;
}

// .qaul.rpc.ble.StopRequest stop_request = 4;
inline bool Ble::_internal_has_stop_request() const {
  return message_case() == kStopRequest;
}
inline bool Ble::has_stop_request() const {
  return _internal_has_stop_request();
}
inline void Ble::set_has_stop_request() {
  _impl_._oneof_case_[0] = kStopRequest;
}
inline void Ble::clear_stop_request() {
  if (_internal_has_stop_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.stop_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::StopRequest* Ble::release_stop_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_message();
    ::qaul::rpc::ble::StopRequest* temp = _impl_.message_.stop_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::StopRequest& Ble::_internal_stop_request() const {
  return _internal_has_stop_request()
      ? *_impl_.message_.stop_request_
      : reinterpret_cast< ::qaul::rpc::ble::StopRequest&>(::qaul::rpc::ble::_StopRequest_default_instance_);
}
inline const ::qaul::rpc::ble::StopRequest& Ble::stop_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.stop_request)
  return _internal_stop_request();
}
inline ::qaul::rpc::ble::StopRequest* Ble::unsafe_arena_release_stop_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_message();
    ::qaul::rpc::ble::StopRequest* temp = _impl_.message_.stop_request_;
    _impl_.message_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_stop_request(::qaul::rpc::ble::StopRequest* stop_request) {
  clear_message();
  if (stop_request) {
    set_has_stop_request();
    _impl_.message_.stop_request_ = stop_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.stop_request)
}
inline ::qaul::rpc::ble::StopRequest* Ble::_internal_mutable_stop_request() {
  if (!_internal_has_stop_request()) {
    clear_message();
    set_has_stop_request();
    _impl_.message_.stop_request_ = CreateMaybeMessage< ::qaul::rpc::ble::StopRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.stop_request_;
}
inline ::qaul::rpc::ble::StopRequest* Ble::mutable_stop_request() {
  ::qaul::rpc::ble::StopRequest* _msg = _internal_mutable_stop_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.stop_request)
  return _msg;
}

// .qaul.rpc.ble.DiscoveredRequest discovered_request = 5;
inline bool Ble::_internal_has_discovered_request() const {
  return message_case() == kDiscoveredRequest;
}
inline bool Ble::has_discovered_request() const {
  return _internal_has_discovered_request();
}
inline void Ble::set_has_discovered_request() {
  _impl_._oneof_case_[0] = kDiscoveredRequest;
}
inline void Ble::clear_discovered_request() {
  if (_internal_has_discovered_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.discovered_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::DiscoveredRequest* Ble::release_discovered_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.discovered_request)
  if (_internal_has_discovered_request()) {
    clear_has_message();
    ::qaul::rpc::ble::DiscoveredRequest* temp = _impl_.message_.discovered_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.discovered_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::DiscoveredRequest& Ble::_internal_discovered_request() const {
  return _internal_has_discovered_request()
      ? *_impl_.message_.discovered_request_
      : reinterpret_cast< ::qaul::rpc::ble::DiscoveredRequest&>(::qaul::rpc::ble::_DiscoveredRequest_default_instance_);
}
inline const ::qaul::rpc::ble::DiscoveredRequest& Ble::discovered_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.discovered_request)
  return _internal_discovered_request();
}
inline ::qaul::rpc::ble::DiscoveredRequest* Ble::unsafe_arena_release_discovered_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.discovered_request)
  if (_internal_has_discovered_request()) {
    clear_has_message();
    ::qaul::rpc::ble::DiscoveredRequest* temp = _impl_.message_.discovered_request_;
    _impl_.message_.discovered_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_discovered_request(::qaul::rpc::ble::DiscoveredRequest* discovered_request) {
  clear_message();
  if (discovered_request) {
    set_has_discovered_request();
    _impl_.message_.discovered_request_ = discovered_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.discovered_request)
}
inline ::qaul::rpc::ble::DiscoveredRequest* Ble::_internal_mutable_discovered_request() {
  if (!_internal_has_discovered_request()) {
    clear_message();
    set_has_discovered_request();
    _impl_.message_.discovered_request_ = CreateMaybeMessage< ::qaul::rpc::ble::DiscoveredRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.discovered_request_;
}
inline ::qaul::rpc::ble::DiscoveredRequest* Ble::mutable_discovered_request() {
  ::qaul::rpc::ble::DiscoveredRequest* _msg = _internal_mutable_discovered_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.discovered_request)
  return _msg;
}

// .qaul.rpc.ble.DiscoveredResponse discovered_response = 6;
inline bool Ble::_internal_has_discovered_response() const {
  return message_case() == kDiscoveredResponse;
}
inline bool Ble::has_discovered_response() const {
  return _internal_has_discovered_response();
}
inline void Ble::set_has_discovered_response() {
  _impl_._oneof_case_[0] = kDiscoveredResponse;
}
inline void Ble::clear_discovered_response() {
  if (_internal_has_discovered_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.discovered_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::DiscoveredResponse* Ble::release_discovered_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.discovered_response)
  if (_internal_has_discovered_response()) {
    clear_has_message();
    ::qaul::rpc::ble::DiscoveredResponse* temp = _impl_.message_.discovered_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.discovered_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::DiscoveredResponse& Ble::_internal_discovered_response() const {
  return _internal_has_discovered_response()
      ? *_impl_.message_.discovered_response_
      : reinterpret_cast< ::qaul::rpc::ble::DiscoveredResponse&>(::qaul::rpc::ble::_DiscoveredResponse_default_instance_);
}
inline const ::qaul::rpc::ble::DiscoveredResponse& Ble::discovered_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.discovered_response)
  return _internal_discovered_response();
}
inline ::qaul::rpc::ble::DiscoveredResponse* Ble::unsafe_arena_release_discovered_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.discovered_response)
  if (_internal_has_discovered_response()) {
    clear_has_message();
    ::qaul::rpc::ble::DiscoveredResponse* temp = _impl_.message_.discovered_response_;
    _impl_.message_.discovered_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_discovered_response(::qaul::rpc::ble::DiscoveredResponse* discovered_response) {
  clear_message();
  if (discovered_response) {
    set_has_discovered_response();
    _impl_.message_.discovered_response_ = discovered_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.discovered_response)
}
inline ::qaul::rpc::ble::DiscoveredResponse* Ble::_internal_mutable_discovered_response() {
  if (!_internal_has_discovered_response()) {
    clear_message();
    set_has_discovered_response();
    _impl_.message_.discovered_response_ = CreateMaybeMessage< ::qaul::rpc::ble::DiscoveredResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.discovered_response_;
}
inline ::qaul::rpc::ble::DiscoveredResponse* Ble::mutable_discovered_response() {
  ::qaul::rpc::ble::DiscoveredResponse* _msg = _internal_mutable_discovered_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.discovered_response)
  return _msg;
}

// .qaul.rpc.ble.RightsRequest rights_request = 7;
inline bool Ble::_internal_has_rights_request() const {
  return message_case() == kRightsRequest;
}
inline bool Ble::has_rights_request() const {
  return _internal_has_rights_request();
}
inline void Ble::set_has_rights_request() {
  _impl_._oneof_case_[0] = kRightsRequest;
}
inline void Ble::clear_rights_request() {
  if (_internal_has_rights_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.rights_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::RightsRequest* Ble::release_rights_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.rights_request)
  if (_internal_has_rights_request()) {
    clear_has_message();
    ::qaul::rpc::ble::RightsRequest* temp = _impl_.message_.rights_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.rights_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::RightsRequest& Ble::_internal_rights_request() const {
  return _internal_has_rights_request()
      ? *_impl_.message_.rights_request_
      : reinterpret_cast< ::qaul::rpc::ble::RightsRequest&>(::qaul::rpc::ble::_RightsRequest_default_instance_);
}
inline const ::qaul::rpc::ble::RightsRequest& Ble::rights_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.rights_request)
  return _internal_rights_request();
}
inline ::qaul::rpc::ble::RightsRequest* Ble::unsafe_arena_release_rights_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.rights_request)
  if (_internal_has_rights_request()) {
    clear_has_message();
    ::qaul::rpc::ble::RightsRequest* temp = _impl_.message_.rights_request_;
    _impl_.message_.rights_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_rights_request(::qaul::rpc::ble::RightsRequest* rights_request) {
  clear_message();
  if (rights_request) {
    set_has_rights_request();
    _impl_.message_.rights_request_ = rights_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.rights_request)
}
inline ::qaul::rpc::ble::RightsRequest* Ble::_internal_mutable_rights_request() {
  if (!_internal_has_rights_request()) {
    clear_message();
    set_has_rights_request();
    _impl_.message_.rights_request_ = CreateMaybeMessage< ::qaul::rpc::ble::RightsRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.rights_request_;
}
inline ::qaul::rpc::ble::RightsRequest* Ble::mutable_rights_request() {
  ::qaul::rpc::ble::RightsRequest* _msg = _internal_mutable_rights_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.rights_request)
  return _msg;
}

// .qaul.rpc.ble.RightsResult rights_result = 8;
inline bool Ble::_internal_has_rights_result() const {
  return message_case() == kRightsResult;
}
inline bool Ble::has_rights_result() const {
  return _internal_has_rights_result();
}
inline void Ble::set_has_rights_result() {
  _impl_._oneof_case_[0] = kRightsResult;
}
inline void Ble::clear_rights_result() {
  if (_internal_has_rights_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.rights_result_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::ble::RightsResult* Ble::release_rights_result() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.Ble.rights_result)
  if (_internal_has_rights_result()) {
    clear_has_message();
    ::qaul::rpc::ble::RightsResult* temp = _impl_.message_.rights_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.rights_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::ble::RightsResult& Ble::_internal_rights_result() const {
  return _internal_has_rights_result()
      ? *_impl_.message_.rights_result_
      : reinterpret_cast< ::qaul::rpc::ble::RightsResult&>(::qaul::rpc::ble::_RightsResult_default_instance_);
}
inline const ::qaul::rpc::ble::RightsResult& Ble::rights_result() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.Ble.rights_result)
  return _internal_rights_result();
}
inline ::qaul::rpc::ble::RightsResult* Ble::unsafe_arena_release_rights_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.ble.Ble.rights_result)
  if (_internal_has_rights_result()) {
    clear_has_message();
    ::qaul::rpc::ble::RightsResult* temp = _impl_.message_.rights_result_;
    _impl_.message_.rights_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_rights_result(::qaul::rpc::ble::RightsResult* rights_result) {
  clear_message();
  if (rights_result) {
    set_has_rights_result();
    _impl_.message_.rights_result_ = rights_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.ble.Ble.rights_result)
}
inline ::qaul::rpc::ble::RightsResult* Ble::_internal_mutable_rights_result() {
  if (!_internal_has_rights_result()) {
    clear_message();
    set_has_rights_result();
    _impl_.message_.rights_result_ = CreateMaybeMessage< ::qaul::rpc::ble::RightsResult >(GetArenaForAllocation());
  }
  return _impl_.message_.rights_result_;
}
inline ::qaul::rpc::ble::RightsResult* Ble::mutable_rights_result() {
  ::qaul::rpc::ble::RightsResult* _msg = _internal_mutable_rights_result();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.Ble.rights_result)
  return _msg;
}

inline bool Ble::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Ble::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Ble::MessageCase Ble::message_case() const {
  return Ble::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InfoRequest

// -------------------------------------------------------------------

// InfoResponse

// bytes small_id = 1;
inline void InfoResponse::clear_small_id() {
  _impl_.small_id_.ClearToEmpty();
}
inline const std::string& InfoResponse::small_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.InfoResponse.small_id)
  return _internal_small_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoResponse::set_small_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.small_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.ble.InfoResponse.small_id)
}
inline std::string* InfoResponse::mutable_small_id() {
  std::string* _s = _internal_mutable_small_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.InfoResponse.small_id)
  return _s;
}
inline const std::string& InfoResponse::_internal_small_id() const {
  return _impl_.small_id_.Get();
}
inline void InfoResponse::_internal_set_small_id(const std::string& value) {
  
  _impl_.small_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoResponse::_internal_mutable_small_id() {
  
  return _impl_.small_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoResponse::release_small_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.InfoResponse.small_id)
  return _impl_.small_id_.Release();
}
inline void InfoResponse::set_allocated_small_id(std::string* small_id) {
  if (small_id != nullptr) {
    
  } else {
    
  }
  _impl_.small_id_.SetAllocated(small_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.small_id_.IsDefault()) {
    _impl_.small_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.ble.InfoResponse.small_id)
}

// string status = 2;
inline void InfoResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& InfoResponse::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.InfoResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.ble.InfoResponse.status)
}
inline std::string* InfoResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.InfoResponse.status)
  return _s;
}
inline const std::string& InfoResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void InfoResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoResponse::release_status() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.InfoResponse.status)
  return _impl_.status_.Release();
}
inline void InfoResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.ble.InfoResponse.status)
}

// bytes device_info = 3;
inline void InfoResponse::clear_device_info() {
  _impl_.device_info_.ClearToEmpty();
}
inline const std::string& InfoResponse::device_info() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.InfoResponse.device_info)
  return _internal_device_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoResponse::set_device_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.ble.InfoResponse.device_info)
}
inline std::string* InfoResponse::mutable_device_info() {
  std::string* _s = _internal_mutable_device_info();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.ble.InfoResponse.device_info)
  return _s;
}
inline const std::string& InfoResponse::_internal_device_info() const {
  return _impl_.device_info_.Get();
}
inline void InfoResponse::_internal_set_device_info(const std::string& value) {
  
  _impl_.device_info_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoResponse::_internal_mutable_device_info() {
  
  return _impl_.device_info_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoResponse::release_device_info() {
  // @@protoc_insertion_point(field_release:qaul.rpc.ble.InfoResponse.device_info)
  return _impl_.device_info_.Release();
}
inline void InfoResponse::set_allocated_device_info(std::string* device_info) {
  if (device_info != nullptr) {
    
  } else {
    
  }
  _impl_.device_info_.SetAllocated(device_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_info_.IsDefault()) {
    _impl_.device_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.ble.InfoResponse.device_info)
}

// -------------------------------------------------------------------

// StartRequest

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// DiscoveredRequest

// -------------------------------------------------------------------

// DiscoveredResponse

// uint32 nodes_count = 1;
inline void DiscoveredResponse::clear_nodes_count() {
  _impl_.nodes_count_ = 0u;
}
inline uint32_t DiscoveredResponse::_internal_nodes_count() const {
  return _impl_.nodes_count_;
}
inline uint32_t DiscoveredResponse::nodes_count() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.DiscoveredResponse.nodes_count)
  return _internal_nodes_count();
}
inline void DiscoveredResponse::_internal_set_nodes_count(uint32_t value) {
  
  _impl_.nodes_count_ = value;
}
inline void DiscoveredResponse::set_nodes_count(uint32_t value) {
  _internal_set_nodes_count(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.ble.DiscoveredResponse.nodes_count)
}

// uint32 to_confirm_count = 2;
inline void DiscoveredResponse::clear_to_confirm_count() {
  _impl_.to_confirm_count_ = 0u;
}
inline uint32_t DiscoveredResponse::_internal_to_confirm_count() const {
  return _impl_.to_confirm_count_;
}
inline uint32_t DiscoveredResponse::to_confirm_count() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.DiscoveredResponse.to_confirm_count)
  return _internal_to_confirm_count();
}
inline void DiscoveredResponse::_internal_set_to_confirm_count(uint32_t value) {
  
  _impl_.to_confirm_count_ = value;
}
inline void DiscoveredResponse::set_to_confirm_count(uint32_t value) {
  _internal_set_to_confirm_count(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.ble.DiscoveredResponse.to_confirm_count)
}

// -------------------------------------------------------------------

// RightsRequest

// -------------------------------------------------------------------

// RightsResult

// bool rights_granted = 1;
inline void RightsResult::clear_rights_granted() {
  _impl_.rights_granted_ = false;
}
inline bool RightsResult::_internal_rights_granted() const {
  return _impl_.rights_granted_;
}
inline bool RightsResult::rights_granted() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.ble.RightsResult.rights_granted)
  return _internal_rights_granted();
}
inline void RightsResult::_internal_set_rights_granted(bool value) {
  
  _impl_.rights_granted_ = value;
}
inline void RightsResult::set_rights_granted(bool value) {
  _internal_set_rights_granted(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.ble.RightsResult.rights_granted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ble
}  // namespace rpc
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fble_5frpc_2eproto
