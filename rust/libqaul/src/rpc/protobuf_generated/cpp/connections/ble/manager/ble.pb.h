// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connections/ble/manager/ble.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fmanager_2fble_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fmanager_2fble_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connections_2fble_2fmanager_2fble_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connections_2fble_2fmanager_2fble_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connections_2fble_2fmanager_2fble_2eproto;
namespace qaul {
namespace sys {
namespace ble {
class Ble;
struct BleDefaultTypeInternal;
extern BleDefaultTypeInternal _Ble_default_instance_;
class BleAdvertisingReceived;
struct BleAdvertisingReceivedDefaultTypeInternal;
extern BleAdvertisingReceivedDefaultTypeInternal _BleAdvertisingReceived_default_instance_;
class BleAdvertisingSend;
struct BleAdvertisingSendDefaultTypeInternal;
extern BleAdvertisingSendDefaultTypeInternal _BleAdvertisingSend_default_instance_;
class BleAdvertisingSet;
struct BleAdvertisingSetDefaultTypeInternal;
extern BleAdvertisingSetDefaultTypeInternal _BleAdvertisingSet_default_instance_;
class BleDeviceInfo;
struct BleDeviceInfoDefaultTypeInternal;
extern BleDeviceInfoDefaultTypeInternal _BleDeviceInfo_default_instance_;
class BleDirectReceived;
struct BleDirectReceivedDefaultTypeInternal;
extern BleDirectReceivedDefaultTypeInternal _BleDirectReceived_default_instance_;
class BleDirectSend;
struct BleDirectSendDefaultTypeInternal;
extern BleDirectSendDefaultTypeInternal _BleDirectSend_default_instance_;
class BleDirectSendResult;
struct BleDirectSendResultDefaultTypeInternal;
extern BleDirectSendResultDefaultTypeInternal _BleDirectSendResult_default_instance_;
class BleInfoRequest;
struct BleInfoRequestDefaultTypeInternal;
extern BleInfoRequestDefaultTypeInternal _BleInfoRequest_default_instance_;
class BleInfoResponse;
struct BleInfoResponseDefaultTypeInternal;
extern BleInfoResponseDefaultTypeInternal _BleInfoResponse_default_instance_;
class BleStartRequest;
struct BleStartRequestDefaultTypeInternal;
extern BleStartRequestDefaultTypeInternal _BleStartRequest_default_instance_;
class BleStartResult;
struct BleStartResultDefaultTypeInternal;
extern BleStartResultDefaultTypeInternal _BleStartResult_default_instance_;
}  // namespace ble
}  // namespace sys
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::sys::ble::Ble* Arena::CreateMaybeMessage<::qaul::sys::ble::Ble>(Arena*);
template<> ::qaul::sys::ble::BleAdvertisingReceived* Arena::CreateMaybeMessage<::qaul::sys::ble::BleAdvertisingReceived>(Arena*);
template<> ::qaul::sys::ble::BleAdvertisingSend* Arena::CreateMaybeMessage<::qaul::sys::ble::BleAdvertisingSend>(Arena*);
template<> ::qaul::sys::ble::BleAdvertisingSet* Arena::CreateMaybeMessage<::qaul::sys::ble::BleAdvertisingSet>(Arena*);
template<> ::qaul::sys::ble::BleDeviceInfo* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDeviceInfo>(Arena*);
template<> ::qaul::sys::ble::BleDirectReceived* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDirectReceived>(Arena*);
template<> ::qaul::sys::ble::BleDirectSend* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDirectSend>(Arena*);
template<> ::qaul::sys::ble::BleDirectSendResult* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDirectSendResult>(Arena*);
template<> ::qaul::sys::ble::BleInfoRequest* Arena::CreateMaybeMessage<::qaul::sys::ble::BleInfoRequest>(Arena*);
template<> ::qaul::sys::ble::BleInfoResponse* Arena::CreateMaybeMessage<::qaul::sys::ble::BleInfoResponse>(Arena*);
template<> ::qaul::sys::ble::BleStartRequest* Arena::CreateMaybeMessage<::qaul::sys::ble::BleStartRequest>(Arena*);
template<> ::qaul::sys::ble::BleStartResult* Arena::CreateMaybeMessage<::qaul::sys::ble::BleStartResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace sys {
namespace ble {

enum BleMode : int {
  legacy = 0,
  le_1m = 1,
  le_2m = 2,
  coded_2 = 3,
  coded_8 = 4,
  BleMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BleMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BleMode_IsValid(int value);
constexpr BleMode BleMode_MIN = legacy;
constexpr BleMode BleMode_MAX = coded_8;
constexpr int BleMode_ARRAYSIZE = BleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BleMode_descriptor();
template<typename T>
inline const std::string& BleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BleMode_descriptor(), enum_t_value);
}
inline bool BleMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BleMode>(
    BleMode_descriptor(), name, value);
}
// ===================================================================

class Ble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.Ble) */ {
 public:
  inline Ble() : Ble(nullptr) {}
  ~Ble() override;
  explicit constexpr Ble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ble(const Ble& from);
  Ble(Ble&& from) noexcept
    : Ble() {
    *this = ::std::move(from);
  }

  inline Ble& operator=(const Ble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ble& operator=(Ble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ble& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kInfoRequest = 1,
    kInfoResponse = 2,
    kStartRequest = 3,
    kStartResult = 4,
    kAdvertisingSet = 5,
    kAdvertisingSend = 6,
    kAdvertisingReceived = 7,
    kDirectSend = 8,
    kDirectReceived = 9,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Ble* internal_default_instance() {
    return reinterpret_cast<const Ble*>(
               &_Ble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ble& a, Ble& b) {
    a.Swap(&b);
  }
  inline void Swap(Ble* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ble>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ble& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ble& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ble* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.Ble";
  }
  protected:
  explicit Ble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoRequestFieldNumber = 1,
    kInfoResponseFieldNumber = 2,
    kStartRequestFieldNumber = 3,
    kStartResultFieldNumber = 4,
    kAdvertisingSetFieldNumber = 5,
    kAdvertisingSendFieldNumber = 6,
    kAdvertisingReceivedFieldNumber = 7,
    kDirectSendFieldNumber = 8,
    kDirectReceivedFieldNumber = 9,
  };
  // .qaul.sys.ble.BleInfoRequest info_request = 1;
  bool has_info_request() const;
  private:
  bool _internal_has_info_request() const;
  public:
  void clear_info_request();
  const ::qaul::sys::ble::BleInfoRequest& info_request() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleInfoRequest* release_info_request();
  ::qaul::sys::ble::BleInfoRequest* mutable_info_request();
  void set_allocated_info_request(::qaul::sys::ble::BleInfoRequest* info_request);
  private:
  const ::qaul::sys::ble::BleInfoRequest& _internal_info_request() const;
  ::qaul::sys::ble::BleInfoRequest* _internal_mutable_info_request();
  public:
  void unsafe_arena_set_allocated_info_request(
      ::qaul::sys::ble::BleInfoRequest* info_request);
  ::qaul::sys::ble::BleInfoRequest* unsafe_arena_release_info_request();

  // .qaul.sys.ble.BleInfoResponse info_response = 2;
  bool has_info_response() const;
  private:
  bool _internal_has_info_response() const;
  public:
  void clear_info_response();
  const ::qaul::sys::ble::BleInfoResponse& info_response() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleInfoResponse* release_info_response();
  ::qaul::sys::ble::BleInfoResponse* mutable_info_response();
  void set_allocated_info_response(::qaul::sys::ble::BleInfoResponse* info_response);
  private:
  const ::qaul::sys::ble::BleInfoResponse& _internal_info_response() const;
  ::qaul::sys::ble::BleInfoResponse* _internal_mutable_info_response();
  public:
  void unsafe_arena_set_allocated_info_response(
      ::qaul::sys::ble::BleInfoResponse* info_response);
  ::qaul::sys::ble::BleInfoResponse* unsafe_arena_release_info_response();

  // .qaul.sys.ble.BleStartRequest start_request = 3;
  bool has_start_request() const;
  private:
  bool _internal_has_start_request() const;
  public:
  void clear_start_request();
  const ::qaul::sys::ble::BleStartRequest& start_request() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleStartRequest* release_start_request();
  ::qaul::sys::ble::BleStartRequest* mutable_start_request();
  void set_allocated_start_request(::qaul::sys::ble::BleStartRequest* start_request);
  private:
  const ::qaul::sys::ble::BleStartRequest& _internal_start_request() const;
  ::qaul::sys::ble::BleStartRequest* _internal_mutable_start_request();
  public:
  void unsafe_arena_set_allocated_start_request(
      ::qaul::sys::ble::BleStartRequest* start_request);
  ::qaul::sys::ble::BleStartRequest* unsafe_arena_release_start_request();

  // .qaul.sys.ble.BleStartResult start_result = 4;
  bool has_start_result() const;
  private:
  bool _internal_has_start_result() const;
  public:
  void clear_start_result();
  const ::qaul::sys::ble::BleStartResult& start_result() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleStartResult* release_start_result();
  ::qaul::sys::ble::BleStartResult* mutable_start_result();
  void set_allocated_start_result(::qaul::sys::ble::BleStartResult* start_result);
  private:
  const ::qaul::sys::ble::BleStartResult& _internal_start_result() const;
  ::qaul::sys::ble::BleStartResult* _internal_mutable_start_result();
  public:
  void unsafe_arena_set_allocated_start_result(
      ::qaul::sys::ble::BleStartResult* start_result);
  ::qaul::sys::ble::BleStartResult* unsafe_arena_release_start_result();

  // .qaul.sys.ble.BleAdvertisingSet advertising_set = 5;
  bool has_advertising_set() const;
  private:
  bool _internal_has_advertising_set() const;
  public:
  void clear_advertising_set();
  const ::qaul::sys::ble::BleAdvertisingSet& advertising_set() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleAdvertisingSet* release_advertising_set();
  ::qaul::sys::ble::BleAdvertisingSet* mutable_advertising_set();
  void set_allocated_advertising_set(::qaul::sys::ble::BleAdvertisingSet* advertising_set);
  private:
  const ::qaul::sys::ble::BleAdvertisingSet& _internal_advertising_set() const;
  ::qaul::sys::ble::BleAdvertisingSet* _internal_mutable_advertising_set();
  public:
  void unsafe_arena_set_allocated_advertising_set(
      ::qaul::sys::ble::BleAdvertisingSet* advertising_set);
  ::qaul::sys::ble::BleAdvertisingSet* unsafe_arena_release_advertising_set();

  // .qaul.sys.ble.BleAdvertisingSend advertising_send = 6;
  bool has_advertising_send() const;
  private:
  bool _internal_has_advertising_send() const;
  public:
  void clear_advertising_send();
  const ::qaul::sys::ble::BleAdvertisingSend& advertising_send() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleAdvertisingSend* release_advertising_send();
  ::qaul::sys::ble::BleAdvertisingSend* mutable_advertising_send();
  void set_allocated_advertising_send(::qaul::sys::ble::BleAdvertisingSend* advertising_send);
  private:
  const ::qaul::sys::ble::BleAdvertisingSend& _internal_advertising_send() const;
  ::qaul::sys::ble::BleAdvertisingSend* _internal_mutable_advertising_send();
  public:
  void unsafe_arena_set_allocated_advertising_send(
      ::qaul::sys::ble::BleAdvertisingSend* advertising_send);
  ::qaul::sys::ble::BleAdvertisingSend* unsafe_arena_release_advertising_send();

  // .qaul.sys.ble.BleAdvertisingReceived advertising_received = 7;
  bool has_advertising_received() const;
  private:
  bool _internal_has_advertising_received() const;
  public:
  void clear_advertising_received();
  const ::qaul::sys::ble::BleAdvertisingReceived& advertising_received() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleAdvertisingReceived* release_advertising_received();
  ::qaul::sys::ble::BleAdvertisingReceived* mutable_advertising_received();
  void set_allocated_advertising_received(::qaul::sys::ble::BleAdvertisingReceived* advertising_received);
  private:
  const ::qaul::sys::ble::BleAdvertisingReceived& _internal_advertising_received() const;
  ::qaul::sys::ble::BleAdvertisingReceived* _internal_mutable_advertising_received();
  public:
  void unsafe_arena_set_allocated_advertising_received(
      ::qaul::sys::ble::BleAdvertisingReceived* advertising_received);
  ::qaul::sys::ble::BleAdvertisingReceived* unsafe_arena_release_advertising_received();

  // .qaul.sys.ble.BleDirectSend direct_send = 8;
  bool has_direct_send() const;
  private:
  bool _internal_has_direct_send() const;
  public:
  void clear_direct_send();
  const ::qaul::sys::ble::BleDirectSend& direct_send() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDirectSend* release_direct_send();
  ::qaul::sys::ble::BleDirectSend* mutable_direct_send();
  void set_allocated_direct_send(::qaul::sys::ble::BleDirectSend* direct_send);
  private:
  const ::qaul::sys::ble::BleDirectSend& _internal_direct_send() const;
  ::qaul::sys::ble::BleDirectSend* _internal_mutable_direct_send();
  public:
  void unsafe_arena_set_allocated_direct_send(
      ::qaul::sys::ble::BleDirectSend* direct_send);
  ::qaul::sys::ble::BleDirectSend* unsafe_arena_release_direct_send();

  // .qaul.sys.ble.BleDirectReceived direct_received = 9;
  bool has_direct_received() const;
  private:
  bool _internal_has_direct_received() const;
  public:
  void clear_direct_received();
  const ::qaul::sys::ble::BleDirectReceived& direct_received() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDirectReceived* release_direct_received();
  ::qaul::sys::ble::BleDirectReceived* mutable_direct_received();
  void set_allocated_direct_received(::qaul::sys::ble::BleDirectReceived* direct_received);
  private:
  const ::qaul::sys::ble::BleDirectReceived& _internal_direct_received() const;
  ::qaul::sys::ble::BleDirectReceived* _internal_mutable_direct_received();
  public:
  void unsafe_arena_set_allocated_direct_received(
      ::qaul::sys::ble::BleDirectReceived* direct_received);
  ::qaul::sys::ble::BleDirectReceived* unsafe_arena_release_direct_received();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.sys.ble.Ble)
 private:
  class _Internal;
  void set_has_info_request();
  void set_has_info_response();
  void set_has_start_request();
  void set_has_start_result();
  void set_has_advertising_set();
  void set_has_advertising_send();
  void set_has_advertising_received();
  void set_has_direct_send();
  void set_has_direct_received();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::qaul::sys::ble::BleInfoRequest* info_request_;
    ::qaul::sys::ble::BleInfoResponse* info_response_;
    ::qaul::sys::ble::BleStartRequest* start_request_;
    ::qaul::sys::ble::BleStartResult* start_result_;
    ::qaul::sys::ble::BleAdvertisingSet* advertising_set_;
    ::qaul::sys::ble::BleAdvertisingSend* advertising_send_;
    ::qaul::sys::ble::BleAdvertisingReceived* advertising_received_;
    ::qaul::sys::ble::BleDirectSend* direct_send_;
    ::qaul::sys::ble::BleDirectReceived* direct_received_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleInfoRequest) */ {
 public:
  inline BleInfoRequest() : BleInfoRequest(nullptr) {}
  explicit constexpr BleInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleInfoRequest(const BleInfoRequest& from);
  BleInfoRequest(BleInfoRequest&& from) noexcept
    : BleInfoRequest() {
    *this = ::std::move(from);
  }

  inline BleInfoRequest& operator=(const BleInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleInfoRequest& operator=(BleInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleInfoRequest* internal_default_instance() {
    return reinterpret_cast<const BleInfoRequest*>(
               &_BleInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BleInfoRequest& a, BleInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BleInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BleInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BleInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleInfoRequest";
  }
  protected:
  explicit BleInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleInfoResponse) */ {
 public:
  inline BleInfoResponse() : BleInfoResponse(nullptr) {}
  ~BleInfoResponse() override;
  explicit constexpr BleInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleInfoResponse(const BleInfoResponse& from);
  BleInfoResponse(BleInfoResponse&& from) noexcept
    : BleInfoResponse() {
    *this = ::std::move(from);
  }

  inline BleInfoResponse& operator=(const BleInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleInfoResponse& operator=(BleInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleInfoResponse* internal_default_instance() {
    return reinterpret_cast<const BleInfoResponse*>(
               &_BleInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BleInfoResponse& a, BleInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BleInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleInfoResponse";
  }
  protected:
  explicit BleInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // repeated .qaul.sys.ble.BleDeviceInfo device = 1;
  int device_size() const;
  private:
  int _internal_device_size() const;
  public:
  void clear_device();
  ::qaul::sys::ble::BleDeviceInfo* mutable_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::sys::ble::BleDeviceInfo >*
      mutable_device();
  private:
  const ::qaul::sys::ble::BleDeviceInfo& _internal_device(int index) const;
  ::qaul::sys::ble::BleDeviceInfo* _internal_add_device();
  public:
  const ::qaul::sys::ble::BleDeviceInfo& device(int index) const;
  ::qaul::sys::ble::BleDeviceInfo* add_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::sys::ble::BleDeviceInfo >&
      device() const;

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::sys::ble::BleDeviceInfo > device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDeviceInfo) */ {
 public:
  inline BleDeviceInfo() : BleDeviceInfo(nullptr) {}
  ~BleDeviceInfo() override;
  explicit constexpr BleDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDeviceInfo(const BleDeviceInfo& from);
  BleDeviceInfo(BleDeviceInfo&& from) noexcept
    : BleDeviceInfo() {
    *this = ::std::move(from);
  }

  inline BleDeviceInfo& operator=(const BleDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDeviceInfo& operator=(BleDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const BleDeviceInfo*>(
               &_BleDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BleDeviceInfo& a, BleDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleDeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDeviceInfo";
  }
  protected:
  explicit BleDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kPoweredFieldNumber = 3,
    kBleSupportFieldNumber = 4,
    kAdv251FieldNumber = 7,
    kAdvExtendedFieldNumber = 8,
    kAdvExtendedBytesFieldNumber = 9,
    kAdv1MFieldNumber = 10,
    kAdv2MFieldNumber = 11,
    kAdvCodedFieldNumber = 12,
    kLeAudioFieldNumber = 13,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool powered = 3;
  void clear_powered();
  bool powered() const;
  void set_powered(bool value);
  private:
  bool _internal_powered() const;
  void _internal_set_powered(bool value);
  public:

  // bool ble_support = 4;
  void clear_ble_support();
  bool ble_support() const;
  void set_ble_support(bool value);
  private:
  bool _internal_ble_support() const;
  void _internal_set_ble_support(bool value);
  public:

  // bool adv_251 = 7;
  void clear_adv_251();
  bool adv_251() const;
  void set_adv_251(bool value);
  private:
  bool _internal_adv_251() const;
  void _internal_set_adv_251(bool value);
  public:

  // bool adv_extended = 8;
  void clear_adv_extended();
  bool adv_extended() const;
  void set_adv_extended(bool value);
  private:
  bool _internal_adv_extended() const;
  void _internal_set_adv_extended(bool value);
  public:

  // uint32 adv_extended_bytes = 9;
  void clear_adv_extended_bytes();
  uint32_t adv_extended_bytes() const;
  void set_adv_extended_bytes(uint32_t value);
  private:
  uint32_t _internal_adv_extended_bytes() const;
  void _internal_set_adv_extended_bytes(uint32_t value);
  public:

  // bool adv_1m = 10;
  void clear_adv_1m();
  bool adv_1m() const;
  void set_adv_1m(bool value);
  private:
  bool _internal_adv_1m() const;
  void _internal_set_adv_1m(bool value);
  public:

  // bool adv_2m = 11;
  void clear_adv_2m();
  bool adv_2m() const;
  void set_adv_2m(bool value);
  private:
  bool _internal_adv_2m() const;
  void _internal_set_adv_2m(bool value);
  public:

  // bool adv_coded = 12;
  void clear_adv_coded();
  bool adv_coded() const;
  void set_adv_coded(bool value);
  private:
  bool _internal_adv_coded() const;
  void _internal_set_adv_coded(bool value);
  public:

  // bool le_audio = 13;
  void clear_le_audio();
  bool le_audio() const;
  void set_le_audio(bool value);
  private:
  bool _internal_le_audio() const;
  void _internal_set_le_audio(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool powered_;
  bool ble_support_;
  bool adv_251_;
  bool adv_extended_;
  uint32_t adv_extended_bytes_;
  bool adv_1m_;
  bool adv_2m_;
  bool adv_coded_;
  bool le_audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleStartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleStartRequest) */ {
 public:
  inline BleStartRequest() : BleStartRequest(nullptr) {}
  explicit constexpr BleStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleStartRequest(const BleStartRequest& from);
  BleStartRequest(BleStartRequest&& from) noexcept
    : BleStartRequest() {
    *this = ::std::move(from);
  }

  inline BleStartRequest& operator=(const BleStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleStartRequest& operator=(BleStartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleStartRequest* internal_default_instance() {
    return reinterpret_cast<const BleStartRequest*>(
               &_BleStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BleStartRequest& a, BleStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BleStartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleStartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BleStartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BleStartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleStartRequest";
  }
  protected:
  explicit BleStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleStartResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleStartResult) */ {
 public:
  inline BleStartResult() : BleStartResult(nullptr) {}
  ~BleStartResult() override;
  explicit constexpr BleStartResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleStartResult(const BleStartResult& from);
  BleStartResult(BleStartResult&& from) noexcept
    : BleStartResult() {
    *this = ::std::move(from);
  }

  inline BleStartResult& operator=(const BleStartResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleStartResult& operator=(BleStartResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleStartResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleStartResult* internal_default_instance() {
    return reinterpret_cast<const BleStartResult*>(
               &_BleStartResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BleStartResult& a, BleStartResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BleStartResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleStartResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleStartResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleStartResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleStartResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleStartResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleStartResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleStartResult";
  }
  protected:
  explicit BleStartResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kUnknonwErrorFieldNumber = 3,
    kNoRightsFieldNumber = 4,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool unknonw_error = 3;
  void clear_unknonw_error();
  bool unknonw_error() const;
  void set_unknonw_error(bool value);
  private:
  bool _internal_unknonw_error() const;
  void _internal_set_unknonw_error(bool value);
  public:

  // bool no_rights = 4;
  void clear_no_rights();
  bool no_rights() const;
  void set_no_rights(bool value);
  private:
  bool _internal_no_rights() const;
  void _internal_set_no_rights(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleStartResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  bool success_;
  bool unknonw_error_;
  bool no_rights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleAdvertisingSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleAdvertisingSet) */ {
 public:
  inline BleAdvertisingSet() : BleAdvertisingSet(nullptr) {}
  ~BleAdvertisingSet() override;
  explicit constexpr BleAdvertisingSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleAdvertisingSet(const BleAdvertisingSet& from);
  BleAdvertisingSet(BleAdvertisingSet&& from) noexcept
    : BleAdvertisingSet() {
    *this = ::std::move(from);
  }

  inline BleAdvertisingSet& operator=(const BleAdvertisingSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleAdvertisingSet& operator=(BleAdvertisingSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleAdvertisingSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleAdvertisingSet* internal_default_instance() {
    return reinterpret_cast<const BleAdvertisingSet*>(
               &_BleAdvertisingSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BleAdvertisingSet& a, BleAdvertisingSet& b) {
    a.Swap(&b);
  }
  inline void Swap(BleAdvertisingSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleAdvertisingSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleAdvertisingSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleAdvertisingSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleAdvertisingSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleAdvertisingSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleAdvertisingSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleAdvertisingSet";
  }
  protected:
  explicit BleAdvertisingSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleAdvertisingSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleAdvertisingSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleAdvertisingSend) */ {
 public:
  inline BleAdvertisingSend() : BleAdvertisingSend(nullptr) {}
  ~BleAdvertisingSend() override;
  explicit constexpr BleAdvertisingSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleAdvertisingSend(const BleAdvertisingSend& from);
  BleAdvertisingSend(BleAdvertisingSend&& from) noexcept
    : BleAdvertisingSend() {
    *this = ::std::move(from);
  }

  inline BleAdvertisingSend& operator=(const BleAdvertisingSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleAdvertisingSend& operator=(BleAdvertisingSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleAdvertisingSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleAdvertisingSend* internal_default_instance() {
    return reinterpret_cast<const BleAdvertisingSend*>(
               &_BleAdvertisingSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BleAdvertisingSend& a, BleAdvertisingSend& b) {
    a.Swap(&b);
  }
  inline void Swap(BleAdvertisingSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleAdvertisingSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleAdvertisingSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleAdvertisingSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleAdvertisingSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleAdvertisingSend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleAdvertisingSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleAdvertisingSend";
  }
  protected:
  explicit BleAdvertisingSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .qaul.sys.ble.BleMode mode = 1;
  void clear_mode();
  ::qaul::sys::ble::BleMode mode() const;
  void set_mode(::qaul::sys::ble::BleMode value);
  private:
  ::qaul::sys::ble::BleMode _internal_mode() const;
  void _internal_set_mode(::qaul::sys::ble::BleMode value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleAdvertisingSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleAdvertisingReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleAdvertisingReceived) */ {
 public:
  inline BleAdvertisingReceived() : BleAdvertisingReceived(nullptr) {}
  ~BleAdvertisingReceived() override;
  explicit constexpr BleAdvertisingReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleAdvertisingReceived(const BleAdvertisingReceived& from);
  BleAdvertisingReceived(BleAdvertisingReceived&& from) noexcept
    : BleAdvertisingReceived() {
    *this = ::std::move(from);
  }

  inline BleAdvertisingReceived& operator=(const BleAdvertisingReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleAdvertisingReceived& operator=(BleAdvertisingReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleAdvertisingReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleAdvertisingReceived* internal_default_instance() {
    return reinterpret_cast<const BleAdvertisingReceived*>(
               &_BleAdvertisingReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BleAdvertisingReceived& a, BleAdvertisingReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(BleAdvertisingReceived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleAdvertisingReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleAdvertisingReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleAdvertisingReceived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleAdvertisingReceived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleAdvertisingReceived& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleAdvertisingReceived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleAdvertisingReceived";
  }
  protected:
  explicit BleAdvertisingReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataFieldNumber = 4,
    kRssiFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 rssi = 2;
  void clear_rssi();
  int32_t rssi() const;
  void set_rssi(int32_t value);
  private:
  int32_t _internal_rssi() const;
  void _internal_set_rssi(int32_t value);
  public:

  // .qaul.sys.ble.BleMode mode = 3;
  void clear_mode();
  ::qaul::sys::ble::BleMode mode() const;
  void set_mode(::qaul::sys::ble::BleMode value);
  private:
  ::qaul::sys::ble::BleMode _internal_mode() const;
  void _internal_set_mode(::qaul::sys::ble::BleMode value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleAdvertisingReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t rssi_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDirectSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDirectSend) */ {
 public:
  inline BleDirectSend() : BleDirectSend(nullptr) {}
  ~BleDirectSend() override;
  explicit constexpr BleDirectSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDirectSend(const BleDirectSend& from);
  BleDirectSend(BleDirectSend&& from) noexcept
    : BleDirectSend() {
    *this = ::std::move(from);
  }

  inline BleDirectSend& operator=(const BleDirectSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDirectSend& operator=(BleDirectSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDirectSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDirectSend* internal_default_instance() {
    return reinterpret_cast<const BleDirectSend*>(
               &_BleDirectSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BleDirectSend& a, BleDirectSend& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDirectSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDirectSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDirectSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDirectSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDirectSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleDirectSend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDirectSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDirectSend";
  }
  protected:
  explicit BleDirectSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kToFieldNumber = 2,
    kDataFieldNumber = 4,
    kModeFieldNumber = 3,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .qaul.sys.ble.BleMode mode = 3;
  void clear_mode();
  ::qaul::sys::ble::BleMode mode() const;
  void set_mode(::qaul::sys::ble::BleMode value);
  private:
  ::qaul::sys::ble::BleMode _internal_mode() const;
  void _internal_set_mode(::qaul::sys::ble::BleMode value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDirectSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDirectSendResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDirectSendResult) */ {
 public:
  inline BleDirectSendResult() : BleDirectSendResult(nullptr) {}
  ~BleDirectSendResult() override;
  explicit constexpr BleDirectSendResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDirectSendResult(const BleDirectSendResult& from);
  BleDirectSendResult(BleDirectSendResult&& from) noexcept
    : BleDirectSendResult() {
    *this = ::std::move(from);
  }

  inline BleDirectSendResult& operator=(const BleDirectSendResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDirectSendResult& operator=(BleDirectSendResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDirectSendResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDirectSendResult* internal_default_instance() {
    return reinterpret_cast<const BleDirectSendResult*>(
               &_BleDirectSendResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BleDirectSendResult& a, BleDirectSendResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDirectSendResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDirectSendResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDirectSendResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDirectSendResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDirectSendResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleDirectSendResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDirectSendResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDirectSendResult";
  }
  protected:
  explicit BleDirectSendResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDirectSendResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDirectReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDirectReceived) */ {
 public:
  inline BleDirectReceived() : BleDirectReceived(nullptr) {}
  ~BleDirectReceived() override;
  explicit constexpr BleDirectReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDirectReceived(const BleDirectReceived& from);
  BleDirectReceived(BleDirectReceived&& from) noexcept
    : BleDirectReceived() {
    *this = ::std::move(from);
  }

  inline BleDirectReceived& operator=(const BleDirectReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDirectReceived& operator=(BleDirectReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDirectReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDirectReceived* internal_default_instance() {
    return reinterpret_cast<const BleDirectReceived*>(
               &_BleDirectReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BleDirectReceived& a, BleDirectReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDirectReceived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDirectReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDirectReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDirectReceived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDirectReceived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleDirectReceived& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDirectReceived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDirectReceived";
  }
  protected:
  explicit BleDirectReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kDataFieldNumber = 4,
    kRssiFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 rssi = 2;
  void clear_rssi();
  int32_t rssi() const;
  void set_rssi(int32_t value);
  private:
  int32_t _internal_rssi() const;
  void _internal_set_rssi(int32_t value);
  public:

  // .qaul.sys.ble.BleMode mode = 3;
  void clear_mode();
  ::qaul::sys::ble::BleMode mode() const;
  void set_mode(::qaul::sys::ble::BleMode value);
  private:
  ::qaul::sys::ble::BleMode _internal_mode() const;
  void _internal_set_mode(::qaul::sys::ble::BleMode value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDirectReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t rssi_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connections_2fble_2fmanager_2fble_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ble

// .qaul.sys.ble.BleInfoRequest info_request = 1;
inline bool Ble::_internal_has_info_request() const {
  return message_case() == kInfoRequest;
}
inline bool Ble::has_info_request() const {
  return _internal_has_info_request();
}
inline void Ble::set_has_info_request() {
  _oneof_case_[0] = kInfoRequest;
}
inline void Ble::clear_info_request() {
  if (_internal_has_info_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.info_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::release_info_request() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.info_request)
  if (_internal_has_info_request()) {
    clear_has_message();
      ::qaul::sys::ble::BleInfoRequest* temp = message_.info_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleInfoRequest& Ble::_internal_info_request() const {
  return _internal_has_info_request()
      ? *message_.info_request_
      : reinterpret_cast< ::qaul::sys::ble::BleInfoRequest&>(::qaul::sys::ble::_BleInfoRequest_default_instance_);
}
inline const ::qaul::sys::ble::BleInfoRequest& Ble::info_request() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.info_request)
  return _internal_info_request();
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::unsafe_arena_release_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.info_request)
  if (_internal_has_info_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleInfoRequest* temp = message_.info_request_;
    message_.info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_info_request(::qaul::sys::ble::BleInfoRequest* info_request) {
  clear_message();
  if (info_request) {
    set_has_info_request();
    message_.info_request_ = info_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.info_request)
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::_internal_mutable_info_request() {
  if (!_internal_has_info_request()) {
    clear_message();
    set_has_info_request();
    message_.info_request_ = CreateMaybeMessage< ::qaul::sys::ble::BleInfoRequest >(GetArenaForAllocation());
  }
  return message_.info_request_;
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::mutable_info_request() {
  ::qaul::sys::ble::BleInfoRequest* _msg = _internal_mutable_info_request();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.info_request)
  return _msg;
}

// .qaul.sys.ble.BleInfoResponse info_response = 2;
inline bool Ble::_internal_has_info_response() const {
  return message_case() == kInfoResponse;
}
inline bool Ble::has_info_response() const {
  return _internal_has_info_response();
}
inline void Ble::set_has_info_response() {
  _oneof_case_[0] = kInfoResponse;
}
inline void Ble::clear_info_response() {
  if (_internal_has_info_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.info_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::release_info_response() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.info_response)
  if (_internal_has_info_response()) {
    clear_has_message();
      ::qaul::sys::ble::BleInfoResponse* temp = message_.info_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleInfoResponse& Ble::_internal_info_response() const {
  return _internal_has_info_response()
      ? *message_.info_response_
      : reinterpret_cast< ::qaul::sys::ble::BleInfoResponse&>(::qaul::sys::ble::_BleInfoResponse_default_instance_);
}
inline const ::qaul::sys::ble::BleInfoResponse& Ble::info_response() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.info_response)
  return _internal_info_response();
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::unsafe_arena_release_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.info_response)
  if (_internal_has_info_response()) {
    clear_has_message();
    ::qaul::sys::ble::BleInfoResponse* temp = message_.info_response_;
    message_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_info_response(::qaul::sys::ble::BleInfoResponse* info_response) {
  clear_message();
  if (info_response) {
    set_has_info_response();
    message_.info_response_ = info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.info_response)
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::_internal_mutable_info_response() {
  if (!_internal_has_info_response()) {
    clear_message();
    set_has_info_response();
    message_.info_response_ = CreateMaybeMessage< ::qaul::sys::ble::BleInfoResponse >(GetArenaForAllocation());
  }
  return message_.info_response_;
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::mutable_info_response() {
  ::qaul::sys::ble::BleInfoResponse* _msg = _internal_mutable_info_response();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.info_response)
  return _msg;
}

// .qaul.sys.ble.BleStartRequest start_request = 3;
inline bool Ble::_internal_has_start_request() const {
  return message_case() == kStartRequest;
}
inline bool Ble::has_start_request() const {
  return _internal_has_start_request();
}
inline void Ble::set_has_start_request() {
  _oneof_case_[0] = kStartRequest;
}
inline void Ble::clear_start_request() {
  if (_internal_has_start_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.start_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleStartRequest* Ble::release_start_request() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.start_request)
  if (_internal_has_start_request()) {
    clear_has_message();
      ::qaul::sys::ble::BleStartRequest* temp = message_.start_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.start_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleStartRequest& Ble::_internal_start_request() const {
  return _internal_has_start_request()
      ? *message_.start_request_
      : reinterpret_cast< ::qaul::sys::ble::BleStartRequest&>(::qaul::sys::ble::_BleStartRequest_default_instance_);
}
inline const ::qaul::sys::ble::BleStartRequest& Ble::start_request() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.start_request)
  return _internal_start_request();
}
inline ::qaul::sys::ble::BleStartRequest* Ble::unsafe_arena_release_start_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.start_request)
  if (_internal_has_start_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleStartRequest* temp = message_.start_request_;
    message_.start_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_start_request(::qaul::sys::ble::BleStartRequest* start_request) {
  clear_message();
  if (start_request) {
    set_has_start_request();
    message_.start_request_ = start_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.start_request)
}
inline ::qaul::sys::ble::BleStartRequest* Ble::_internal_mutable_start_request() {
  if (!_internal_has_start_request()) {
    clear_message();
    set_has_start_request();
    message_.start_request_ = CreateMaybeMessage< ::qaul::sys::ble::BleStartRequest >(GetArenaForAllocation());
  }
  return message_.start_request_;
}
inline ::qaul::sys::ble::BleStartRequest* Ble::mutable_start_request() {
  ::qaul::sys::ble::BleStartRequest* _msg = _internal_mutable_start_request();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.start_request)
  return _msg;
}

// .qaul.sys.ble.BleStartResult start_result = 4;
inline bool Ble::_internal_has_start_result() const {
  return message_case() == kStartResult;
}
inline bool Ble::has_start_result() const {
  return _internal_has_start_result();
}
inline void Ble::set_has_start_result() {
  _oneof_case_[0] = kStartResult;
}
inline void Ble::clear_start_result() {
  if (_internal_has_start_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.start_result_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleStartResult* Ble::release_start_result() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.start_result)
  if (_internal_has_start_result()) {
    clear_has_message();
      ::qaul::sys::ble::BleStartResult* temp = message_.start_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.start_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleStartResult& Ble::_internal_start_result() const {
  return _internal_has_start_result()
      ? *message_.start_result_
      : reinterpret_cast< ::qaul::sys::ble::BleStartResult&>(::qaul::sys::ble::_BleStartResult_default_instance_);
}
inline const ::qaul::sys::ble::BleStartResult& Ble::start_result() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.start_result)
  return _internal_start_result();
}
inline ::qaul::sys::ble::BleStartResult* Ble::unsafe_arena_release_start_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.start_result)
  if (_internal_has_start_result()) {
    clear_has_message();
    ::qaul::sys::ble::BleStartResult* temp = message_.start_result_;
    message_.start_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_start_result(::qaul::sys::ble::BleStartResult* start_result) {
  clear_message();
  if (start_result) {
    set_has_start_result();
    message_.start_result_ = start_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.start_result)
}
inline ::qaul::sys::ble::BleStartResult* Ble::_internal_mutable_start_result() {
  if (!_internal_has_start_result()) {
    clear_message();
    set_has_start_result();
    message_.start_result_ = CreateMaybeMessage< ::qaul::sys::ble::BleStartResult >(GetArenaForAllocation());
  }
  return message_.start_result_;
}
inline ::qaul::sys::ble::BleStartResult* Ble::mutable_start_result() {
  ::qaul::sys::ble::BleStartResult* _msg = _internal_mutable_start_result();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.start_result)
  return _msg;
}

// .qaul.sys.ble.BleAdvertisingSet advertising_set = 5;
inline bool Ble::_internal_has_advertising_set() const {
  return message_case() == kAdvertisingSet;
}
inline bool Ble::has_advertising_set() const {
  return _internal_has_advertising_set();
}
inline void Ble::set_has_advertising_set() {
  _oneof_case_[0] = kAdvertisingSet;
}
inline void Ble::clear_advertising_set() {
  if (_internal_has_advertising_set()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.advertising_set_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleAdvertisingSet* Ble::release_advertising_set() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.advertising_set)
  if (_internal_has_advertising_set()) {
    clear_has_message();
      ::qaul::sys::ble::BleAdvertisingSet* temp = message_.advertising_set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.advertising_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleAdvertisingSet& Ble::_internal_advertising_set() const {
  return _internal_has_advertising_set()
      ? *message_.advertising_set_
      : reinterpret_cast< ::qaul::sys::ble::BleAdvertisingSet&>(::qaul::sys::ble::_BleAdvertisingSet_default_instance_);
}
inline const ::qaul::sys::ble::BleAdvertisingSet& Ble::advertising_set() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.advertising_set)
  return _internal_advertising_set();
}
inline ::qaul::sys::ble::BleAdvertisingSet* Ble::unsafe_arena_release_advertising_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.advertising_set)
  if (_internal_has_advertising_set()) {
    clear_has_message();
    ::qaul::sys::ble::BleAdvertisingSet* temp = message_.advertising_set_;
    message_.advertising_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_advertising_set(::qaul::sys::ble::BleAdvertisingSet* advertising_set) {
  clear_message();
  if (advertising_set) {
    set_has_advertising_set();
    message_.advertising_set_ = advertising_set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.advertising_set)
}
inline ::qaul::sys::ble::BleAdvertisingSet* Ble::_internal_mutable_advertising_set() {
  if (!_internal_has_advertising_set()) {
    clear_message();
    set_has_advertising_set();
    message_.advertising_set_ = CreateMaybeMessage< ::qaul::sys::ble::BleAdvertisingSet >(GetArenaForAllocation());
  }
  return message_.advertising_set_;
}
inline ::qaul::sys::ble::BleAdvertisingSet* Ble::mutable_advertising_set() {
  ::qaul::sys::ble::BleAdvertisingSet* _msg = _internal_mutable_advertising_set();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.advertising_set)
  return _msg;
}

// .qaul.sys.ble.BleAdvertisingSend advertising_send = 6;
inline bool Ble::_internal_has_advertising_send() const {
  return message_case() == kAdvertisingSend;
}
inline bool Ble::has_advertising_send() const {
  return _internal_has_advertising_send();
}
inline void Ble::set_has_advertising_send() {
  _oneof_case_[0] = kAdvertisingSend;
}
inline void Ble::clear_advertising_send() {
  if (_internal_has_advertising_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.advertising_send_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleAdvertisingSend* Ble::release_advertising_send() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.advertising_send)
  if (_internal_has_advertising_send()) {
    clear_has_message();
      ::qaul::sys::ble::BleAdvertisingSend* temp = message_.advertising_send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.advertising_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleAdvertisingSend& Ble::_internal_advertising_send() const {
  return _internal_has_advertising_send()
      ? *message_.advertising_send_
      : reinterpret_cast< ::qaul::sys::ble::BleAdvertisingSend&>(::qaul::sys::ble::_BleAdvertisingSend_default_instance_);
}
inline const ::qaul::sys::ble::BleAdvertisingSend& Ble::advertising_send() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.advertising_send)
  return _internal_advertising_send();
}
inline ::qaul::sys::ble::BleAdvertisingSend* Ble::unsafe_arena_release_advertising_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.advertising_send)
  if (_internal_has_advertising_send()) {
    clear_has_message();
    ::qaul::sys::ble::BleAdvertisingSend* temp = message_.advertising_send_;
    message_.advertising_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_advertising_send(::qaul::sys::ble::BleAdvertisingSend* advertising_send) {
  clear_message();
  if (advertising_send) {
    set_has_advertising_send();
    message_.advertising_send_ = advertising_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.advertising_send)
}
inline ::qaul::sys::ble::BleAdvertisingSend* Ble::_internal_mutable_advertising_send() {
  if (!_internal_has_advertising_send()) {
    clear_message();
    set_has_advertising_send();
    message_.advertising_send_ = CreateMaybeMessage< ::qaul::sys::ble::BleAdvertisingSend >(GetArenaForAllocation());
  }
  return message_.advertising_send_;
}
inline ::qaul::sys::ble::BleAdvertisingSend* Ble::mutable_advertising_send() {
  ::qaul::sys::ble::BleAdvertisingSend* _msg = _internal_mutable_advertising_send();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.advertising_send)
  return _msg;
}

// .qaul.sys.ble.BleAdvertisingReceived advertising_received = 7;
inline bool Ble::_internal_has_advertising_received() const {
  return message_case() == kAdvertisingReceived;
}
inline bool Ble::has_advertising_received() const {
  return _internal_has_advertising_received();
}
inline void Ble::set_has_advertising_received() {
  _oneof_case_[0] = kAdvertisingReceived;
}
inline void Ble::clear_advertising_received() {
  if (_internal_has_advertising_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.advertising_received_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleAdvertisingReceived* Ble::release_advertising_received() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.advertising_received)
  if (_internal_has_advertising_received()) {
    clear_has_message();
      ::qaul::sys::ble::BleAdvertisingReceived* temp = message_.advertising_received_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.advertising_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleAdvertisingReceived& Ble::_internal_advertising_received() const {
  return _internal_has_advertising_received()
      ? *message_.advertising_received_
      : reinterpret_cast< ::qaul::sys::ble::BleAdvertisingReceived&>(::qaul::sys::ble::_BleAdvertisingReceived_default_instance_);
}
inline const ::qaul::sys::ble::BleAdvertisingReceived& Ble::advertising_received() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.advertising_received)
  return _internal_advertising_received();
}
inline ::qaul::sys::ble::BleAdvertisingReceived* Ble::unsafe_arena_release_advertising_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.advertising_received)
  if (_internal_has_advertising_received()) {
    clear_has_message();
    ::qaul::sys::ble::BleAdvertisingReceived* temp = message_.advertising_received_;
    message_.advertising_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_advertising_received(::qaul::sys::ble::BleAdvertisingReceived* advertising_received) {
  clear_message();
  if (advertising_received) {
    set_has_advertising_received();
    message_.advertising_received_ = advertising_received;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.advertising_received)
}
inline ::qaul::sys::ble::BleAdvertisingReceived* Ble::_internal_mutable_advertising_received() {
  if (!_internal_has_advertising_received()) {
    clear_message();
    set_has_advertising_received();
    message_.advertising_received_ = CreateMaybeMessage< ::qaul::sys::ble::BleAdvertisingReceived >(GetArenaForAllocation());
  }
  return message_.advertising_received_;
}
inline ::qaul::sys::ble::BleAdvertisingReceived* Ble::mutable_advertising_received() {
  ::qaul::sys::ble::BleAdvertisingReceived* _msg = _internal_mutable_advertising_received();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.advertising_received)
  return _msg;
}

// .qaul.sys.ble.BleDirectSend direct_send = 8;
inline bool Ble::_internal_has_direct_send() const {
  return message_case() == kDirectSend;
}
inline bool Ble::has_direct_send() const {
  return _internal_has_direct_send();
}
inline void Ble::set_has_direct_send() {
  _oneof_case_[0] = kDirectSend;
}
inline void Ble::clear_direct_send() {
  if (_internal_has_direct_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.direct_send_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleDirectSend* Ble::release_direct_send() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.direct_send)
  if (_internal_has_direct_send()) {
    clear_has_message();
      ::qaul::sys::ble::BleDirectSend* temp = message_.direct_send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.direct_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleDirectSend& Ble::_internal_direct_send() const {
  return _internal_has_direct_send()
      ? *message_.direct_send_
      : reinterpret_cast< ::qaul::sys::ble::BleDirectSend&>(::qaul::sys::ble::_BleDirectSend_default_instance_);
}
inline const ::qaul::sys::ble::BleDirectSend& Ble::direct_send() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.direct_send)
  return _internal_direct_send();
}
inline ::qaul::sys::ble::BleDirectSend* Ble::unsafe_arena_release_direct_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.direct_send)
  if (_internal_has_direct_send()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectSend* temp = message_.direct_send_;
    message_.direct_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_direct_send(::qaul::sys::ble::BleDirectSend* direct_send) {
  clear_message();
  if (direct_send) {
    set_has_direct_send();
    message_.direct_send_ = direct_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.direct_send)
}
inline ::qaul::sys::ble::BleDirectSend* Ble::_internal_mutable_direct_send() {
  if (!_internal_has_direct_send()) {
    clear_message();
    set_has_direct_send();
    message_.direct_send_ = CreateMaybeMessage< ::qaul::sys::ble::BleDirectSend >(GetArenaForAllocation());
  }
  return message_.direct_send_;
}
inline ::qaul::sys::ble::BleDirectSend* Ble::mutable_direct_send() {
  ::qaul::sys::ble::BleDirectSend* _msg = _internal_mutable_direct_send();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.direct_send)
  return _msg;
}

// .qaul.sys.ble.BleDirectReceived direct_received = 9;
inline bool Ble::_internal_has_direct_received() const {
  return message_case() == kDirectReceived;
}
inline bool Ble::has_direct_received() const {
  return _internal_has_direct_received();
}
inline void Ble::set_has_direct_received() {
  _oneof_case_[0] = kDirectReceived;
}
inline void Ble::clear_direct_received() {
  if (_internal_has_direct_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.direct_received_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::release_direct_received() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.direct_received)
  if (_internal_has_direct_received()) {
    clear_has_message();
      ::qaul::sys::ble::BleDirectReceived* temp = message_.direct_received_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.direct_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleDirectReceived& Ble::_internal_direct_received() const {
  return _internal_has_direct_received()
      ? *message_.direct_received_
      : reinterpret_cast< ::qaul::sys::ble::BleDirectReceived&>(::qaul::sys::ble::_BleDirectReceived_default_instance_);
}
inline const ::qaul::sys::ble::BleDirectReceived& Ble::direct_received() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.direct_received)
  return _internal_direct_received();
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::unsafe_arena_release_direct_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.direct_received)
  if (_internal_has_direct_received()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectReceived* temp = message_.direct_received_;
    message_.direct_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_direct_received(::qaul::sys::ble::BleDirectReceived* direct_received) {
  clear_message();
  if (direct_received) {
    set_has_direct_received();
    message_.direct_received_ = direct_received;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.direct_received)
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::_internal_mutable_direct_received() {
  if (!_internal_has_direct_received()) {
    clear_message();
    set_has_direct_received();
    message_.direct_received_ = CreateMaybeMessage< ::qaul::sys::ble::BleDirectReceived >(GetArenaForAllocation());
  }
  return message_.direct_received_;
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::mutable_direct_received() {
  ::qaul::sys::ble::BleDirectReceived* _msg = _internal_mutable_direct_received();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.direct_received)
  return _msg;
}

inline bool Ble::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Ble::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Ble::MessageCase Ble::message_case() const {
  return Ble::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BleInfoRequest

// -------------------------------------------------------------------

// BleInfoResponse

// repeated .qaul.sys.ble.BleDeviceInfo device = 1;
inline int BleInfoResponse::_internal_device_size() const {
  return device_.size();
}
inline int BleInfoResponse::device_size() const {
  return _internal_device_size();
}
inline void BleInfoResponse::clear_device() {
  device_.Clear();
}
inline ::qaul::sys::ble::BleDeviceInfo* BleInfoResponse::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleInfoResponse.device)
  return device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::sys::ble::BleDeviceInfo >*
BleInfoResponse::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:qaul.sys.ble.BleInfoResponse.device)
  return &device_;
}
inline const ::qaul::sys::ble::BleDeviceInfo& BleInfoResponse::_internal_device(int index) const {
  return device_.Get(index);
}
inline const ::qaul::sys::ble::BleDeviceInfo& BleInfoResponse::device(int index) const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleInfoResponse.device)
  return _internal_device(index);
}
inline ::qaul::sys::ble::BleDeviceInfo* BleInfoResponse::_internal_add_device() {
  return device_.Add();
}
inline ::qaul::sys::ble::BleDeviceInfo* BleInfoResponse::add_device() {
  ::qaul::sys::ble::BleDeviceInfo* _add = _internal_add_device();
  // @@protoc_insertion_point(field_add:qaul.sys.ble.BleInfoResponse.device)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::sys::ble::BleDeviceInfo >&
BleInfoResponse::device() const {
  // @@protoc_insertion_point(field_list:qaul.sys.ble.BleInfoResponse.device)
  return device_;
}

// -------------------------------------------------------------------

// BleDeviceInfo

// string id = 1;
inline void BleDeviceInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BleDeviceInfo::id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDeviceInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.id)
}
inline std::string* BleDeviceInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDeviceInfo.id)
  return _s;
}
inline const std::string& BleDeviceInfo::_internal_id() const {
  return id_.Get();
}
inline void BleDeviceInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::release_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDeviceInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDeviceInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDeviceInfo.id)
}

// string name = 2;
inline void BleDeviceInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BleDeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDeviceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.name)
}
inline std::string* BleDeviceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDeviceInfo.name)
  return _s;
}
inline const std::string& BleDeviceInfo::_internal_name() const {
  return name_.Get();
}
inline void BleDeviceInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::release_name() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDeviceInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDeviceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDeviceInfo.name)
}

// bool powered = 3;
inline void BleDeviceInfo::clear_powered() {
  powered_ = false;
}
inline bool BleDeviceInfo::_internal_powered() const {
  return powered_;
}
inline bool BleDeviceInfo::powered() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.powered)
  return _internal_powered();
}
inline void BleDeviceInfo::_internal_set_powered(bool value) {
  
  powered_ = value;
}
inline void BleDeviceInfo::set_powered(bool value) {
  _internal_set_powered(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.powered)
}

// bool ble_support = 4;
inline void BleDeviceInfo::clear_ble_support() {
  ble_support_ = false;
}
inline bool BleDeviceInfo::_internal_ble_support() const {
  return ble_support_;
}
inline bool BleDeviceInfo::ble_support() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.ble_support)
  return _internal_ble_support();
}
inline void BleDeviceInfo::_internal_set_ble_support(bool value) {
  
  ble_support_ = value;
}
inline void BleDeviceInfo::set_ble_support(bool value) {
  _internal_set_ble_support(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.ble_support)
}

// bool adv_251 = 7;
inline void BleDeviceInfo::clear_adv_251() {
  adv_251_ = false;
}
inline bool BleDeviceInfo::_internal_adv_251() const {
  return adv_251_;
}
inline bool BleDeviceInfo::adv_251() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_251)
  return _internal_adv_251();
}
inline void BleDeviceInfo::_internal_set_adv_251(bool value) {
  
  adv_251_ = value;
}
inline void BleDeviceInfo::set_adv_251(bool value) {
  _internal_set_adv_251(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_251)
}

// bool adv_extended = 8;
inline void BleDeviceInfo::clear_adv_extended() {
  adv_extended_ = false;
}
inline bool BleDeviceInfo::_internal_adv_extended() const {
  return adv_extended_;
}
inline bool BleDeviceInfo::adv_extended() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_extended)
  return _internal_adv_extended();
}
inline void BleDeviceInfo::_internal_set_adv_extended(bool value) {
  
  adv_extended_ = value;
}
inline void BleDeviceInfo::set_adv_extended(bool value) {
  _internal_set_adv_extended(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_extended)
}

// uint32 adv_extended_bytes = 9;
inline void BleDeviceInfo::clear_adv_extended_bytes() {
  adv_extended_bytes_ = 0u;
}
inline uint32_t BleDeviceInfo::_internal_adv_extended_bytes() const {
  return adv_extended_bytes_;
}
inline uint32_t BleDeviceInfo::adv_extended_bytes() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_extended_bytes)
  return _internal_adv_extended_bytes();
}
inline void BleDeviceInfo::_internal_set_adv_extended_bytes(uint32_t value) {
  
  adv_extended_bytes_ = value;
}
inline void BleDeviceInfo::set_adv_extended_bytes(uint32_t value) {
  _internal_set_adv_extended_bytes(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_extended_bytes)
}

// bool adv_1m = 10;
inline void BleDeviceInfo::clear_adv_1m() {
  adv_1m_ = false;
}
inline bool BleDeviceInfo::_internal_adv_1m() const {
  return adv_1m_;
}
inline bool BleDeviceInfo::adv_1m() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_1m)
  return _internal_adv_1m();
}
inline void BleDeviceInfo::_internal_set_adv_1m(bool value) {
  
  adv_1m_ = value;
}
inline void BleDeviceInfo::set_adv_1m(bool value) {
  _internal_set_adv_1m(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_1m)
}

// bool adv_2m = 11;
inline void BleDeviceInfo::clear_adv_2m() {
  adv_2m_ = false;
}
inline bool BleDeviceInfo::_internal_adv_2m() const {
  return adv_2m_;
}
inline bool BleDeviceInfo::adv_2m() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_2m)
  return _internal_adv_2m();
}
inline void BleDeviceInfo::_internal_set_adv_2m(bool value) {
  
  adv_2m_ = value;
}
inline void BleDeviceInfo::set_adv_2m(bool value) {
  _internal_set_adv_2m(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_2m)
}

// bool adv_coded = 12;
inline void BleDeviceInfo::clear_adv_coded() {
  adv_coded_ = false;
}
inline bool BleDeviceInfo::_internal_adv_coded() const {
  return adv_coded_;
}
inline bool BleDeviceInfo::adv_coded() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_coded)
  return _internal_adv_coded();
}
inline void BleDeviceInfo::_internal_set_adv_coded(bool value) {
  
  adv_coded_ = value;
}
inline void BleDeviceInfo::set_adv_coded(bool value) {
  _internal_set_adv_coded(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_coded)
}

// bool le_audio = 13;
inline void BleDeviceInfo::clear_le_audio() {
  le_audio_ = false;
}
inline bool BleDeviceInfo::_internal_le_audio() const {
  return le_audio_;
}
inline bool BleDeviceInfo::le_audio() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.le_audio)
  return _internal_le_audio();
}
inline void BleDeviceInfo::_internal_set_le_audio(bool value) {
  
  le_audio_ = value;
}
inline void BleDeviceInfo::set_le_audio(bool value) {
  _internal_set_le_audio(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.le_audio)
}

// -------------------------------------------------------------------

// BleStartRequest

// -------------------------------------------------------------------

// BleStartResult

// bool success = 1;
inline void BleStartResult::clear_success() {
  success_ = false;
}
inline bool BleStartResult::_internal_success() const {
  return success_;
}
inline bool BleStartResult::success() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartResult.success)
  return _internal_success();
}
inline void BleStartResult::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void BleStartResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartResult.success)
}

// string error_message = 2;
inline void BleStartResult::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& BleStartResult::error_message() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartResult.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleStartResult::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartResult.error_message)
}
inline std::string* BleStartResult::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleStartResult.error_message)
  return _s;
}
inline const std::string& BleStartResult::_internal_error_message() const {
  return error_message_.Get();
}
inline void BleStartResult::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleStartResult::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleStartResult::release_error_message() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleStartResult.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleStartResult::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleStartResult.error_message)
}

// bool unknonw_error = 3;
inline void BleStartResult::clear_unknonw_error() {
  unknonw_error_ = false;
}
inline bool BleStartResult::_internal_unknonw_error() const {
  return unknonw_error_;
}
inline bool BleStartResult::unknonw_error() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartResult.unknonw_error)
  return _internal_unknonw_error();
}
inline void BleStartResult::_internal_set_unknonw_error(bool value) {
  
  unknonw_error_ = value;
}
inline void BleStartResult::set_unknonw_error(bool value) {
  _internal_set_unknonw_error(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartResult.unknonw_error)
}

// bool no_rights = 4;
inline void BleStartResult::clear_no_rights() {
  no_rights_ = false;
}
inline bool BleStartResult::_internal_no_rights() const {
  return no_rights_;
}
inline bool BleStartResult::no_rights() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartResult.no_rights)
  return _internal_no_rights();
}
inline void BleStartResult::_internal_set_no_rights(bool value) {
  
  no_rights_ = value;
}
inline void BleStartResult::set_no_rights(bool value) {
  _internal_set_no_rights(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartResult.no_rights)
}

// -------------------------------------------------------------------

// BleAdvertisingSet

// bytes data = 1;
inline void BleAdvertisingSet::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BleAdvertisingSet::data() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleAdvertisingSet.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleAdvertisingSet::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleAdvertisingSet.data)
}
inline std::string* BleAdvertisingSet::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleAdvertisingSet.data)
  return _s;
}
inline const std::string& BleAdvertisingSet::_internal_data() const {
  return data_.Get();
}
inline void BleAdvertisingSet::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleAdvertisingSet::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleAdvertisingSet::release_data() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleAdvertisingSet.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleAdvertisingSet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleAdvertisingSet.data)
}

// -------------------------------------------------------------------

// BleAdvertisingSend

// .qaul.sys.ble.BleMode mode = 1;
inline void BleAdvertisingSend::clear_mode() {
  mode_ = 0;
}
inline ::qaul::sys::ble::BleMode BleAdvertisingSend::_internal_mode() const {
  return static_cast< ::qaul::sys::ble::BleMode >(mode_);
}
inline ::qaul::sys::ble::BleMode BleAdvertisingSend::mode() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleAdvertisingSend.mode)
  return _internal_mode();
}
inline void BleAdvertisingSend::_internal_set_mode(::qaul::sys::ble::BleMode value) {
  
  mode_ = value;
}
inline void BleAdvertisingSend::set_mode(::qaul::sys::ble::BleMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleAdvertisingSend.mode)
}

// bytes data = 2;
inline void BleAdvertisingSend::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BleAdvertisingSend::data() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleAdvertisingSend.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleAdvertisingSend::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleAdvertisingSend.data)
}
inline std::string* BleAdvertisingSend::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleAdvertisingSend.data)
  return _s;
}
inline const std::string& BleAdvertisingSend::_internal_data() const {
  return data_.Get();
}
inline void BleAdvertisingSend::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleAdvertisingSend::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleAdvertisingSend::release_data() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleAdvertisingSend.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleAdvertisingSend::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleAdvertisingSend.data)
}

// -------------------------------------------------------------------

// BleAdvertisingReceived

// bytes id = 1;
inline void BleAdvertisingReceived::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BleAdvertisingReceived::id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleAdvertisingReceived.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleAdvertisingReceived::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleAdvertisingReceived.id)
}
inline std::string* BleAdvertisingReceived::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleAdvertisingReceived.id)
  return _s;
}
inline const std::string& BleAdvertisingReceived::_internal_id() const {
  return id_.Get();
}
inline void BleAdvertisingReceived::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleAdvertisingReceived::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleAdvertisingReceived::release_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleAdvertisingReceived.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleAdvertisingReceived::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleAdvertisingReceived.id)
}

// int32 rssi = 2;
inline void BleAdvertisingReceived::clear_rssi() {
  rssi_ = 0;
}
inline int32_t BleAdvertisingReceived::_internal_rssi() const {
  return rssi_;
}
inline int32_t BleAdvertisingReceived::rssi() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleAdvertisingReceived.rssi)
  return _internal_rssi();
}
inline void BleAdvertisingReceived::_internal_set_rssi(int32_t value) {
  
  rssi_ = value;
}
inline void BleAdvertisingReceived::set_rssi(int32_t value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleAdvertisingReceived.rssi)
}

// .qaul.sys.ble.BleMode mode = 3;
inline void BleAdvertisingReceived::clear_mode() {
  mode_ = 0;
}
inline ::qaul::sys::ble::BleMode BleAdvertisingReceived::_internal_mode() const {
  return static_cast< ::qaul::sys::ble::BleMode >(mode_);
}
inline ::qaul::sys::ble::BleMode BleAdvertisingReceived::mode() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleAdvertisingReceived.mode)
  return _internal_mode();
}
inline void BleAdvertisingReceived::_internal_set_mode(::qaul::sys::ble::BleMode value) {
  
  mode_ = value;
}
inline void BleAdvertisingReceived::set_mode(::qaul::sys::ble::BleMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleAdvertisingReceived.mode)
}

// bytes data = 4;
inline void BleAdvertisingReceived::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BleAdvertisingReceived::data() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleAdvertisingReceived.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleAdvertisingReceived::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleAdvertisingReceived.data)
}
inline std::string* BleAdvertisingReceived::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleAdvertisingReceived.data)
  return _s;
}
inline const std::string& BleAdvertisingReceived::_internal_data() const {
  return data_.Get();
}
inline void BleAdvertisingReceived::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleAdvertisingReceived::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleAdvertisingReceived::release_data() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleAdvertisingReceived.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleAdvertisingReceived::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleAdvertisingReceived.data)
}

// -------------------------------------------------------------------

// BleDirectSend

// bytes id = 1;
inline void BleDirectSend::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BleDirectSend::id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSend::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.id)
}
inline std::string* BleDirectSend::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSend.id)
  return _s;
}
inline const std::string& BleDirectSend::_internal_id() const {
  return id_.Get();
}
inline void BleDirectSend::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDirectSend::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDirectSend::release_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSend.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDirectSend::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSend.id)
}

// bytes to = 2;
inline void BleDirectSend::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& BleDirectSend::to() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSend::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.to)
}
inline std::string* BleDirectSend::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSend.to)
  return _s;
}
inline const std::string& BleDirectSend::_internal_to() const {
  return to_.Get();
}
inline void BleDirectSend::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDirectSend::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDirectSend::release_to() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSend.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDirectSend::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSend.to)
}

// .qaul.sys.ble.BleMode mode = 3;
inline void BleDirectSend::clear_mode() {
  mode_ = 0;
}
inline ::qaul::sys::ble::BleMode BleDirectSend::_internal_mode() const {
  return static_cast< ::qaul::sys::ble::BleMode >(mode_);
}
inline ::qaul::sys::ble::BleMode BleDirectSend::mode() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.mode)
  return _internal_mode();
}
inline void BleDirectSend::_internal_set_mode(::qaul::sys::ble::BleMode value) {
  
  mode_ = value;
}
inline void BleDirectSend::set_mode(::qaul::sys::ble::BleMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.mode)
}

// bytes data = 4;
inline void BleDirectSend::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BleDirectSend::data() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSend::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.data)
}
inline std::string* BleDirectSend::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSend.data)
  return _s;
}
inline const std::string& BleDirectSend::_internal_data() const {
  return data_.Get();
}
inline void BleDirectSend::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDirectSend::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDirectSend::release_data() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSend.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDirectSend::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSend.data)
}

// -------------------------------------------------------------------

// BleDirectSendResult

// bytes id = 1;
inline void BleDirectSendResult::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BleDirectSendResult::id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSendResult.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSendResult::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSendResult.id)
}
inline std::string* BleDirectSendResult::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSendResult.id)
  return _s;
}
inline const std::string& BleDirectSendResult::_internal_id() const {
  return id_.Get();
}
inline void BleDirectSendResult::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::release_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSendResult.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDirectSendResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSendResult.id)
}

// bool success = 2;
inline void BleDirectSendResult::clear_success() {
  success_ = false;
}
inline bool BleDirectSendResult::_internal_success() const {
  return success_;
}
inline bool BleDirectSendResult::success() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSendResult.success)
  return _internal_success();
}
inline void BleDirectSendResult::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void BleDirectSendResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSendResult.success)
}

// string error_message = 3;
inline void BleDirectSendResult::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& BleDirectSendResult::error_message() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSendResult.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSendResult::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSendResult.error_message)
}
inline std::string* BleDirectSendResult::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSendResult.error_message)
  return _s;
}
inline const std::string& BleDirectSendResult::_internal_error_message() const {
  return error_message_.Get();
}
inline void BleDirectSendResult::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::release_error_message() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSendResult.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDirectSendResult::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSendResult.error_message)
}

// -------------------------------------------------------------------

// BleDirectReceived

// bytes from = 1;
inline void BleDirectReceived::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& BleDirectReceived::from() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectReceived.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectReceived::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectReceived.from)
}
inline std::string* BleDirectReceived::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectReceived.from)
  return _s;
}
inline const std::string& BleDirectReceived::_internal_from() const {
  return from_.Get();
}
inline void BleDirectReceived::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDirectReceived::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDirectReceived::release_from() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectReceived.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDirectReceived::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectReceived.from)
}

// int32 rssi = 2;
inline void BleDirectReceived::clear_rssi() {
  rssi_ = 0;
}
inline int32_t BleDirectReceived::_internal_rssi() const {
  return rssi_;
}
inline int32_t BleDirectReceived::rssi() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectReceived.rssi)
  return _internal_rssi();
}
inline void BleDirectReceived::_internal_set_rssi(int32_t value) {
  
  rssi_ = value;
}
inline void BleDirectReceived::set_rssi(int32_t value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectReceived.rssi)
}

// .qaul.sys.ble.BleMode mode = 3;
inline void BleDirectReceived::clear_mode() {
  mode_ = 0;
}
inline ::qaul::sys::ble::BleMode BleDirectReceived::_internal_mode() const {
  return static_cast< ::qaul::sys::ble::BleMode >(mode_);
}
inline ::qaul::sys::ble::BleMode BleDirectReceived::mode() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectReceived.mode)
  return _internal_mode();
}
inline void BleDirectReceived::_internal_set_mode(::qaul::sys::ble::BleMode value) {
  
  mode_ = value;
}
inline void BleDirectReceived::set_mode(::qaul::sys::ble::BleMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectReceived.mode)
}

// bytes data = 4;
inline void BleDirectReceived::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BleDirectReceived::data() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectReceived.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectReceived::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectReceived.data)
}
inline std::string* BleDirectReceived::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectReceived.data)
  return _s;
}
inline const std::string& BleDirectReceived::_internal_data() const {
  return data_.Get();
}
inline void BleDirectReceived::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleDirectReceived::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleDirectReceived::release_data() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectReceived.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BleDirectReceived::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectReceived.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ble
}  // namespace sys
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::sys::ble::BleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::sys::ble::BleMode>() {
  return ::qaul::sys::ble::BleMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fmanager_2fble_2eproto
