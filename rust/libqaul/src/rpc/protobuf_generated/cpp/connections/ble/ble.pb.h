// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connections/ble/ble.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fble_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fble_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connections_2fble_2fble_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connections_2fble_2fble_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connections_2fble_2fble_2eproto;
namespace qaul {
namespace sys {
namespace ble {
class Ble;
struct BleDefaultTypeInternal;
extern BleDefaultTypeInternal _Ble_default_instance_;
class BleDeviceDiscovered;
struct BleDeviceDiscoveredDefaultTypeInternal;
extern BleDeviceDiscoveredDefaultTypeInternal _BleDeviceDiscovered_default_instance_;
class BleDeviceInfo;
struct BleDeviceInfoDefaultTypeInternal;
extern BleDeviceInfoDefaultTypeInternal _BleDeviceInfo_default_instance_;
class BleDeviceUnavailable;
struct BleDeviceUnavailableDefaultTypeInternal;
extern BleDeviceUnavailableDefaultTypeInternal _BleDeviceUnavailable_default_instance_;
class BleDirectReceived;
struct BleDirectReceivedDefaultTypeInternal;
extern BleDirectReceivedDefaultTypeInternal _BleDirectReceived_default_instance_;
class BleDirectSend;
struct BleDirectSendDefaultTypeInternal;
extern BleDirectSendDefaultTypeInternal _BleDirectSend_default_instance_;
class BleDirectSendResult;
struct BleDirectSendResultDefaultTypeInternal;
extern BleDirectSendResultDefaultTypeInternal _BleDirectSendResult_default_instance_;
class BleInfoRequest;
struct BleInfoRequestDefaultTypeInternal;
extern BleInfoRequestDefaultTypeInternal _BleInfoRequest_default_instance_;
class BleInfoResponse;
struct BleInfoResponseDefaultTypeInternal;
extern BleInfoResponseDefaultTypeInternal _BleInfoResponse_default_instance_;
class BleStartRequest;
struct BleStartRequestDefaultTypeInternal;
extern BleStartRequestDefaultTypeInternal _BleStartRequest_default_instance_;
class BleStartResult;
struct BleStartResultDefaultTypeInternal;
extern BleStartResultDefaultTypeInternal _BleStartResult_default_instance_;
class BleStopRequest;
struct BleStopRequestDefaultTypeInternal;
extern BleStopRequestDefaultTypeInternal _BleStopRequest_default_instance_;
class BleStopResult;
struct BleStopResultDefaultTypeInternal;
extern BleStopResultDefaultTypeInternal _BleStopResult_default_instance_;
}  // namespace ble
}  // namespace sys
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::sys::ble::Ble* Arena::CreateMaybeMessage<::qaul::sys::ble::Ble>(Arena*);
template<> ::qaul::sys::ble::BleDeviceDiscovered* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDeviceDiscovered>(Arena*);
template<> ::qaul::sys::ble::BleDeviceInfo* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDeviceInfo>(Arena*);
template<> ::qaul::sys::ble::BleDeviceUnavailable* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDeviceUnavailable>(Arena*);
template<> ::qaul::sys::ble::BleDirectReceived* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDirectReceived>(Arena*);
template<> ::qaul::sys::ble::BleDirectSend* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDirectSend>(Arena*);
template<> ::qaul::sys::ble::BleDirectSendResult* Arena::CreateMaybeMessage<::qaul::sys::ble::BleDirectSendResult>(Arena*);
template<> ::qaul::sys::ble::BleInfoRequest* Arena::CreateMaybeMessage<::qaul::sys::ble::BleInfoRequest>(Arena*);
template<> ::qaul::sys::ble::BleInfoResponse* Arena::CreateMaybeMessage<::qaul::sys::ble::BleInfoResponse>(Arena*);
template<> ::qaul::sys::ble::BleStartRequest* Arena::CreateMaybeMessage<::qaul::sys::ble::BleStartRequest>(Arena*);
template<> ::qaul::sys::ble::BleStartResult* Arena::CreateMaybeMessage<::qaul::sys::ble::BleStartResult>(Arena*);
template<> ::qaul::sys::ble::BleStopRequest* Arena::CreateMaybeMessage<::qaul::sys::ble::BleStopRequest>(Arena*);
template<> ::qaul::sys::ble::BleStopResult* Arena::CreateMaybeMessage<::qaul::sys::ble::BleStopResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace sys {
namespace ble {

enum BlePowerSetting : int {
  low_power = 0,
  balanced = 1,
  low_latency = 2,
  BlePowerSetting_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BlePowerSetting_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BlePowerSetting_IsValid(int value);
constexpr BlePowerSetting BlePowerSetting_MIN = low_power;
constexpr BlePowerSetting BlePowerSetting_MAX = low_latency;
constexpr int BlePowerSetting_ARRAYSIZE = BlePowerSetting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlePowerSetting_descriptor();
template<typename T>
inline const std::string& BlePowerSetting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlePowerSetting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlePowerSetting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlePowerSetting_descriptor(), enum_t_value);
}
inline bool BlePowerSetting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlePowerSetting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlePowerSetting>(
    BlePowerSetting_descriptor(), name, value);
}
enum BleError : int {
  UNKNOWN_ERROR = 0,
  RIGHTS_MISSING = 1,
  TIMEOUT = 2,
  BleError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BleError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BleError_IsValid(int value);
constexpr BleError BleError_MIN = UNKNOWN_ERROR;
constexpr BleError BleError_MAX = TIMEOUT;
constexpr int BleError_ARRAYSIZE = BleError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BleError_descriptor();
template<typename T>
inline const std::string& BleError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BleError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BleError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BleError_descriptor(), enum_t_value);
}
inline bool BleError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BleError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BleError>(
    BleError_descriptor(), name, value);
}
// ===================================================================

class Ble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.Ble) */ {
 public:
  inline Ble() : Ble(nullptr) {}
  ~Ble() override;
  explicit PROTOBUF_CONSTEXPR Ble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ble(const Ble& from);
  Ble(Ble&& from) noexcept
    : Ble() {
    *this = ::std::move(from);
  }

  inline Ble& operator=(const Ble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ble& operator=(Ble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ble& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kInfoRequest = 1,
    kInfoResponse = 2,
    kStartRequest = 3,
    kStartResult = 4,
    kStopRequest = 5,
    kStopResult = 6,
    kDeviceDiscovered = 7,
    kDeviceUnavailable = 8,
    kDirectSend = 9,
    kDirectSendResult = 10,
    kDirectReceived = 11,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Ble* internal_default_instance() {
    return reinterpret_cast<const Ble*>(
               &_Ble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ble& a, Ble& b) {
    a.Swap(&b);
  }
  inline void Swap(Ble* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ble>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ble& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ble& from) {
    Ble::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ble* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.Ble";
  }
  protected:
  explicit Ble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoRequestFieldNumber = 1,
    kInfoResponseFieldNumber = 2,
    kStartRequestFieldNumber = 3,
    kStartResultFieldNumber = 4,
    kStopRequestFieldNumber = 5,
    kStopResultFieldNumber = 6,
    kDeviceDiscoveredFieldNumber = 7,
    kDeviceUnavailableFieldNumber = 8,
    kDirectSendFieldNumber = 9,
    kDirectSendResultFieldNumber = 10,
    kDirectReceivedFieldNumber = 11,
  };
  // .qaul.sys.ble.BleInfoRequest info_request = 1;
  bool has_info_request() const;
  private:
  bool _internal_has_info_request() const;
  public:
  void clear_info_request();
  const ::qaul::sys::ble::BleInfoRequest& info_request() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleInfoRequest* release_info_request();
  ::qaul::sys::ble::BleInfoRequest* mutable_info_request();
  void set_allocated_info_request(::qaul::sys::ble::BleInfoRequest* info_request);
  private:
  const ::qaul::sys::ble::BleInfoRequest& _internal_info_request() const;
  ::qaul::sys::ble::BleInfoRequest* _internal_mutable_info_request();
  public:
  void unsafe_arena_set_allocated_info_request(
      ::qaul::sys::ble::BleInfoRequest* info_request);
  ::qaul::sys::ble::BleInfoRequest* unsafe_arena_release_info_request();

  // .qaul.sys.ble.BleInfoResponse info_response = 2;
  bool has_info_response() const;
  private:
  bool _internal_has_info_response() const;
  public:
  void clear_info_response();
  const ::qaul::sys::ble::BleInfoResponse& info_response() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleInfoResponse* release_info_response();
  ::qaul::sys::ble::BleInfoResponse* mutable_info_response();
  void set_allocated_info_response(::qaul::sys::ble::BleInfoResponse* info_response);
  private:
  const ::qaul::sys::ble::BleInfoResponse& _internal_info_response() const;
  ::qaul::sys::ble::BleInfoResponse* _internal_mutable_info_response();
  public:
  void unsafe_arena_set_allocated_info_response(
      ::qaul::sys::ble::BleInfoResponse* info_response);
  ::qaul::sys::ble::BleInfoResponse* unsafe_arena_release_info_response();

  // .qaul.sys.ble.BleStartRequest start_request = 3;
  bool has_start_request() const;
  private:
  bool _internal_has_start_request() const;
  public:
  void clear_start_request();
  const ::qaul::sys::ble::BleStartRequest& start_request() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleStartRequest* release_start_request();
  ::qaul::sys::ble::BleStartRequest* mutable_start_request();
  void set_allocated_start_request(::qaul::sys::ble::BleStartRequest* start_request);
  private:
  const ::qaul::sys::ble::BleStartRequest& _internal_start_request() const;
  ::qaul::sys::ble::BleStartRequest* _internal_mutable_start_request();
  public:
  void unsafe_arena_set_allocated_start_request(
      ::qaul::sys::ble::BleStartRequest* start_request);
  ::qaul::sys::ble::BleStartRequest* unsafe_arena_release_start_request();

  // .qaul.sys.ble.BleStartResult start_result = 4;
  bool has_start_result() const;
  private:
  bool _internal_has_start_result() const;
  public:
  void clear_start_result();
  const ::qaul::sys::ble::BleStartResult& start_result() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleStartResult* release_start_result();
  ::qaul::sys::ble::BleStartResult* mutable_start_result();
  void set_allocated_start_result(::qaul::sys::ble::BleStartResult* start_result);
  private:
  const ::qaul::sys::ble::BleStartResult& _internal_start_result() const;
  ::qaul::sys::ble::BleStartResult* _internal_mutable_start_result();
  public:
  void unsafe_arena_set_allocated_start_result(
      ::qaul::sys::ble::BleStartResult* start_result);
  ::qaul::sys::ble::BleStartResult* unsafe_arena_release_start_result();

  // .qaul.sys.ble.BleStopRequest stop_request = 5;
  bool has_stop_request() const;
  private:
  bool _internal_has_stop_request() const;
  public:
  void clear_stop_request();
  const ::qaul::sys::ble::BleStopRequest& stop_request() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleStopRequest* release_stop_request();
  ::qaul::sys::ble::BleStopRequest* mutable_stop_request();
  void set_allocated_stop_request(::qaul::sys::ble::BleStopRequest* stop_request);
  private:
  const ::qaul::sys::ble::BleStopRequest& _internal_stop_request() const;
  ::qaul::sys::ble::BleStopRequest* _internal_mutable_stop_request();
  public:
  void unsafe_arena_set_allocated_stop_request(
      ::qaul::sys::ble::BleStopRequest* stop_request);
  ::qaul::sys::ble::BleStopRequest* unsafe_arena_release_stop_request();

  // .qaul.sys.ble.BleStopResult stop_result = 6;
  bool has_stop_result() const;
  private:
  bool _internal_has_stop_result() const;
  public:
  void clear_stop_result();
  const ::qaul::sys::ble::BleStopResult& stop_result() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleStopResult* release_stop_result();
  ::qaul::sys::ble::BleStopResult* mutable_stop_result();
  void set_allocated_stop_result(::qaul::sys::ble::BleStopResult* stop_result);
  private:
  const ::qaul::sys::ble::BleStopResult& _internal_stop_result() const;
  ::qaul::sys::ble::BleStopResult* _internal_mutable_stop_result();
  public:
  void unsafe_arena_set_allocated_stop_result(
      ::qaul::sys::ble::BleStopResult* stop_result);
  ::qaul::sys::ble::BleStopResult* unsafe_arena_release_stop_result();

  // .qaul.sys.ble.BleDeviceDiscovered device_discovered = 7;
  bool has_device_discovered() const;
  private:
  bool _internal_has_device_discovered() const;
  public:
  void clear_device_discovered();
  const ::qaul::sys::ble::BleDeviceDiscovered& device_discovered() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDeviceDiscovered* release_device_discovered();
  ::qaul::sys::ble::BleDeviceDiscovered* mutable_device_discovered();
  void set_allocated_device_discovered(::qaul::sys::ble::BleDeviceDiscovered* device_discovered);
  private:
  const ::qaul::sys::ble::BleDeviceDiscovered& _internal_device_discovered() const;
  ::qaul::sys::ble::BleDeviceDiscovered* _internal_mutable_device_discovered();
  public:
  void unsafe_arena_set_allocated_device_discovered(
      ::qaul::sys::ble::BleDeviceDiscovered* device_discovered);
  ::qaul::sys::ble::BleDeviceDiscovered* unsafe_arena_release_device_discovered();

  // .qaul.sys.ble.BleDeviceUnavailable device_unavailable = 8;
  bool has_device_unavailable() const;
  private:
  bool _internal_has_device_unavailable() const;
  public:
  void clear_device_unavailable();
  const ::qaul::sys::ble::BleDeviceUnavailable& device_unavailable() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDeviceUnavailable* release_device_unavailable();
  ::qaul::sys::ble::BleDeviceUnavailable* mutable_device_unavailable();
  void set_allocated_device_unavailable(::qaul::sys::ble::BleDeviceUnavailable* device_unavailable);
  private:
  const ::qaul::sys::ble::BleDeviceUnavailable& _internal_device_unavailable() const;
  ::qaul::sys::ble::BleDeviceUnavailable* _internal_mutable_device_unavailable();
  public:
  void unsafe_arena_set_allocated_device_unavailable(
      ::qaul::sys::ble::BleDeviceUnavailable* device_unavailable);
  ::qaul::sys::ble::BleDeviceUnavailable* unsafe_arena_release_device_unavailable();

  // .qaul.sys.ble.BleDirectSend direct_send = 9;
  bool has_direct_send() const;
  private:
  bool _internal_has_direct_send() const;
  public:
  void clear_direct_send();
  const ::qaul::sys::ble::BleDirectSend& direct_send() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDirectSend* release_direct_send();
  ::qaul::sys::ble::BleDirectSend* mutable_direct_send();
  void set_allocated_direct_send(::qaul::sys::ble::BleDirectSend* direct_send);
  private:
  const ::qaul::sys::ble::BleDirectSend& _internal_direct_send() const;
  ::qaul::sys::ble::BleDirectSend* _internal_mutable_direct_send();
  public:
  void unsafe_arena_set_allocated_direct_send(
      ::qaul::sys::ble::BleDirectSend* direct_send);
  ::qaul::sys::ble::BleDirectSend* unsafe_arena_release_direct_send();

  // .qaul.sys.ble.BleDirectSendResult direct_send_result = 10;
  bool has_direct_send_result() const;
  private:
  bool _internal_has_direct_send_result() const;
  public:
  void clear_direct_send_result();
  const ::qaul::sys::ble::BleDirectSendResult& direct_send_result() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDirectSendResult* release_direct_send_result();
  ::qaul::sys::ble::BleDirectSendResult* mutable_direct_send_result();
  void set_allocated_direct_send_result(::qaul::sys::ble::BleDirectSendResult* direct_send_result);
  private:
  const ::qaul::sys::ble::BleDirectSendResult& _internal_direct_send_result() const;
  ::qaul::sys::ble::BleDirectSendResult* _internal_mutable_direct_send_result();
  public:
  void unsafe_arena_set_allocated_direct_send_result(
      ::qaul::sys::ble::BleDirectSendResult* direct_send_result);
  ::qaul::sys::ble::BleDirectSendResult* unsafe_arena_release_direct_send_result();

  // .qaul.sys.ble.BleDirectReceived direct_received = 11;
  bool has_direct_received() const;
  private:
  bool _internal_has_direct_received() const;
  public:
  void clear_direct_received();
  const ::qaul::sys::ble::BleDirectReceived& direct_received() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDirectReceived* release_direct_received();
  ::qaul::sys::ble::BleDirectReceived* mutable_direct_received();
  void set_allocated_direct_received(::qaul::sys::ble::BleDirectReceived* direct_received);
  private:
  const ::qaul::sys::ble::BleDirectReceived& _internal_direct_received() const;
  ::qaul::sys::ble::BleDirectReceived* _internal_mutable_direct_received();
  public:
  void unsafe_arena_set_allocated_direct_received(
      ::qaul::sys::ble::BleDirectReceived* direct_received);
  ::qaul::sys::ble::BleDirectReceived* unsafe_arena_release_direct_received();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.sys.ble.Ble)
 private:
  class _Internal;
  void set_has_info_request();
  void set_has_info_response();
  void set_has_start_request();
  void set_has_start_result();
  void set_has_stop_request();
  void set_has_stop_result();
  void set_has_device_discovered();
  void set_has_device_unavailable();
  void set_has_direct_send();
  void set_has_direct_send_result();
  void set_has_direct_received();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::sys::ble::BleInfoRequest* info_request_;
      ::qaul::sys::ble::BleInfoResponse* info_response_;
      ::qaul::sys::ble::BleStartRequest* start_request_;
      ::qaul::sys::ble::BleStartResult* start_result_;
      ::qaul::sys::ble::BleStopRequest* stop_request_;
      ::qaul::sys::ble::BleStopResult* stop_result_;
      ::qaul::sys::ble::BleDeviceDiscovered* device_discovered_;
      ::qaul::sys::ble::BleDeviceUnavailable* device_unavailable_;
      ::qaul::sys::ble::BleDirectSend* direct_send_;
      ::qaul::sys::ble::BleDirectSendResult* direct_send_result_;
      ::qaul::sys::ble::BleDirectReceived* direct_received_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleInfoRequest) */ {
 public:
  inline BleInfoRequest() : BleInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BleInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleInfoRequest(const BleInfoRequest& from);
  BleInfoRequest(BleInfoRequest&& from) noexcept
    : BleInfoRequest() {
    *this = ::std::move(from);
  }

  inline BleInfoRequest& operator=(const BleInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleInfoRequest& operator=(BleInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleInfoRequest* internal_default_instance() {
    return reinterpret_cast<const BleInfoRequest*>(
               &_BleInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BleInfoRequest& a, BleInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BleInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BleInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BleInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleInfoRequest";
  }
  protected:
  explicit BleInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleInfoResponse) */ {
 public:
  inline BleInfoResponse() : BleInfoResponse(nullptr) {}
  ~BleInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR BleInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleInfoResponse(const BleInfoResponse& from);
  BleInfoResponse(BleInfoResponse&& from) noexcept
    : BleInfoResponse() {
    *this = ::std::move(from);
  }

  inline BleInfoResponse& operator=(const BleInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleInfoResponse& operator=(BleInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleInfoResponse* internal_default_instance() {
    return reinterpret_cast<const BleInfoResponse*>(
               &_BleInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BleInfoResponse& a, BleInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BleInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleInfoResponse& from) {
    BleInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleInfoResponse";
  }
  protected:
  explicit BleInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .qaul.sys.ble.BleDeviceInfo device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::qaul::sys::ble::BleDeviceInfo& device() const;
  PROTOBUF_NODISCARD ::qaul::sys::ble::BleDeviceInfo* release_device();
  ::qaul::sys::ble::BleDeviceInfo* mutable_device();
  void set_allocated_device(::qaul::sys::ble::BleDeviceInfo* device);
  private:
  const ::qaul::sys::ble::BleDeviceInfo& _internal_device() const;
  ::qaul::sys::ble::BleDeviceInfo* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::qaul::sys::ble::BleDeviceInfo* device);
  ::qaul::sys::ble::BleDeviceInfo* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::qaul::sys::ble::BleDeviceInfo* device_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDeviceInfo) */ {
 public:
  inline BleDeviceInfo() : BleDeviceInfo(nullptr) {}
  ~BleDeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR BleDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDeviceInfo(const BleDeviceInfo& from);
  BleDeviceInfo(BleDeviceInfo&& from) noexcept
    : BleDeviceInfo() {
    *this = ::std::move(from);
  }

  inline BleDeviceInfo& operator=(const BleDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDeviceInfo& operator=(BleDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const BleDeviceInfo*>(
               &_BleDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BleDeviceInfo& a, BleDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleDeviceInfo& from) {
    BleDeviceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDeviceInfo";
  }
  protected:
  explicit BleDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kBleSupportFieldNumber = 1,
    kBluetoothOnFieldNumber = 4,
    kAdvExtendedFieldNumber = 5,
    kLe2MFieldNumber = 7,
    kAdvExtendedBytesFieldNumber = 6,
    kLeCodedFieldNumber = 8,
    kLeAudioFieldNumber = 9,
    kLePeriodicAdvSupportFieldNumber = 14,
    kLeMultipleAdvSupportFieldNumber = 15,
    kOffloadFilterSupportFieldNumber = 16,
    kOffloadScanBatchingSupportFieldNumber = 17,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool ble_support = 1;
  void clear_ble_support();
  bool ble_support() const;
  void set_ble_support(bool value);
  private:
  bool _internal_ble_support() const;
  void _internal_set_ble_support(bool value);
  public:

  // bool bluetooth_on = 4;
  void clear_bluetooth_on();
  bool bluetooth_on() const;
  void set_bluetooth_on(bool value);
  private:
  bool _internal_bluetooth_on() const;
  void _internal_set_bluetooth_on(bool value);
  public:

  // bool adv_extended = 5;
  void clear_adv_extended();
  bool adv_extended() const;
  void set_adv_extended(bool value);
  private:
  bool _internal_adv_extended() const;
  void _internal_set_adv_extended(bool value);
  public:

  // bool le_2m = 7;
  void clear_le_2m();
  bool le_2m() const;
  void set_le_2m(bool value);
  private:
  bool _internal_le_2m() const;
  void _internal_set_le_2m(bool value);
  public:

  // uint32 adv_extended_bytes = 6;
  void clear_adv_extended_bytes();
  uint32_t adv_extended_bytes() const;
  void set_adv_extended_bytes(uint32_t value);
  private:
  uint32_t _internal_adv_extended_bytes() const;
  void _internal_set_adv_extended_bytes(uint32_t value);
  public:

  // bool le_coded = 8;
  void clear_le_coded();
  bool le_coded() const;
  void set_le_coded(bool value);
  private:
  bool _internal_le_coded() const;
  void _internal_set_le_coded(bool value);
  public:

  // bool le_audio = 9;
  void clear_le_audio();
  bool le_audio() const;
  void set_le_audio(bool value);
  private:
  bool _internal_le_audio() const;
  void _internal_set_le_audio(bool value);
  public:

  // bool le_periodic_adv_support = 14;
  void clear_le_periodic_adv_support();
  bool le_periodic_adv_support() const;
  void set_le_periodic_adv_support(bool value);
  private:
  bool _internal_le_periodic_adv_support() const;
  void _internal_set_le_periodic_adv_support(bool value);
  public:

  // bool le_multiple_adv_support = 15;
  void clear_le_multiple_adv_support();
  bool le_multiple_adv_support() const;
  void set_le_multiple_adv_support(bool value);
  private:
  bool _internal_le_multiple_adv_support() const;
  void _internal_set_le_multiple_adv_support(bool value);
  public:

  // bool offload_filter_support = 16;
  void clear_offload_filter_support();
  bool offload_filter_support() const;
  void set_offload_filter_support(bool value);
  private:
  bool _internal_offload_filter_support() const;
  void _internal_set_offload_filter_support(bool value);
  public:

  // bool offload_scan_batching_support = 17;
  void clear_offload_scan_batching_support();
  bool offload_scan_batching_support() const;
  void set_offload_scan_batching_support(bool value);
  private:
  bool _internal_offload_scan_batching_support() const;
  void _internal_set_offload_scan_batching_support(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool ble_support_;
    bool bluetooth_on_;
    bool adv_extended_;
    bool le_2m_;
    uint32_t adv_extended_bytes_;
    bool le_coded_;
    bool le_audio_;
    bool le_periodic_adv_support_;
    bool le_multiple_adv_support_;
    bool offload_filter_support_;
    bool offload_scan_batching_support_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleStartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleStartRequest) */ {
 public:
  inline BleStartRequest() : BleStartRequest(nullptr) {}
  ~BleStartRequest() override;
  explicit PROTOBUF_CONSTEXPR BleStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleStartRequest(const BleStartRequest& from);
  BleStartRequest(BleStartRequest&& from) noexcept
    : BleStartRequest() {
    *this = ::std::move(from);
  }

  inline BleStartRequest& operator=(const BleStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleStartRequest& operator=(BleStartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleStartRequest* internal_default_instance() {
    return reinterpret_cast<const BleStartRequest*>(
               &_BleStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BleStartRequest& a, BleStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BleStartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleStartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleStartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleStartRequest& from) {
    BleStartRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleStartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleStartRequest";
  }
  protected:
  explicit BleStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQaulIdFieldNumber = 1,
    kPowerSettingFieldNumber = 2,
  };
  // bytes qaul_id = 1;
  void clear_qaul_id();
  const std::string& qaul_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qaul_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qaul_id();
  PROTOBUF_NODISCARD std::string* release_qaul_id();
  void set_allocated_qaul_id(std::string* qaul_id);
  private:
  const std::string& _internal_qaul_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qaul_id(const std::string& value);
  std::string* _internal_mutable_qaul_id();
  public:

  // .qaul.sys.ble.BlePowerSetting power_setting = 2;
  void clear_power_setting();
  ::qaul::sys::ble::BlePowerSetting power_setting() const;
  void set_power_setting(::qaul::sys::ble::BlePowerSetting value);
  private:
  ::qaul::sys::ble::BlePowerSetting _internal_power_setting() const;
  void _internal_set_power_setting(::qaul::sys::ble::BlePowerSetting value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qaul_id_;
    int power_setting_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleStartResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleStartResult) */ {
 public:
  inline BleStartResult() : BleStartResult(nullptr) {}
  ~BleStartResult() override;
  explicit PROTOBUF_CONSTEXPR BleStartResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleStartResult(const BleStartResult& from);
  BleStartResult(BleStartResult&& from) noexcept
    : BleStartResult() {
    *this = ::std::move(from);
  }

  inline BleStartResult& operator=(const BleStartResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleStartResult& operator=(BleStartResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleStartResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleStartResult* internal_default_instance() {
    return reinterpret_cast<const BleStartResult*>(
               &_BleStartResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BleStartResult& a, BleStartResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BleStartResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleStartResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleStartResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleStartResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleStartResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleStartResult& from) {
    BleStartResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleStartResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleStartResult";
  }
  protected:
  explicit BleStartResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorReasonFieldNumber = 2,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .qaul.sys.ble.BleError error_reason = 2;
  void clear_error_reason();
  ::qaul::sys::ble::BleError error_reason() const;
  void set_error_reason(::qaul::sys::ble::BleError value);
  private:
  ::qaul::sys::ble::BleError _internal_error_reason() const;
  void _internal_set_error_reason(::qaul::sys::ble::BleError value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleStartResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    int error_reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleStopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleStopRequest) */ {
 public:
  inline BleStopRequest() : BleStopRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BleStopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleStopRequest(const BleStopRequest& from);
  BleStopRequest(BleStopRequest&& from) noexcept
    : BleStopRequest() {
    *this = ::std::move(from);
  }

  inline BleStopRequest& operator=(const BleStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleStopRequest& operator=(BleStopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleStopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleStopRequest* internal_default_instance() {
    return reinterpret_cast<const BleStopRequest*>(
               &_BleStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BleStopRequest& a, BleStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BleStopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleStopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BleStopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BleStopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleStopRequest";
  }
  protected:
  explicit BleStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleStopResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleStopResult) */ {
 public:
  inline BleStopResult() : BleStopResult(nullptr) {}
  ~BleStopResult() override;
  explicit PROTOBUF_CONSTEXPR BleStopResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleStopResult(const BleStopResult& from);
  BleStopResult(BleStopResult&& from) noexcept
    : BleStopResult() {
    *this = ::std::move(from);
  }

  inline BleStopResult& operator=(const BleStopResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleStopResult& operator=(BleStopResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleStopResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleStopResult* internal_default_instance() {
    return reinterpret_cast<const BleStopResult*>(
               &_BleStopResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BleStopResult& a, BleStopResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BleStopResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleStopResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleStopResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleStopResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleStopResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleStopResult& from) {
    BleStopResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleStopResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleStopResult";
  }
  protected:
  explicit BleStopResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorReasonFieldNumber = 2,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .qaul.sys.ble.BleError error_reason = 2;
  void clear_error_reason();
  ::qaul::sys::ble::BleError error_reason() const;
  void set_error_reason(::qaul::sys::ble::BleError value);
  private:
  ::qaul::sys::ble::BleError _internal_error_reason() const;
  void _internal_set_error_reason(::qaul::sys::ble::BleError value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleStopResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    int error_reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDeviceDiscovered final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDeviceDiscovered) */ {
 public:
  inline BleDeviceDiscovered() : BleDeviceDiscovered(nullptr) {}
  ~BleDeviceDiscovered() override;
  explicit PROTOBUF_CONSTEXPR BleDeviceDiscovered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDeviceDiscovered(const BleDeviceDiscovered& from);
  BleDeviceDiscovered(BleDeviceDiscovered&& from) noexcept
    : BleDeviceDiscovered() {
    *this = ::std::move(from);
  }

  inline BleDeviceDiscovered& operator=(const BleDeviceDiscovered& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDeviceDiscovered& operator=(BleDeviceDiscovered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDeviceDiscovered& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDeviceDiscovered* internal_default_instance() {
    return reinterpret_cast<const BleDeviceDiscovered*>(
               &_BleDeviceDiscovered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BleDeviceDiscovered& a, BleDeviceDiscovered& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDeviceDiscovered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDeviceDiscovered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDeviceDiscovered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDeviceDiscovered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDeviceDiscovered& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleDeviceDiscovered& from) {
    BleDeviceDiscovered::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDeviceDiscovered* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDeviceDiscovered";
  }
  protected:
  explicit BleDeviceDiscovered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQaulIdFieldNumber = 1,
    kRssiFieldNumber = 2,
  };
  // bytes qaul_id = 1;
  void clear_qaul_id();
  const std::string& qaul_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qaul_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qaul_id();
  PROTOBUF_NODISCARD std::string* release_qaul_id();
  void set_allocated_qaul_id(std::string* qaul_id);
  private:
  const std::string& _internal_qaul_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qaul_id(const std::string& value);
  std::string* _internal_mutable_qaul_id();
  public:

  // int32 rssi = 2;
  void clear_rssi();
  int32_t rssi() const;
  void set_rssi(int32_t value);
  private:
  int32_t _internal_rssi() const;
  void _internal_set_rssi(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDeviceDiscovered)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qaul_id_;
    int32_t rssi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDeviceUnavailable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDeviceUnavailable) */ {
 public:
  inline BleDeviceUnavailable() : BleDeviceUnavailable(nullptr) {}
  ~BleDeviceUnavailable() override;
  explicit PROTOBUF_CONSTEXPR BleDeviceUnavailable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDeviceUnavailable(const BleDeviceUnavailable& from);
  BleDeviceUnavailable(BleDeviceUnavailable&& from) noexcept
    : BleDeviceUnavailable() {
    *this = ::std::move(from);
  }

  inline BleDeviceUnavailable& operator=(const BleDeviceUnavailable& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDeviceUnavailable& operator=(BleDeviceUnavailable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDeviceUnavailable& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDeviceUnavailable* internal_default_instance() {
    return reinterpret_cast<const BleDeviceUnavailable*>(
               &_BleDeviceUnavailable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BleDeviceUnavailable& a, BleDeviceUnavailable& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDeviceUnavailable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDeviceUnavailable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDeviceUnavailable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDeviceUnavailable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDeviceUnavailable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleDeviceUnavailable& from) {
    BleDeviceUnavailable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDeviceUnavailable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDeviceUnavailable";
  }
  protected:
  explicit BleDeviceUnavailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQaulIdFieldNumber = 1,
  };
  // bytes qaul_id = 1;
  void clear_qaul_id();
  const std::string& qaul_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qaul_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qaul_id();
  PROTOBUF_NODISCARD std::string* release_qaul_id();
  void set_allocated_qaul_id(std::string* qaul_id);
  private:
  const std::string& _internal_qaul_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qaul_id(const std::string& value);
  std::string* _internal_mutable_qaul_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDeviceUnavailable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qaul_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDirectSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDirectSend) */ {
 public:
  inline BleDirectSend() : BleDirectSend(nullptr) {}
  ~BleDirectSend() override;
  explicit PROTOBUF_CONSTEXPR BleDirectSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDirectSend(const BleDirectSend& from);
  BleDirectSend(BleDirectSend&& from) noexcept
    : BleDirectSend() {
    *this = ::std::move(from);
  }

  inline BleDirectSend& operator=(const BleDirectSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDirectSend& operator=(BleDirectSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDirectSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDirectSend* internal_default_instance() {
    return reinterpret_cast<const BleDirectSend*>(
               &_BleDirectSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BleDirectSend& a, BleDirectSend& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDirectSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDirectSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDirectSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDirectSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDirectSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleDirectSend& from) {
    BleDirectSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDirectSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDirectSend";
  }
  protected:
  explicit BleDirectSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kSenderIdFieldNumber = 3,
    kDataFieldNumber = 4,
  };
  // bytes message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bytes receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // bytes sender_id = 3;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDirectSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDirectSendResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDirectSendResult) */ {
 public:
  inline BleDirectSendResult() : BleDirectSendResult(nullptr) {}
  ~BleDirectSendResult() override;
  explicit PROTOBUF_CONSTEXPR BleDirectSendResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDirectSendResult(const BleDirectSendResult& from);
  BleDirectSendResult(BleDirectSendResult&& from) noexcept
    : BleDirectSendResult() {
    *this = ::std::move(from);
  }

  inline BleDirectSendResult& operator=(const BleDirectSendResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDirectSendResult& operator=(BleDirectSendResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDirectSendResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDirectSendResult* internal_default_instance() {
    return reinterpret_cast<const BleDirectSendResult*>(
               &_BleDirectSendResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BleDirectSendResult& a, BleDirectSendResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDirectSendResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDirectSendResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDirectSendResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDirectSendResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDirectSendResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleDirectSendResult& from) {
    BleDirectSendResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDirectSendResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDirectSendResult";
  }
  protected:
  explicit BleDirectSendResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDirectSendResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// -------------------------------------------------------------------

class BleDirectReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.sys.ble.BleDirectReceived) */ {
 public:
  inline BleDirectReceived() : BleDirectReceived(nullptr) {}
  ~BleDirectReceived() override;
  explicit PROTOBUF_CONSTEXPR BleDirectReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleDirectReceived(const BleDirectReceived& from);
  BleDirectReceived(BleDirectReceived&& from) noexcept
    : BleDirectReceived() {
    *this = ::std::move(from);
  }

  inline BleDirectReceived& operator=(const BleDirectReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleDirectReceived& operator=(BleDirectReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleDirectReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleDirectReceived* internal_default_instance() {
    return reinterpret_cast<const BleDirectReceived*>(
               &_BleDirectReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BleDirectReceived& a, BleDirectReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(BleDirectReceived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleDirectReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleDirectReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleDirectReceived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleDirectReceived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BleDirectReceived& from) {
    BleDirectReceived::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleDirectReceived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.sys.ble.BleDirectReceived";
  }
  protected:
  explicit BleDirectReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kDataFieldNumber = 4,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:qaul.sys.ble.BleDirectReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connections_2fble_2fble_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ble

// .qaul.sys.ble.BleInfoRequest info_request = 1;
inline bool Ble::_internal_has_info_request() const {
  return message_case() == kInfoRequest;
}
inline bool Ble::has_info_request() const {
  return _internal_has_info_request();
}
inline void Ble::set_has_info_request() {
  _impl_._oneof_case_[0] = kInfoRequest;
}
inline void Ble::clear_info_request() {
  if (_internal_has_info_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.info_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::release_info_request() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.info_request)
  if (_internal_has_info_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleInfoRequest* temp = _impl_.message_.info_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleInfoRequest& Ble::_internal_info_request() const {
  return _internal_has_info_request()
      ? *_impl_.message_.info_request_
      : reinterpret_cast< ::qaul::sys::ble::BleInfoRequest&>(::qaul::sys::ble::_BleInfoRequest_default_instance_);
}
inline const ::qaul::sys::ble::BleInfoRequest& Ble::info_request() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.info_request)
  return _internal_info_request();
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::unsafe_arena_release_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.info_request)
  if (_internal_has_info_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleInfoRequest* temp = _impl_.message_.info_request_;
    _impl_.message_.info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_info_request(::qaul::sys::ble::BleInfoRequest* info_request) {
  clear_message();
  if (info_request) {
    set_has_info_request();
    _impl_.message_.info_request_ = info_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.info_request)
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::_internal_mutable_info_request() {
  if (!_internal_has_info_request()) {
    clear_message();
    set_has_info_request();
    _impl_.message_.info_request_ = CreateMaybeMessage< ::qaul::sys::ble::BleInfoRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.info_request_;
}
inline ::qaul::sys::ble::BleInfoRequest* Ble::mutable_info_request() {
  ::qaul::sys::ble::BleInfoRequest* _msg = _internal_mutable_info_request();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.info_request)
  return _msg;
}

// .qaul.sys.ble.BleInfoResponse info_response = 2;
inline bool Ble::_internal_has_info_response() const {
  return message_case() == kInfoResponse;
}
inline bool Ble::has_info_response() const {
  return _internal_has_info_response();
}
inline void Ble::set_has_info_response() {
  _impl_._oneof_case_[0] = kInfoResponse;
}
inline void Ble::clear_info_response() {
  if (_internal_has_info_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.info_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::release_info_response() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.info_response)
  if (_internal_has_info_response()) {
    clear_has_message();
    ::qaul::sys::ble::BleInfoResponse* temp = _impl_.message_.info_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleInfoResponse& Ble::_internal_info_response() const {
  return _internal_has_info_response()
      ? *_impl_.message_.info_response_
      : reinterpret_cast< ::qaul::sys::ble::BleInfoResponse&>(::qaul::sys::ble::_BleInfoResponse_default_instance_);
}
inline const ::qaul::sys::ble::BleInfoResponse& Ble::info_response() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.info_response)
  return _internal_info_response();
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::unsafe_arena_release_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.info_response)
  if (_internal_has_info_response()) {
    clear_has_message();
    ::qaul::sys::ble::BleInfoResponse* temp = _impl_.message_.info_response_;
    _impl_.message_.info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_info_response(::qaul::sys::ble::BleInfoResponse* info_response) {
  clear_message();
  if (info_response) {
    set_has_info_response();
    _impl_.message_.info_response_ = info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.info_response)
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::_internal_mutable_info_response() {
  if (!_internal_has_info_response()) {
    clear_message();
    set_has_info_response();
    _impl_.message_.info_response_ = CreateMaybeMessage< ::qaul::sys::ble::BleInfoResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.info_response_;
}
inline ::qaul::sys::ble::BleInfoResponse* Ble::mutable_info_response() {
  ::qaul::sys::ble::BleInfoResponse* _msg = _internal_mutable_info_response();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.info_response)
  return _msg;
}

// .qaul.sys.ble.BleStartRequest start_request = 3;
inline bool Ble::_internal_has_start_request() const {
  return message_case() == kStartRequest;
}
inline bool Ble::has_start_request() const {
  return _internal_has_start_request();
}
inline void Ble::set_has_start_request() {
  _impl_._oneof_case_[0] = kStartRequest;
}
inline void Ble::clear_start_request() {
  if (_internal_has_start_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.start_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleStartRequest* Ble::release_start_request() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.start_request)
  if (_internal_has_start_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleStartRequest* temp = _impl_.message_.start_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.start_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleStartRequest& Ble::_internal_start_request() const {
  return _internal_has_start_request()
      ? *_impl_.message_.start_request_
      : reinterpret_cast< ::qaul::sys::ble::BleStartRequest&>(::qaul::sys::ble::_BleStartRequest_default_instance_);
}
inline const ::qaul::sys::ble::BleStartRequest& Ble::start_request() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.start_request)
  return _internal_start_request();
}
inline ::qaul::sys::ble::BleStartRequest* Ble::unsafe_arena_release_start_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.start_request)
  if (_internal_has_start_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleStartRequest* temp = _impl_.message_.start_request_;
    _impl_.message_.start_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_start_request(::qaul::sys::ble::BleStartRequest* start_request) {
  clear_message();
  if (start_request) {
    set_has_start_request();
    _impl_.message_.start_request_ = start_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.start_request)
}
inline ::qaul::sys::ble::BleStartRequest* Ble::_internal_mutable_start_request() {
  if (!_internal_has_start_request()) {
    clear_message();
    set_has_start_request();
    _impl_.message_.start_request_ = CreateMaybeMessage< ::qaul::sys::ble::BleStartRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.start_request_;
}
inline ::qaul::sys::ble::BleStartRequest* Ble::mutable_start_request() {
  ::qaul::sys::ble::BleStartRequest* _msg = _internal_mutable_start_request();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.start_request)
  return _msg;
}

// .qaul.sys.ble.BleStartResult start_result = 4;
inline bool Ble::_internal_has_start_result() const {
  return message_case() == kStartResult;
}
inline bool Ble::has_start_result() const {
  return _internal_has_start_result();
}
inline void Ble::set_has_start_result() {
  _impl_._oneof_case_[0] = kStartResult;
}
inline void Ble::clear_start_result() {
  if (_internal_has_start_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.start_result_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleStartResult* Ble::release_start_result() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.start_result)
  if (_internal_has_start_result()) {
    clear_has_message();
    ::qaul::sys::ble::BleStartResult* temp = _impl_.message_.start_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.start_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleStartResult& Ble::_internal_start_result() const {
  return _internal_has_start_result()
      ? *_impl_.message_.start_result_
      : reinterpret_cast< ::qaul::sys::ble::BleStartResult&>(::qaul::sys::ble::_BleStartResult_default_instance_);
}
inline const ::qaul::sys::ble::BleStartResult& Ble::start_result() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.start_result)
  return _internal_start_result();
}
inline ::qaul::sys::ble::BleStartResult* Ble::unsafe_arena_release_start_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.start_result)
  if (_internal_has_start_result()) {
    clear_has_message();
    ::qaul::sys::ble::BleStartResult* temp = _impl_.message_.start_result_;
    _impl_.message_.start_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_start_result(::qaul::sys::ble::BleStartResult* start_result) {
  clear_message();
  if (start_result) {
    set_has_start_result();
    _impl_.message_.start_result_ = start_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.start_result)
}
inline ::qaul::sys::ble::BleStartResult* Ble::_internal_mutable_start_result() {
  if (!_internal_has_start_result()) {
    clear_message();
    set_has_start_result();
    _impl_.message_.start_result_ = CreateMaybeMessage< ::qaul::sys::ble::BleStartResult >(GetArenaForAllocation());
  }
  return _impl_.message_.start_result_;
}
inline ::qaul::sys::ble::BleStartResult* Ble::mutable_start_result() {
  ::qaul::sys::ble::BleStartResult* _msg = _internal_mutable_start_result();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.start_result)
  return _msg;
}

// .qaul.sys.ble.BleStopRequest stop_request = 5;
inline bool Ble::_internal_has_stop_request() const {
  return message_case() == kStopRequest;
}
inline bool Ble::has_stop_request() const {
  return _internal_has_stop_request();
}
inline void Ble::set_has_stop_request() {
  _impl_._oneof_case_[0] = kStopRequest;
}
inline void Ble::clear_stop_request() {
  if (_internal_has_stop_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.stop_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleStopRequest* Ble::release_stop_request() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleStopRequest* temp = _impl_.message_.stop_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleStopRequest& Ble::_internal_stop_request() const {
  return _internal_has_stop_request()
      ? *_impl_.message_.stop_request_
      : reinterpret_cast< ::qaul::sys::ble::BleStopRequest&>(::qaul::sys::ble::_BleStopRequest_default_instance_);
}
inline const ::qaul::sys::ble::BleStopRequest& Ble::stop_request() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.stop_request)
  return _internal_stop_request();
}
inline ::qaul::sys::ble::BleStopRequest* Ble::unsafe_arena_release_stop_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.stop_request)
  if (_internal_has_stop_request()) {
    clear_has_message();
    ::qaul::sys::ble::BleStopRequest* temp = _impl_.message_.stop_request_;
    _impl_.message_.stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_stop_request(::qaul::sys::ble::BleStopRequest* stop_request) {
  clear_message();
  if (stop_request) {
    set_has_stop_request();
    _impl_.message_.stop_request_ = stop_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.stop_request)
}
inline ::qaul::sys::ble::BleStopRequest* Ble::_internal_mutable_stop_request() {
  if (!_internal_has_stop_request()) {
    clear_message();
    set_has_stop_request();
    _impl_.message_.stop_request_ = CreateMaybeMessage< ::qaul::sys::ble::BleStopRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.stop_request_;
}
inline ::qaul::sys::ble::BleStopRequest* Ble::mutable_stop_request() {
  ::qaul::sys::ble::BleStopRequest* _msg = _internal_mutable_stop_request();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.stop_request)
  return _msg;
}

// .qaul.sys.ble.BleStopResult stop_result = 6;
inline bool Ble::_internal_has_stop_result() const {
  return message_case() == kStopResult;
}
inline bool Ble::has_stop_result() const {
  return _internal_has_stop_result();
}
inline void Ble::set_has_stop_result() {
  _impl_._oneof_case_[0] = kStopResult;
}
inline void Ble::clear_stop_result() {
  if (_internal_has_stop_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.stop_result_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleStopResult* Ble::release_stop_result() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.stop_result)
  if (_internal_has_stop_result()) {
    clear_has_message();
    ::qaul::sys::ble::BleStopResult* temp = _impl_.message_.stop_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.stop_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleStopResult& Ble::_internal_stop_result() const {
  return _internal_has_stop_result()
      ? *_impl_.message_.stop_result_
      : reinterpret_cast< ::qaul::sys::ble::BleStopResult&>(::qaul::sys::ble::_BleStopResult_default_instance_);
}
inline const ::qaul::sys::ble::BleStopResult& Ble::stop_result() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.stop_result)
  return _internal_stop_result();
}
inline ::qaul::sys::ble::BleStopResult* Ble::unsafe_arena_release_stop_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.stop_result)
  if (_internal_has_stop_result()) {
    clear_has_message();
    ::qaul::sys::ble::BleStopResult* temp = _impl_.message_.stop_result_;
    _impl_.message_.stop_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_stop_result(::qaul::sys::ble::BleStopResult* stop_result) {
  clear_message();
  if (stop_result) {
    set_has_stop_result();
    _impl_.message_.stop_result_ = stop_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.stop_result)
}
inline ::qaul::sys::ble::BleStopResult* Ble::_internal_mutable_stop_result() {
  if (!_internal_has_stop_result()) {
    clear_message();
    set_has_stop_result();
    _impl_.message_.stop_result_ = CreateMaybeMessage< ::qaul::sys::ble::BleStopResult >(GetArenaForAllocation());
  }
  return _impl_.message_.stop_result_;
}
inline ::qaul::sys::ble::BleStopResult* Ble::mutable_stop_result() {
  ::qaul::sys::ble::BleStopResult* _msg = _internal_mutable_stop_result();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.stop_result)
  return _msg;
}

// .qaul.sys.ble.BleDeviceDiscovered device_discovered = 7;
inline bool Ble::_internal_has_device_discovered() const {
  return message_case() == kDeviceDiscovered;
}
inline bool Ble::has_device_discovered() const {
  return _internal_has_device_discovered();
}
inline void Ble::set_has_device_discovered() {
  _impl_._oneof_case_[0] = kDeviceDiscovered;
}
inline void Ble::clear_device_discovered() {
  if (_internal_has_device_discovered()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.device_discovered_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleDeviceDiscovered* Ble::release_device_discovered() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.device_discovered)
  if (_internal_has_device_discovered()) {
    clear_has_message();
    ::qaul::sys::ble::BleDeviceDiscovered* temp = _impl_.message_.device_discovered_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.device_discovered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleDeviceDiscovered& Ble::_internal_device_discovered() const {
  return _internal_has_device_discovered()
      ? *_impl_.message_.device_discovered_
      : reinterpret_cast< ::qaul::sys::ble::BleDeviceDiscovered&>(::qaul::sys::ble::_BleDeviceDiscovered_default_instance_);
}
inline const ::qaul::sys::ble::BleDeviceDiscovered& Ble::device_discovered() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.device_discovered)
  return _internal_device_discovered();
}
inline ::qaul::sys::ble::BleDeviceDiscovered* Ble::unsafe_arena_release_device_discovered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.device_discovered)
  if (_internal_has_device_discovered()) {
    clear_has_message();
    ::qaul::sys::ble::BleDeviceDiscovered* temp = _impl_.message_.device_discovered_;
    _impl_.message_.device_discovered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_device_discovered(::qaul::sys::ble::BleDeviceDiscovered* device_discovered) {
  clear_message();
  if (device_discovered) {
    set_has_device_discovered();
    _impl_.message_.device_discovered_ = device_discovered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.device_discovered)
}
inline ::qaul::sys::ble::BleDeviceDiscovered* Ble::_internal_mutable_device_discovered() {
  if (!_internal_has_device_discovered()) {
    clear_message();
    set_has_device_discovered();
    _impl_.message_.device_discovered_ = CreateMaybeMessage< ::qaul::sys::ble::BleDeviceDiscovered >(GetArenaForAllocation());
  }
  return _impl_.message_.device_discovered_;
}
inline ::qaul::sys::ble::BleDeviceDiscovered* Ble::mutable_device_discovered() {
  ::qaul::sys::ble::BleDeviceDiscovered* _msg = _internal_mutable_device_discovered();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.device_discovered)
  return _msg;
}

// .qaul.sys.ble.BleDeviceUnavailable device_unavailable = 8;
inline bool Ble::_internal_has_device_unavailable() const {
  return message_case() == kDeviceUnavailable;
}
inline bool Ble::has_device_unavailable() const {
  return _internal_has_device_unavailable();
}
inline void Ble::set_has_device_unavailable() {
  _impl_._oneof_case_[0] = kDeviceUnavailable;
}
inline void Ble::clear_device_unavailable() {
  if (_internal_has_device_unavailable()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.device_unavailable_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleDeviceUnavailable* Ble::release_device_unavailable() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.device_unavailable)
  if (_internal_has_device_unavailable()) {
    clear_has_message();
    ::qaul::sys::ble::BleDeviceUnavailable* temp = _impl_.message_.device_unavailable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.device_unavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleDeviceUnavailable& Ble::_internal_device_unavailable() const {
  return _internal_has_device_unavailable()
      ? *_impl_.message_.device_unavailable_
      : reinterpret_cast< ::qaul::sys::ble::BleDeviceUnavailable&>(::qaul::sys::ble::_BleDeviceUnavailable_default_instance_);
}
inline const ::qaul::sys::ble::BleDeviceUnavailable& Ble::device_unavailable() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.device_unavailable)
  return _internal_device_unavailable();
}
inline ::qaul::sys::ble::BleDeviceUnavailable* Ble::unsafe_arena_release_device_unavailable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.device_unavailable)
  if (_internal_has_device_unavailable()) {
    clear_has_message();
    ::qaul::sys::ble::BleDeviceUnavailable* temp = _impl_.message_.device_unavailable_;
    _impl_.message_.device_unavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_device_unavailable(::qaul::sys::ble::BleDeviceUnavailable* device_unavailable) {
  clear_message();
  if (device_unavailable) {
    set_has_device_unavailable();
    _impl_.message_.device_unavailable_ = device_unavailable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.device_unavailable)
}
inline ::qaul::sys::ble::BleDeviceUnavailable* Ble::_internal_mutable_device_unavailable() {
  if (!_internal_has_device_unavailable()) {
    clear_message();
    set_has_device_unavailable();
    _impl_.message_.device_unavailable_ = CreateMaybeMessage< ::qaul::sys::ble::BleDeviceUnavailable >(GetArenaForAllocation());
  }
  return _impl_.message_.device_unavailable_;
}
inline ::qaul::sys::ble::BleDeviceUnavailable* Ble::mutable_device_unavailable() {
  ::qaul::sys::ble::BleDeviceUnavailable* _msg = _internal_mutable_device_unavailable();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.device_unavailable)
  return _msg;
}

// .qaul.sys.ble.BleDirectSend direct_send = 9;
inline bool Ble::_internal_has_direct_send() const {
  return message_case() == kDirectSend;
}
inline bool Ble::has_direct_send() const {
  return _internal_has_direct_send();
}
inline void Ble::set_has_direct_send() {
  _impl_._oneof_case_[0] = kDirectSend;
}
inline void Ble::clear_direct_send() {
  if (_internal_has_direct_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.direct_send_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleDirectSend* Ble::release_direct_send() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.direct_send)
  if (_internal_has_direct_send()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectSend* temp = _impl_.message_.direct_send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.direct_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleDirectSend& Ble::_internal_direct_send() const {
  return _internal_has_direct_send()
      ? *_impl_.message_.direct_send_
      : reinterpret_cast< ::qaul::sys::ble::BleDirectSend&>(::qaul::sys::ble::_BleDirectSend_default_instance_);
}
inline const ::qaul::sys::ble::BleDirectSend& Ble::direct_send() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.direct_send)
  return _internal_direct_send();
}
inline ::qaul::sys::ble::BleDirectSend* Ble::unsafe_arena_release_direct_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.direct_send)
  if (_internal_has_direct_send()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectSend* temp = _impl_.message_.direct_send_;
    _impl_.message_.direct_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_direct_send(::qaul::sys::ble::BleDirectSend* direct_send) {
  clear_message();
  if (direct_send) {
    set_has_direct_send();
    _impl_.message_.direct_send_ = direct_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.direct_send)
}
inline ::qaul::sys::ble::BleDirectSend* Ble::_internal_mutable_direct_send() {
  if (!_internal_has_direct_send()) {
    clear_message();
    set_has_direct_send();
    _impl_.message_.direct_send_ = CreateMaybeMessage< ::qaul::sys::ble::BleDirectSend >(GetArenaForAllocation());
  }
  return _impl_.message_.direct_send_;
}
inline ::qaul::sys::ble::BleDirectSend* Ble::mutable_direct_send() {
  ::qaul::sys::ble::BleDirectSend* _msg = _internal_mutable_direct_send();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.direct_send)
  return _msg;
}

// .qaul.sys.ble.BleDirectSendResult direct_send_result = 10;
inline bool Ble::_internal_has_direct_send_result() const {
  return message_case() == kDirectSendResult;
}
inline bool Ble::has_direct_send_result() const {
  return _internal_has_direct_send_result();
}
inline void Ble::set_has_direct_send_result() {
  _impl_._oneof_case_[0] = kDirectSendResult;
}
inline void Ble::clear_direct_send_result() {
  if (_internal_has_direct_send_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.direct_send_result_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleDirectSendResult* Ble::release_direct_send_result() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.direct_send_result)
  if (_internal_has_direct_send_result()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectSendResult* temp = _impl_.message_.direct_send_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.direct_send_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleDirectSendResult& Ble::_internal_direct_send_result() const {
  return _internal_has_direct_send_result()
      ? *_impl_.message_.direct_send_result_
      : reinterpret_cast< ::qaul::sys::ble::BleDirectSendResult&>(::qaul::sys::ble::_BleDirectSendResult_default_instance_);
}
inline const ::qaul::sys::ble::BleDirectSendResult& Ble::direct_send_result() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.direct_send_result)
  return _internal_direct_send_result();
}
inline ::qaul::sys::ble::BleDirectSendResult* Ble::unsafe_arena_release_direct_send_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.direct_send_result)
  if (_internal_has_direct_send_result()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectSendResult* temp = _impl_.message_.direct_send_result_;
    _impl_.message_.direct_send_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_direct_send_result(::qaul::sys::ble::BleDirectSendResult* direct_send_result) {
  clear_message();
  if (direct_send_result) {
    set_has_direct_send_result();
    _impl_.message_.direct_send_result_ = direct_send_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.direct_send_result)
}
inline ::qaul::sys::ble::BleDirectSendResult* Ble::_internal_mutable_direct_send_result() {
  if (!_internal_has_direct_send_result()) {
    clear_message();
    set_has_direct_send_result();
    _impl_.message_.direct_send_result_ = CreateMaybeMessage< ::qaul::sys::ble::BleDirectSendResult >(GetArenaForAllocation());
  }
  return _impl_.message_.direct_send_result_;
}
inline ::qaul::sys::ble::BleDirectSendResult* Ble::mutable_direct_send_result() {
  ::qaul::sys::ble::BleDirectSendResult* _msg = _internal_mutable_direct_send_result();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.direct_send_result)
  return _msg;
}

// .qaul.sys.ble.BleDirectReceived direct_received = 11;
inline bool Ble::_internal_has_direct_received() const {
  return message_case() == kDirectReceived;
}
inline bool Ble::has_direct_received() const {
  return _internal_has_direct_received();
}
inline void Ble::set_has_direct_received() {
  _impl_._oneof_case_[0] = kDirectReceived;
}
inline void Ble::clear_direct_received() {
  if (_internal_has_direct_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.direct_received_;
    }
    clear_has_message();
  }
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::release_direct_received() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.Ble.direct_received)
  if (_internal_has_direct_received()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectReceived* temp = _impl_.message_.direct_received_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.direct_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::sys::ble::BleDirectReceived& Ble::_internal_direct_received() const {
  return _internal_has_direct_received()
      ? *_impl_.message_.direct_received_
      : reinterpret_cast< ::qaul::sys::ble::BleDirectReceived&>(::qaul::sys::ble::_BleDirectReceived_default_instance_);
}
inline const ::qaul::sys::ble::BleDirectReceived& Ble::direct_received() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.Ble.direct_received)
  return _internal_direct_received();
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::unsafe_arena_release_direct_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.sys.ble.Ble.direct_received)
  if (_internal_has_direct_received()) {
    clear_has_message();
    ::qaul::sys::ble::BleDirectReceived* temp = _impl_.message_.direct_received_;
    _impl_.message_.direct_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Ble::unsafe_arena_set_allocated_direct_received(::qaul::sys::ble::BleDirectReceived* direct_received) {
  clear_message();
  if (direct_received) {
    set_has_direct_received();
    _impl_.message_.direct_received_ = direct_received;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.Ble.direct_received)
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::_internal_mutable_direct_received() {
  if (!_internal_has_direct_received()) {
    clear_message();
    set_has_direct_received();
    _impl_.message_.direct_received_ = CreateMaybeMessage< ::qaul::sys::ble::BleDirectReceived >(GetArenaForAllocation());
  }
  return _impl_.message_.direct_received_;
}
inline ::qaul::sys::ble::BleDirectReceived* Ble::mutable_direct_received() {
  ::qaul::sys::ble::BleDirectReceived* _msg = _internal_mutable_direct_received();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.Ble.direct_received)
  return _msg;
}

inline bool Ble::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Ble::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Ble::MessageCase Ble::message_case() const {
  return Ble::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BleInfoRequest

// -------------------------------------------------------------------

// BleInfoResponse

// .qaul.sys.ble.BleDeviceInfo device = 1;
inline bool BleInfoResponse::_internal_has_device() const {
  return this != internal_default_instance() && _impl_.device_ != nullptr;
}
inline bool BleInfoResponse::has_device() const {
  return _internal_has_device();
}
inline void BleInfoResponse::clear_device() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
}
inline const ::qaul::sys::ble::BleDeviceInfo& BleInfoResponse::_internal_device() const {
  const ::qaul::sys::ble::BleDeviceInfo* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::sys::ble::BleDeviceInfo&>(
      ::qaul::sys::ble::_BleDeviceInfo_default_instance_);
}
inline const ::qaul::sys::ble::BleDeviceInfo& BleInfoResponse::device() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleInfoResponse.device)
  return _internal_device();
}
inline void BleInfoResponse::unsafe_arena_set_allocated_device(
    ::qaul::sys::ble::BleDeviceInfo* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.sys.ble.BleInfoResponse.device)
}
inline ::qaul::sys::ble::BleDeviceInfo* BleInfoResponse::release_device() {
  
  ::qaul::sys::ble::BleDeviceInfo* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::sys::ble::BleDeviceInfo* BleInfoResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleInfoResponse.device)
  
  ::qaul::sys::ble::BleDeviceInfo* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::qaul::sys::ble::BleDeviceInfo* BleInfoResponse::_internal_mutable_device() {
  
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::sys::ble::BleDeviceInfo>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::qaul::sys::ble::BleDeviceInfo* BleInfoResponse::mutable_device() {
  ::qaul::sys::ble::BleDeviceInfo* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleInfoResponse.device)
  return _msg;
}
inline void BleInfoResponse::set_allocated_device(::qaul::sys::ble::BleDeviceInfo* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleInfoResponse.device)
}

// -------------------------------------------------------------------

// BleDeviceInfo

// bool ble_support = 1;
inline void BleDeviceInfo::clear_ble_support() {
  _impl_.ble_support_ = false;
}
inline bool BleDeviceInfo::_internal_ble_support() const {
  return _impl_.ble_support_;
}
inline bool BleDeviceInfo::ble_support() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.ble_support)
  return _internal_ble_support();
}
inline void BleDeviceInfo::_internal_set_ble_support(bool value) {
  
  _impl_.ble_support_ = value;
}
inline void BleDeviceInfo::set_ble_support(bool value) {
  _internal_set_ble_support(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.ble_support)
}

// string id = 2;
inline void BleDeviceInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BleDeviceInfo::id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDeviceInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.id)
}
inline std::string* BleDeviceInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDeviceInfo.id)
  return _s;
}
inline const std::string& BleDeviceInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BleDeviceInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::release_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDeviceInfo.id)
  return _impl_.id_.Release();
}
inline void BleDeviceInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDeviceInfo.id)
}

// string name = 3;
inline void BleDeviceInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BleDeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDeviceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.name)
}
inline std::string* BleDeviceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDeviceInfo.name)
  return _s;
}
inline const std::string& BleDeviceInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BleDeviceInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDeviceInfo::release_name() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDeviceInfo.name)
  return _impl_.name_.Release();
}
inline void BleDeviceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDeviceInfo.name)
}

// bool bluetooth_on = 4;
inline void BleDeviceInfo::clear_bluetooth_on() {
  _impl_.bluetooth_on_ = false;
}
inline bool BleDeviceInfo::_internal_bluetooth_on() const {
  return _impl_.bluetooth_on_;
}
inline bool BleDeviceInfo::bluetooth_on() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.bluetooth_on)
  return _internal_bluetooth_on();
}
inline void BleDeviceInfo::_internal_set_bluetooth_on(bool value) {
  
  _impl_.bluetooth_on_ = value;
}
inline void BleDeviceInfo::set_bluetooth_on(bool value) {
  _internal_set_bluetooth_on(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.bluetooth_on)
}

// bool adv_extended = 5;
inline void BleDeviceInfo::clear_adv_extended() {
  _impl_.adv_extended_ = false;
}
inline bool BleDeviceInfo::_internal_adv_extended() const {
  return _impl_.adv_extended_;
}
inline bool BleDeviceInfo::adv_extended() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_extended)
  return _internal_adv_extended();
}
inline void BleDeviceInfo::_internal_set_adv_extended(bool value) {
  
  _impl_.adv_extended_ = value;
}
inline void BleDeviceInfo::set_adv_extended(bool value) {
  _internal_set_adv_extended(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_extended)
}

// uint32 adv_extended_bytes = 6;
inline void BleDeviceInfo::clear_adv_extended_bytes() {
  _impl_.adv_extended_bytes_ = 0u;
}
inline uint32_t BleDeviceInfo::_internal_adv_extended_bytes() const {
  return _impl_.adv_extended_bytes_;
}
inline uint32_t BleDeviceInfo::adv_extended_bytes() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.adv_extended_bytes)
  return _internal_adv_extended_bytes();
}
inline void BleDeviceInfo::_internal_set_adv_extended_bytes(uint32_t value) {
  
  _impl_.adv_extended_bytes_ = value;
}
inline void BleDeviceInfo::set_adv_extended_bytes(uint32_t value) {
  _internal_set_adv_extended_bytes(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.adv_extended_bytes)
}

// bool le_2m = 7;
inline void BleDeviceInfo::clear_le_2m() {
  _impl_.le_2m_ = false;
}
inline bool BleDeviceInfo::_internal_le_2m() const {
  return _impl_.le_2m_;
}
inline bool BleDeviceInfo::le_2m() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.le_2m)
  return _internal_le_2m();
}
inline void BleDeviceInfo::_internal_set_le_2m(bool value) {
  
  _impl_.le_2m_ = value;
}
inline void BleDeviceInfo::set_le_2m(bool value) {
  _internal_set_le_2m(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.le_2m)
}

// bool le_coded = 8;
inline void BleDeviceInfo::clear_le_coded() {
  _impl_.le_coded_ = false;
}
inline bool BleDeviceInfo::_internal_le_coded() const {
  return _impl_.le_coded_;
}
inline bool BleDeviceInfo::le_coded() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.le_coded)
  return _internal_le_coded();
}
inline void BleDeviceInfo::_internal_set_le_coded(bool value) {
  
  _impl_.le_coded_ = value;
}
inline void BleDeviceInfo::set_le_coded(bool value) {
  _internal_set_le_coded(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.le_coded)
}

// bool le_audio = 9;
inline void BleDeviceInfo::clear_le_audio() {
  _impl_.le_audio_ = false;
}
inline bool BleDeviceInfo::_internal_le_audio() const {
  return _impl_.le_audio_;
}
inline bool BleDeviceInfo::le_audio() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.le_audio)
  return _internal_le_audio();
}
inline void BleDeviceInfo::_internal_set_le_audio(bool value) {
  
  _impl_.le_audio_ = value;
}
inline void BleDeviceInfo::set_le_audio(bool value) {
  _internal_set_le_audio(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.le_audio)
}

// bool le_periodic_adv_support = 14;
inline void BleDeviceInfo::clear_le_periodic_adv_support() {
  _impl_.le_periodic_adv_support_ = false;
}
inline bool BleDeviceInfo::_internal_le_periodic_adv_support() const {
  return _impl_.le_periodic_adv_support_;
}
inline bool BleDeviceInfo::le_periodic_adv_support() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.le_periodic_adv_support)
  return _internal_le_periodic_adv_support();
}
inline void BleDeviceInfo::_internal_set_le_periodic_adv_support(bool value) {
  
  _impl_.le_periodic_adv_support_ = value;
}
inline void BleDeviceInfo::set_le_periodic_adv_support(bool value) {
  _internal_set_le_periodic_adv_support(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.le_periodic_adv_support)
}

// bool le_multiple_adv_support = 15;
inline void BleDeviceInfo::clear_le_multiple_adv_support() {
  _impl_.le_multiple_adv_support_ = false;
}
inline bool BleDeviceInfo::_internal_le_multiple_adv_support() const {
  return _impl_.le_multiple_adv_support_;
}
inline bool BleDeviceInfo::le_multiple_adv_support() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.le_multiple_adv_support)
  return _internal_le_multiple_adv_support();
}
inline void BleDeviceInfo::_internal_set_le_multiple_adv_support(bool value) {
  
  _impl_.le_multiple_adv_support_ = value;
}
inline void BleDeviceInfo::set_le_multiple_adv_support(bool value) {
  _internal_set_le_multiple_adv_support(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.le_multiple_adv_support)
}

// bool offload_filter_support = 16;
inline void BleDeviceInfo::clear_offload_filter_support() {
  _impl_.offload_filter_support_ = false;
}
inline bool BleDeviceInfo::_internal_offload_filter_support() const {
  return _impl_.offload_filter_support_;
}
inline bool BleDeviceInfo::offload_filter_support() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.offload_filter_support)
  return _internal_offload_filter_support();
}
inline void BleDeviceInfo::_internal_set_offload_filter_support(bool value) {
  
  _impl_.offload_filter_support_ = value;
}
inline void BleDeviceInfo::set_offload_filter_support(bool value) {
  _internal_set_offload_filter_support(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.offload_filter_support)
}

// bool offload_scan_batching_support = 17;
inline void BleDeviceInfo::clear_offload_scan_batching_support() {
  _impl_.offload_scan_batching_support_ = false;
}
inline bool BleDeviceInfo::_internal_offload_scan_batching_support() const {
  return _impl_.offload_scan_batching_support_;
}
inline bool BleDeviceInfo::offload_scan_batching_support() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceInfo.offload_scan_batching_support)
  return _internal_offload_scan_batching_support();
}
inline void BleDeviceInfo::_internal_set_offload_scan_batching_support(bool value) {
  
  _impl_.offload_scan_batching_support_ = value;
}
inline void BleDeviceInfo::set_offload_scan_batching_support(bool value) {
  _internal_set_offload_scan_batching_support(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceInfo.offload_scan_batching_support)
}

// -------------------------------------------------------------------

// BleStartRequest

// bytes qaul_id = 1;
inline void BleStartRequest::clear_qaul_id() {
  _impl_.qaul_id_.ClearToEmpty();
}
inline const std::string& BleStartRequest::qaul_id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartRequest.qaul_id)
  return _internal_qaul_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleStartRequest::set_qaul_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.qaul_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartRequest.qaul_id)
}
inline std::string* BleStartRequest::mutable_qaul_id() {
  std::string* _s = _internal_mutable_qaul_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleStartRequest.qaul_id)
  return _s;
}
inline const std::string& BleStartRequest::_internal_qaul_id() const {
  return _impl_.qaul_id_.Get();
}
inline void BleStartRequest::_internal_set_qaul_id(const std::string& value) {
  
  _impl_.qaul_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleStartRequest::_internal_mutable_qaul_id() {
  
  return _impl_.qaul_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleStartRequest::release_qaul_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleStartRequest.qaul_id)
  return _impl_.qaul_id_.Release();
}
inline void BleStartRequest::set_allocated_qaul_id(std::string* qaul_id) {
  if (qaul_id != nullptr) {
    
  } else {
    
  }
  _impl_.qaul_id_.SetAllocated(qaul_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qaul_id_.IsDefault()) {
    _impl_.qaul_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleStartRequest.qaul_id)
}

// .qaul.sys.ble.BlePowerSetting power_setting = 2;
inline void BleStartRequest::clear_power_setting() {
  _impl_.power_setting_ = 0;
}
inline ::qaul::sys::ble::BlePowerSetting BleStartRequest::_internal_power_setting() const {
  return static_cast< ::qaul::sys::ble::BlePowerSetting >(_impl_.power_setting_);
}
inline ::qaul::sys::ble::BlePowerSetting BleStartRequest::power_setting() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartRequest.power_setting)
  return _internal_power_setting();
}
inline void BleStartRequest::_internal_set_power_setting(::qaul::sys::ble::BlePowerSetting value) {
  
  _impl_.power_setting_ = value;
}
inline void BleStartRequest::set_power_setting(::qaul::sys::ble::BlePowerSetting value) {
  _internal_set_power_setting(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartRequest.power_setting)
}

// -------------------------------------------------------------------

// BleStartResult

// bool success = 1;
inline void BleStartResult::clear_success() {
  _impl_.success_ = false;
}
inline bool BleStartResult::_internal_success() const {
  return _impl_.success_;
}
inline bool BleStartResult::success() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartResult.success)
  return _internal_success();
}
inline void BleStartResult::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void BleStartResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartResult.success)
}

// .qaul.sys.ble.BleError error_reason = 2;
inline void BleStartResult::clear_error_reason() {
  _impl_.error_reason_ = 0;
}
inline ::qaul::sys::ble::BleError BleStartResult::_internal_error_reason() const {
  return static_cast< ::qaul::sys::ble::BleError >(_impl_.error_reason_);
}
inline ::qaul::sys::ble::BleError BleStartResult::error_reason() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartResult.error_reason)
  return _internal_error_reason();
}
inline void BleStartResult::_internal_set_error_reason(::qaul::sys::ble::BleError value) {
  
  _impl_.error_reason_ = value;
}
inline void BleStartResult::set_error_reason(::qaul::sys::ble::BleError value) {
  _internal_set_error_reason(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartResult.error_reason)
}

// string error_message = 3;
inline void BleStartResult::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& BleStartResult::error_message() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStartResult.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleStartResult::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStartResult.error_message)
}
inline std::string* BleStartResult::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleStartResult.error_message)
  return _s;
}
inline const std::string& BleStartResult::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void BleStartResult::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* BleStartResult::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* BleStartResult::release_error_message() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleStartResult.error_message)
  return _impl_.error_message_.Release();
}
inline void BleStartResult::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleStartResult.error_message)
}

// -------------------------------------------------------------------

// BleStopRequest

// -------------------------------------------------------------------

// BleStopResult

// bool success = 1;
inline void BleStopResult::clear_success() {
  _impl_.success_ = false;
}
inline bool BleStopResult::_internal_success() const {
  return _impl_.success_;
}
inline bool BleStopResult::success() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStopResult.success)
  return _internal_success();
}
inline void BleStopResult::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void BleStopResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStopResult.success)
}

// .qaul.sys.ble.BleError error_reason = 2;
inline void BleStopResult::clear_error_reason() {
  _impl_.error_reason_ = 0;
}
inline ::qaul::sys::ble::BleError BleStopResult::_internal_error_reason() const {
  return static_cast< ::qaul::sys::ble::BleError >(_impl_.error_reason_);
}
inline ::qaul::sys::ble::BleError BleStopResult::error_reason() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStopResult.error_reason)
  return _internal_error_reason();
}
inline void BleStopResult::_internal_set_error_reason(::qaul::sys::ble::BleError value) {
  
  _impl_.error_reason_ = value;
}
inline void BleStopResult::set_error_reason(::qaul::sys::ble::BleError value) {
  _internal_set_error_reason(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStopResult.error_reason)
}

// string error_message = 3;
inline void BleStopResult::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& BleStopResult::error_message() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleStopResult.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleStopResult::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleStopResult.error_message)
}
inline std::string* BleStopResult::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleStopResult.error_message)
  return _s;
}
inline const std::string& BleStopResult::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void BleStopResult::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* BleStopResult::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* BleStopResult::release_error_message() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleStopResult.error_message)
  return _impl_.error_message_.Release();
}
inline void BleStopResult::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleStopResult.error_message)
}

// -------------------------------------------------------------------

// BleDeviceDiscovered

// bytes qaul_id = 1;
inline void BleDeviceDiscovered::clear_qaul_id() {
  _impl_.qaul_id_.ClearToEmpty();
}
inline const std::string& BleDeviceDiscovered::qaul_id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceDiscovered.qaul_id)
  return _internal_qaul_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDeviceDiscovered::set_qaul_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.qaul_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceDiscovered.qaul_id)
}
inline std::string* BleDeviceDiscovered::mutable_qaul_id() {
  std::string* _s = _internal_mutable_qaul_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDeviceDiscovered.qaul_id)
  return _s;
}
inline const std::string& BleDeviceDiscovered::_internal_qaul_id() const {
  return _impl_.qaul_id_.Get();
}
inline void BleDeviceDiscovered::_internal_set_qaul_id(const std::string& value) {
  
  _impl_.qaul_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDeviceDiscovered::_internal_mutable_qaul_id() {
  
  return _impl_.qaul_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDeviceDiscovered::release_qaul_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDeviceDiscovered.qaul_id)
  return _impl_.qaul_id_.Release();
}
inline void BleDeviceDiscovered::set_allocated_qaul_id(std::string* qaul_id) {
  if (qaul_id != nullptr) {
    
  } else {
    
  }
  _impl_.qaul_id_.SetAllocated(qaul_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qaul_id_.IsDefault()) {
    _impl_.qaul_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDeviceDiscovered.qaul_id)
}

// int32 rssi = 2;
inline void BleDeviceDiscovered::clear_rssi() {
  _impl_.rssi_ = 0;
}
inline int32_t BleDeviceDiscovered::_internal_rssi() const {
  return _impl_.rssi_;
}
inline int32_t BleDeviceDiscovered::rssi() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceDiscovered.rssi)
  return _internal_rssi();
}
inline void BleDeviceDiscovered::_internal_set_rssi(int32_t value) {
  
  _impl_.rssi_ = value;
}
inline void BleDeviceDiscovered::set_rssi(int32_t value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceDiscovered.rssi)
}

// -------------------------------------------------------------------

// BleDeviceUnavailable

// bytes qaul_id = 1;
inline void BleDeviceUnavailable::clear_qaul_id() {
  _impl_.qaul_id_.ClearToEmpty();
}
inline const std::string& BleDeviceUnavailable::qaul_id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDeviceUnavailable.qaul_id)
  return _internal_qaul_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDeviceUnavailable::set_qaul_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.qaul_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDeviceUnavailable.qaul_id)
}
inline std::string* BleDeviceUnavailable::mutable_qaul_id() {
  std::string* _s = _internal_mutable_qaul_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDeviceUnavailable.qaul_id)
  return _s;
}
inline const std::string& BleDeviceUnavailable::_internal_qaul_id() const {
  return _impl_.qaul_id_.Get();
}
inline void BleDeviceUnavailable::_internal_set_qaul_id(const std::string& value) {
  
  _impl_.qaul_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDeviceUnavailable::_internal_mutable_qaul_id() {
  
  return _impl_.qaul_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDeviceUnavailable::release_qaul_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDeviceUnavailable.qaul_id)
  return _impl_.qaul_id_.Release();
}
inline void BleDeviceUnavailable::set_allocated_qaul_id(std::string* qaul_id) {
  if (qaul_id != nullptr) {
    
  } else {
    
  }
  _impl_.qaul_id_.SetAllocated(qaul_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qaul_id_.IsDefault()) {
    _impl_.qaul_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDeviceUnavailable.qaul_id)
}

// -------------------------------------------------------------------

// BleDirectSend

// bytes message_id = 1;
inline void BleDirectSend::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& BleDirectSend::message_id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSend::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.message_id)
}
inline std::string* BleDirectSend::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSend.message_id)
  return _s;
}
inline const std::string& BleDirectSend::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void BleDirectSend::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectSend::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectSend::release_message_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSend.message_id)
  return _impl_.message_id_.Release();
}
inline void BleDirectSend::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSend.message_id)
}

// bytes receiver_id = 2;
inline void BleDirectSend::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& BleDirectSend::receiver_id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSend::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.receiver_id)
}
inline std::string* BleDirectSend::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSend.receiver_id)
  return _s;
}
inline const std::string& BleDirectSend::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void BleDirectSend::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectSend::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectSend::release_receiver_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSend.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void BleDirectSend::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSend.receiver_id)
}

// bytes sender_id = 3;
inline void BleDirectSend::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& BleDirectSend::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSend::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.sender_id)
}
inline std::string* BleDirectSend::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSend.sender_id)
  return _s;
}
inline const std::string& BleDirectSend::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void BleDirectSend::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectSend::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectSend::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSend.sender_id)
  return _impl_.sender_id_.Release();
}
inline void BleDirectSend::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSend.sender_id)
}

// bytes data = 4;
inline void BleDirectSend::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BleDirectSend::data() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSend.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSend::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSend.data)
}
inline std::string* BleDirectSend::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSend.data)
  return _s;
}
inline const std::string& BleDirectSend::_internal_data() const {
  return _impl_.data_.Get();
}
inline void BleDirectSend::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectSend::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectSend::release_data() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSend.data)
  return _impl_.data_.Release();
}
inline void BleDirectSend::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSend.data)
}

// -------------------------------------------------------------------

// BleDirectSendResult

// bytes id = 1;
inline void BleDirectSendResult::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BleDirectSendResult::id() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSendResult.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSendResult::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSendResult.id)
}
inline std::string* BleDirectSendResult::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSendResult.id)
  return _s;
}
inline const std::string& BleDirectSendResult::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BleDirectSendResult::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::release_id() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSendResult.id)
  return _impl_.id_.Release();
}
inline void BleDirectSendResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSendResult.id)
}

// bool success = 2;
inline void BleDirectSendResult::clear_success() {
  _impl_.success_ = false;
}
inline bool BleDirectSendResult::_internal_success() const {
  return _impl_.success_;
}
inline bool BleDirectSendResult::success() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSendResult.success)
  return _internal_success();
}
inline void BleDirectSendResult::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void BleDirectSendResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSendResult.success)
}

// string error_message = 3;
inline void BleDirectSendResult::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& BleDirectSendResult::error_message() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectSendResult.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectSendResult::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectSendResult.error_message)
}
inline std::string* BleDirectSendResult::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectSendResult.error_message)
  return _s;
}
inline const std::string& BleDirectSendResult::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void BleDirectSendResult::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectSendResult::release_error_message() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectSendResult.error_message)
  return _impl_.error_message_.Release();
}
inline void BleDirectSendResult::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectSendResult.error_message)
}

// -------------------------------------------------------------------

// BleDirectReceived

// bytes from = 1;
inline void BleDirectReceived::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& BleDirectReceived::from() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectReceived.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectReceived::set_from(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectReceived.from)
}
inline std::string* BleDirectReceived::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectReceived.from)
  return _s;
}
inline const std::string& BleDirectReceived::_internal_from() const {
  return _impl_.from_.Get();
}
inline void BleDirectReceived::_internal_set_from(const std::string& value) {
  
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectReceived::_internal_mutable_from() {
  
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectReceived::release_from() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectReceived.from)
  return _impl_.from_.Release();
}
inline void BleDirectReceived::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectReceived.from)
}

// bytes data = 4;
inline void BleDirectReceived::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BleDirectReceived::data() const {
  // @@protoc_insertion_point(field_get:qaul.sys.ble.BleDirectReceived.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleDirectReceived::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.sys.ble.BleDirectReceived.data)
}
inline std::string* BleDirectReceived::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.sys.ble.BleDirectReceived.data)
  return _s;
}
inline const std::string& BleDirectReceived::_internal_data() const {
  return _impl_.data_.Get();
}
inline void BleDirectReceived::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* BleDirectReceived::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* BleDirectReceived::release_data() {
  // @@protoc_insertion_point(field_release:qaul.sys.ble.BleDirectReceived.data)
  return _impl_.data_.Release();
}
inline void BleDirectReceived::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.sys.ble.BleDirectReceived.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ble
}  // namespace sys
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::sys::ble::BlePowerSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::sys::ble::BlePowerSetting>() {
  return ::qaul::sys::ble::BlePowerSetting_descriptor();
}
template <> struct is_proto_enum< ::qaul::sys::ble::BleError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::sys::ble::BleError>() {
  return ::qaul::sys::ble::BleError_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connections_2fble_2fble_2eproto
