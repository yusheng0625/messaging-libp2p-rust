// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/messaging/messaging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fmessaging_2fmessaging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fmessaging_2fmessaging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fmessaging_2fmessaging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fmessaging_2fmessaging_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fmessaging_2fmessaging_2eproto;
namespace qaul {
namespace net {
namespace messaging {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class CommonMessage;
struct CommonMessageDefaultTypeInternal;
extern CommonMessageDefaultTypeInternal _CommonMessage_default_instance_;
class Confirmation;
struct ConfirmationDefaultTypeInternal;
extern ConfirmationDefaultTypeInternal _Confirmation_default_instance_;
class Container;
struct ContainerDefaultTypeInternal;
extern ContainerDefaultTypeInternal _Container_default_instance_;
class CryptoService;
struct CryptoServiceDefaultTypeInternal;
extern CryptoServiceDefaultTypeInternal _CryptoService_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Dtn;
struct DtnDefaultTypeInternal;
extern DtnDefaultTypeInternal _Dtn_default_instance_;
class DtnResponse;
struct DtnResponseDefaultTypeInternal;
extern DtnResponseDefaultTypeInternal _DtnResponse_default_instance_;
class Encrypted;
struct EncryptedDefaultTypeInternal;
extern EncryptedDefaultTypeInternal _Encrypted_default_instance_;
class EnvelopPayload;
struct EnvelopPayloadDefaultTypeInternal;
extern EnvelopPayloadDefaultTypeInternal _EnvelopPayload_default_instance_;
class Envelope;
struct EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
class FileMessage;
struct FileMessageDefaultTypeInternal;
extern FileMessageDefaultTypeInternal _FileMessage_default_instance_;
class GroupInviteMessage;
struct GroupInviteMessageDefaultTypeInternal;
extern GroupInviteMessageDefaultTypeInternal _GroupInviteMessage_default_instance_;
class GroupMessage;
struct GroupMessageDefaultTypeInternal;
extern GroupMessageDefaultTypeInternal _GroupMessage_default_instance_;
class Messaging;
struct MessagingDefaultTypeInternal;
extern MessagingDefaultTypeInternal _Messaging_default_instance_;
class RtcMessage;
struct RtcMessageDefaultTypeInternal;
extern RtcMessageDefaultTypeInternal _RtcMessage_default_instance_;
class RtcStreamMessage;
struct RtcStreamMessageDefaultTypeInternal;
extern RtcStreamMessageDefaultTypeInternal _RtcStreamMessage_default_instance_;
}  // namespace messaging
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::net::messaging::ChatMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::ChatMessage>(Arena*);
template<> ::qaul::net::messaging::CommonMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::CommonMessage>(Arena*);
template<> ::qaul::net::messaging::Confirmation* Arena::CreateMaybeMessage<::qaul::net::messaging::Confirmation>(Arena*);
template<> ::qaul::net::messaging::Container* Arena::CreateMaybeMessage<::qaul::net::messaging::Container>(Arena*);
template<> ::qaul::net::messaging::CryptoService* Arena::CreateMaybeMessage<::qaul::net::messaging::CryptoService>(Arena*);
template<> ::qaul::net::messaging::Data* Arena::CreateMaybeMessage<::qaul::net::messaging::Data>(Arena*);
template<> ::qaul::net::messaging::Dtn* Arena::CreateMaybeMessage<::qaul::net::messaging::Dtn>(Arena*);
template<> ::qaul::net::messaging::DtnResponse* Arena::CreateMaybeMessage<::qaul::net::messaging::DtnResponse>(Arena*);
template<> ::qaul::net::messaging::Encrypted* Arena::CreateMaybeMessage<::qaul::net::messaging::Encrypted>(Arena*);
template<> ::qaul::net::messaging::EnvelopPayload* Arena::CreateMaybeMessage<::qaul::net::messaging::EnvelopPayload>(Arena*);
template<> ::qaul::net::messaging::Envelope* Arena::CreateMaybeMessage<::qaul::net::messaging::Envelope>(Arena*);
template<> ::qaul::net::messaging::FileMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::FileMessage>(Arena*);
template<> ::qaul::net::messaging::GroupInviteMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::GroupInviteMessage>(Arena*);
template<> ::qaul::net::messaging::GroupMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::GroupMessage>(Arena*);
template<> ::qaul::net::messaging::Messaging* Arena::CreateMaybeMessage<::qaul::net::messaging::Messaging>(Arena*);
template<> ::qaul::net::messaging::RtcMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::RtcMessage>(Arena*);
template<> ::qaul::net::messaging::RtcStreamMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::RtcStreamMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace net {
namespace messaging {

enum DtnResponse_ResponseType : int {
  DtnResponse_ResponseType_ACCEPTED = 0,
  DtnResponse_ResponseType_REJECTED = 1,
  DtnResponse_ResponseType_DtnResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DtnResponse_ResponseType_DtnResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DtnResponse_ResponseType_IsValid(int value);
constexpr DtnResponse_ResponseType DtnResponse_ResponseType_ResponseType_MIN = DtnResponse_ResponseType_ACCEPTED;
constexpr DtnResponse_ResponseType DtnResponse_ResponseType_ResponseType_MAX = DtnResponse_ResponseType_REJECTED;
constexpr int DtnResponse_ResponseType_ResponseType_ARRAYSIZE = DtnResponse_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DtnResponse_ResponseType_descriptor();
template<typename T>
inline const std::string& DtnResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DtnResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DtnResponse_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DtnResponse_ResponseType_descriptor(), enum_t_value);
}
inline bool DtnResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DtnResponse_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DtnResponse_ResponseType>(
    DtnResponse_ResponseType_descriptor(), name, value);
}
enum DtnResponse_Reason : int {
  DtnResponse_Reason_NONE = 0,
  DtnResponse_Reason_USER_NOT_ACCEPTED = 1,
  DtnResponse_Reason_OVERALL_QUOTA = 2,
  DtnResponse_Reason_USER_QUOTA = 3,
  DtnResponse_Reason_DtnResponse_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DtnResponse_Reason_DtnResponse_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DtnResponse_Reason_IsValid(int value);
constexpr DtnResponse_Reason DtnResponse_Reason_Reason_MIN = DtnResponse_Reason_NONE;
constexpr DtnResponse_Reason DtnResponse_Reason_Reason_MAX = DtnResponse_Reason_USER_QUOTA;
constexpr int DtnResponse_Reason_Reason_ARRAYSIZE = DtnResponse_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DtnResponse_Reason_descriptor();
template<typename T>
inline const std::string& DtnResponse_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DtnResponse_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DtnResponse_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DtnResponse_Reason_descriptor(), enum_t_value);
}
inline bool DtnResponse_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DtnResponse_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DtnResponse_Reason>(
    DtnResponse_Reason_descriptor(), name, value);
}
enum CryptoState : int {
  NONE = 0,
  HANDSHAKE = 1,
  TRANSPORT = 2,
  CryptoState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CryptoState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CryptoState_IsValid(int value);
constexpr CryptoState CryptoState_MIN = NONE;
constexpr CryptoState CryptoState_MAX = TRANSPORT;
constexpr int CryptoState_ARRAYSIZE = CryptoState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CryptoState_descriptor();
template<typename T>
inline const std::string& CryptoState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CryptoState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CryptoState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CryptoState_descriptor(), enum_t_value);
}
inline bool CryptoState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CryptoState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CryptoState>(
    CryptoState_descriptor(), name, value);
}
// ===================================================================

class Container final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Container) */ {
 public:
  inline Container() : Container(nullptr) {}
  ~Container() override;
  explicit PROTOBUF_CONSTEXPR Container(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Container(const Container& from);
  Container(Container&& from) noexcept
    : Container() {
    *this = ::std::move(from);
  }

  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container& operator=(Container&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Container& default_instance() {
    return *internal_default_instance();
  }
  static inline const Container* internal_default_instance() {
    return reinterpret_cast<const Container*>(
               &_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Container& a, Container& b) {
    a.Swap(&b);
  }
  inline void Swap(Container* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Container* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Container>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Container& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Container& from) {
    Container::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Container* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Container";
  }
  protected:
  explicit Container(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kEnvelopeFieldNumber = 2,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .qaul.net.messaging.Envelope envelope = 2;
  bool has_envelope() const;
  private:
  bool _internal_has_envelope() const;
  public:
  void clear_envelope();
  const ::qaul::net::messaging::Envelope& envelope() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::Envelope* release_envelope();
  ::qaul::net::messaging::Envelope* mutable_envelope();
  void set_allocated_envelope(::qaul::net::messaging::Envelope* envelope);
  private:
  const ::qaul::net::messaging::Envelope& _internal_envelope() const;
  ::qaul::net::messaging::Envelope* _internal_mutable_envelope();
  public:
  void unsafe_arena_set_allocated_envelope(
      ::qaul::net::messaging::Envelope* envelope);
  ::qaul::net::messaging::Envelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Container)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::qaul::net::messaging::Envelope* envelope_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Envelope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  ~Envelope() override;
  explicit PROTOBUF_CONSTEXPR Envelope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Envelope(const Envelope& from);
  Envelope(Envelope&& from) noexcept
    : Envelope() {
    *this = ::std::move(from);
  }

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Envelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
               &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Envelope& a, Envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(Envelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Envelope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Envelope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Envelope& from) {
    Envelope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Envelope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Envelope";
  }
  protected:
  explicit Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // bytes sender_id = 1;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // bytes receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Envelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class EnvelopPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.EnvelopPayload) */ {
 public:
  inline EnvelopPayload() : EnvelopPayload(nullptr) {}
  ~EnvelopPayload() override;
  explicit PROTOBUF_CONSTEXPR EnvelopPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvelopPayload(const EnvelopPayload& from);
  EnvelopPayload(EnvelopPayload&& from) noexcept
    : EnvelopPayload() {
    *this = ::std::move(from);
  }

  inline EnvelopPayload& operator=(const EnvelopPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopPayload& operator=(EnvelopPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvelopPayload& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kEncrypted = 1,
    kDtn = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const EnvelopPayload* internal_default_instance() {
    return reinterpret_cast<const EnvelopPayload*>(
               &_EnvelopPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnvelopPayload& a, EnvelopPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvelopPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvelopPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvelopPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnvelopPayload& from) {
    EnvelopPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.EnvelopPayload";
  }
  protected:
  explicit EnvelopPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedFieldNumber = 1,
    kDtnFieldNumber = 2,
  };
  // .qaul.net.messaging.Encrypted encrypted = 1;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  const ::qaul::net::messaging::Encrypted& encrypted() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::Encrypted* release_encrypted();
  ::qaul::net::messaging::Encrypted* mutable_encrypted();
  void set_allocated_encrypted(::qaul::net::messaging::Encrypted* encrypted);
  private:
  const ::qaul::net::messaging::Encrypted& _internal_encrypted() const;
  ::qaul::net::messaging::Encrypted* _internal_mutable_encrypted();
  public:
  void unsafe_arena_set_allocated_encrypted(
      ::qaul::net::messaging::Encrypted* encrypted);
  ::qaul::net::messaging::Encrypted* unsafe_arena_release_encrypted();

  // bytes dtn = 2;
  bool has_dtn() const;
  private:
  bool _internal_has_dtn() const;
  public:
  void clear_dtn();
  const std::string& dtn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dtn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dtn();
  PROTOBUF_NODISCARD std::string* release_dtn();
  void set_allocated_dtn(std::string* dtn);
  private:
  const std::string& _internal_dtn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dtn(const std::string& value);
  std::string* _internal_mutable_dtn();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:qaul.net.messaging.EnvelopPayload)
 private:
  class _Internal;
  void set_has_encrypted();
  void set_has_dtn();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::net::messaging::Encrypted* encrypted_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtn_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Encrypted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Encrypted) */ {
 public:
  inline Encrypted() : Encrypted(nullptr) {}
  ~Encrypted() override;
  explicit PROTOBUF_CONSTEXPR Encrypted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Encrypted(const Encrypted& from);
  Encrypted(Encrypted&& from) noexcept
    : Encrypted() {
    *this = ::std::move(from);
  }

  inline Encrypted& operator=(const Encrypted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encrypted& operator=(Encrypted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Encrypted& default_instance() {
    return *internal_default_instance();
  }
  static inline const Encrypted* internal_default_instance() {
    return reinterpret_cast<const Encrypted*>(
               &_Encrypted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Encrypted& a, Encrypted& b) {
    a.Swap(&b);
  }
  inline void Swap(Encrypted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encrypted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Encrypted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Encrypted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Encrypted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Encrypted& from) {
    Encrypted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encrypted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Encrypted";
  }
  protected:
  explicit Encrypted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kStateFieldNumber = 1,
    kSessionIdFieldNumber = 2,
  };
  // repeated .qaul.net.messaging.Data data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::qaul::net::messaging::Data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >*
      mutable_data();
  private:
  const ::qaul::net::messaging::Data& _internal_data(int index) const;
  ::qaul::net::messaging::Data* _internal_add_data();
  public:
  const ::qaul::net::messaging::Data& data(int index) const;
  ::qaul::net::messaging::Data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >&
      data() const;

  // .qaul.net.messaging.CryptoState state = 1;
  void clear_state();
  ::qaul::net::messaging::CryptoState state() const;
  void set_state(::qaul::net::messaging::CryptoState value);
  private:
  ::qaul::net::messaging::CryptoState _internal_state() const;
  void _internal_set_state(::qaul::net::messaging::CryptoState value);
  public:

  // uint32 session_id = 2;
  void clear_session_id();
  uint32_t session_id() const;
  void set_session_id(uint32_t value);
  private:
  uint32_t _internal_session_id() const;
  void _internal_set_session_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Encrypted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data > data_;
    int state_;
    uint32_t session_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  explicit PROTOBUF_CONSTEXPR Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Data& from) {
    Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kNonceFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 nonce = 1;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t nonce_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Messaging final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Messaging) */ {
 public:
  inline Messaging() : Messaging(nullptr) {}
  ~Messaging() override;
  explicit PROTOBUF_CONSTEXPR Messaging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Messaging(const Messaging& from);
  Messaging(Messaging&& from) noexcept
    : Messaging() {
    *this = ::std::move(from);
  }

  inline Messaging& operator=(const Messaging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Messaging& operator=(Messaging&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Messaging& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kConfirmationMessage = 1,
    kDtnResponse = 2,
    kCryptoService = 3,
    kRtcStreamMessage = 4,
    kGroupInviteMessage = 5,
    kCommonMessage = 6,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Messaging* internal_default_instance() {
    return reinterpret_cast<const Messaging*>(
               &_Messaging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Messaging& a, Messaging& b) {
    a.Swap(&b);
  }
  inline void Swap(Messaging* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Messaging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Messaging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Messaging>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Messaging& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Messaging& from) {
    Messaging::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Messaging* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Messaging";
  }
  protected:
  explicit Messaging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfirmationMessageFieldNumber = 1,
    kDtnResponseFieldNumber = 2,
    kCryptoServiceFieldNumber = 3,
    kRtcStreamMessageFieldNumber = 4,
    kGroupInviteMessageFieldNumber = 5,
    kCommonMessageFieldNumber = 6,
  };
  // .qaul.net.messaging.Confirmation confirmation_message = 1;
  bool has_confirmation_message() const;
  private:
  bool _internal_has_confirmation_message() const;
  public:
  void clear_confirmation_message();
  const ::qaul::net::messaging::Confirmation& confirmation_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::Confirmation* release_confirmation_message();
  ::qaul::net::messaging::Confirmation* mutable_confirmation_message();
  void set_allocated_confirmation_message(::qaul::net::messaging::Confirmation* confirmation_message);
  private:
  const ::qaul::net::messaging::Confirmation& _internal_confirmation_message() const;
  ::qaul::net::messaging::Confirmation* _internal_mutable_confirmation_message();
  public:
  void unsafe_arena_set_allocated_confirmation_message(
      ::qaul::net::messaging::Confirmation* confirmation_message);
  ::qaul::net::messaging::Confirmation* unsafe_arena_release_confirmation_message();

  // .qaul.net.messaging.DtnResponse dtn_response = 2;
  bool has_dtn_response() const;
  private:
  bool _internal_has_dtn_response() const;
  public:
  void clear_dtn_response();
  const ::qaul::net::messaging::DtnResponse& dtn_response() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::DtnResponse* release_dtn_response();
  ::qaul::net::messaging::DtnResponse* mutable_dtn_response();
  void set_allocated_dtn_response(::qaul::net::messaging::DtnResponse* dtn_response);
  private:
  const ::qaul::net::messaging::DtnResponse& _internal_dtn_response() const;
  ::qaul::net::messaging::DtnResponse* _internal_mutable_dtn_response();
  public:
  void unsafe_arena_set_allocated_dtn_response(
      ::qaul::net::messaging::DtnResponse* dtn_response);
  ::qaul::net::messaging::DtnResponse* unsafe_arena_release_dtn_response();

  // .qaul.net.messaging.CryptoService crypto_service = 3;
  bool has_crypto_service() const;
  private:
  bool _internal_has_crypto_service() const;
  public:
  void clear_crypto_service();
  const ::qaul::net::messaging::CryptoService& crypto_service() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::CryptoService* release_crypto_service();
  ::qaul::net::messaging::CryptoService* mutable_crypto_service();
  void set_allocated_crypto_service(::qaul::net::messaging::CryptoService* crypto_service);
  private:
  const ::qaul::net::messaging::CryptoService& _internal_crypto_service() const;
  ::qaul::net::messaging::CryptoService* _internal_mutable_crypto_service();
  public:
  void unsafe_arena_set_allocated_crypto_service(
      ::qaul::net::messaging::CryptoService* crypto_service);
  ::qaul::net::messaging::CryptoService* unsafe_arena_release_crypto_service();

  // .qaul.net.messaging.RtcStreamMessage rtc_stream_message = 4;
  bool has_rtc_stream_message() const;
  private:
  bool _internal_has_rtc_stream_message() const;
  public:
  void clear_rtc_stream_message();
  const ::qaul::net::messaging::RtcStreamMessage& rtc_stream_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::RtcStreamMessage* release_rtc_stream_message();
  ::qaul::net::messaging::RtcStreamMessage* mutable_rtc_stream_message();
  void set_allocated_rtc_stream_message(::qaul::net::messaging::RtcStreamMessage* rtc_stream_message);
  private:
  const ::qaul::net::messaging::RtcStreamMessage& _internal_rtc_stream_message() const;
  ::qaul::net::messaging::RtcStreamMessage* _internal_mutable_rtc_stream_message();
  public:
  void unsafe_arena_set_allocated_rtc_stream_message(
      ::qaul::net::messaging::RtcStreamMessage* rtc_stream_message);
  ::qaul::net::messaging::RtcStreamMessage* unsafe_arena_release_rtc_stream_message();

  // .qaul.net.messaging.GroupInviteMessage group_invite_message = 5;
  bool has_group_invite_message() const;
  private:
  bool _internal_has_group_invite_message() const;
  public:
  void clear_group_invite_message();
  const ::qaul::net::messaging::GroupInviteMessage& group_invite_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::GroupInviteMessage* release_group_invite_message();
  ::qaul::net::messaging::GroupInviteMessage* mutable_group_invite_message();
  void set_allocated_group_invite_message(::qaul::net::messaging::GroupInviteMessage* group_invite_message);
  private:
  const ::qaul::net::messaging::GroupInviteMessage& _internal_group_invite_message() const;
  ::qaul::net::messaging::GroupInviteMessage* _internal_mutable_group_invite_message();
  public:
  void unsafe_arena_set_allocated_group_invite_message(
      ::qaul::net::messaging::GroupInviteMessage* group_invite_message);
  ::qaul::net::messaging::GroupInviteMessage* unsafe_arena_release_group_invite_message();

  // .qaul.net.messaging.CommonMessage common_message = 6;
  bool has_common_message() const;
  private:
  bool _internal_has_common_message() const;
  public:
  void clear_common_message();
  const ::qaul::net::messaging::CommonMessage& common_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::CommonMessage* release_common_message();
  ::qaul::net::messaging::CommonMessage* mutable_common_message();
  void set_allocated_common_message(::qaul::net::messaging::CommonMessage* common_message);
  private:
  const ::qaul::net::messaging::CommonMessage& _internal_common_message() const;
  ::qaul::net::messaging::CommonMessage* _internal_mutable_common_message();
  public:
  void unsafe_arena_set_allocated_common_message(
      ::qaul::net::messaging::CommonMessage* common_message);
  ::qaul::net::messaging::CommonMessage* unsafe_arena_release_common_message();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Messaging)
 private:
  class _Internal;
  void set_has_confirmation_message();
  void set_has_dtn_response();
  void set_has_crypto_service();
  void set_has_rtc_stream_message();
  void set_has_group_invite_message();
  void set_has_common_message();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::net::messaging::Confirmation* confirmation_message_;
      ::qaul::net::messaging::DtnResponse* dtn_response_;
      ::qaul::net::messaging::CryptoService* crypto_service_;
      ::qaul::net::messaging::RtcStreamMessage* rtc_stream_message_;
      ::qaul::net::messaging::GroupInviteMessage* group_invite_message_;
      ::qaul::net::messaging::CommonMessage* common_message_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Confirmation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Confirmation) */ {
 public:
  inline Confirmation() : Confirmation(nullptr) {}
  ~Confirmation() override;
  explicit PROTOBUF_CONSTEXPR Confirmation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Confirmation(const Confirmation& from);
  Confirmation(Confirmation&& from) noexcept
    : Confirmation() {
    *this = ::std::move(from);
  }

  inline Confirmation& operator=(const Confirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Confirmation& operator=(Confirmation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Confirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Confirmation* internal_default_instance() {
    return reinterpret_cast<const Confirmation*>(
               &_Confirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Confirmation& a, Confirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(Confirmation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Confirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Confirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Confirmation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Confirmation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Confirmation& from) {
    Confirmation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Confirmation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Confirmation";
  }
  protected:
  explicit Confirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kReceivedAtFieldNumber = 2,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint64 received_at = 2;
  void clear_received_at();
  uint64_t received_at() const;
  void set_received_at(uint64_t value);
  private:
  uint64_t _internal_received_at() const;
  void _internal_set_received_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Confirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    uint64_t received_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class CryptoService final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.net.messaging.CryptoService) */ {
 public:
  inline CryptoService() : CryptoService(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CryptoService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoService(const CryptoService& from);
  CryptoService(CryptoService&& from) noexcept
    : CryptoService() {
    *this = ::std::move(from);
  }

  inline CryptoService& operator=(const CryptoService& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoService& operator=(CryptoService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoService& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoService* internal_default_instance() {
    return reinterpret_cast<const CryptoService*>(
               &_CryptoService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CryptoService& a, CryptoService& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CryptoService& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CryptoService& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.CryptoService";
  }
  protected:
  explicit CryptoService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.CryptoService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class RtcStreamMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.RtcStreamMessage) */ {
 public:
  inline RtcStreamMessage() : RtcStreamMessage(nullptr) {}
  ~RtcStreamMessage() override;
  explicit PROTOBUF_CONSTEXPR RtcStreamMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcStreamMessage(const RtcStreamMessage& from);
  RtcStreamMessage(RtcStreamMessage&& from) noexcept
    : RtcStreamMessage() {
    *this = ::std::move(from);
  }

  inline RtcStreamMessage& operator=(const RtcStreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcStreamMessage& operator=(RtcStreamMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcStreamMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcStreamMessage* internal_default_instance() {
    return reinterpret_cast<const RtcStreamMessage*>(
               &_RtcStreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RtcStreamMessage& a, RtcStreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcStreamMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcStreamMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcStreamMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcStreamMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcStreamMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcStreamMessage& from) {
    RtcStreamMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcStreamMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.RtcStreamMessage";
  }
  protected:
  explicit RtcStreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.RtcStreamMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class GroupInviteMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.GroupInviteMessage) */ {
 public:
  inline GroupInviteMessage() : GroupInviteMessage(nullptr) {}
  ~GroupInviteMessage() override;
  explicit PROTOBUF_CONSTEXPR GroupInviteMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInviteMessage(const GroupInviteMessage& from);
  GroupInviteMessage(GroupInviteMessage&& from) noexcept
    : GroupInviteMessage() {
    *this = ::std::move(from);
  }

  inline GroupInviteMessage& operator=(const GroupInviteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInviteMessage& operator=(GroupInviteMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInviteMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInviteMessage* internal_default_instance() {
    return reinterpret_cast<const GroupInviteMessage*>(
               &_GroupInviteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupInviteMessage& a, GroupInviteMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInviteMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInviteMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInviteMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInviteMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInviteMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInviteMessage& from) {
    GroupInviteMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInviteMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.GroupInviteMessage";
  }
  protected:
  explicit GroupInviteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.GroupInviteMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class CommonMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.CommonMessage) */ {
 public:
  inline CommonMessage() : CommonMessage(nullptr) {}
  ~CommonMessage() override;
  explicit PROTOBUF_CONSTEXPR CommonMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonMessage(const CommonMessage& from);
  CommonMessage(CommonMessage&& from) noexcept
    : CommonMessage() {
    *this = ::std::move(from);
  }

  inline CommonMessage& operator=(const CommonMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonMessage& operator=(CommonMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kChatMessage = 4,
    kFileMessage = 5,
    kGroupMessage = 6,
    kRtcMessage = 7,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const CommonMessage* internal_default_instance() {
    return reinterpret_cast<const CommonMessage*>(
               &_CommonMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommonMessage& a, CommonMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonMessage& from) {
    CommonMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.CommonMessage";
  }
  protected:
  explicit CommonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kSentAtFieldNumber = 3,
    kChatMessageFieldNumber = 4,
    kFileMessageFieldNumber = 5,
    kGroupMessageFieldNumber = 6,
    kRtcMessageFieldNumber = 7,
  };
  // bytes message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bytes group_id = 2;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // uint64 sent_at = 3;
  void clear_sent_at();
  uint64_t sent_at() const;
  void set_sent_at(uint64_t value);
  private:
  uint64_t _internal_sent_at() const;
  void _internal_set_sent_at(uint64_t value);
  public:

  // .qaul.net.messaging.ChatMessage chat_message = 4;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;
  public:
  void clear_chat_message();
  const ::qaul::net::messaging::ChatMessage& chat_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::ChatMessage* release_chat_message();
  ::qaul::net::messaging::ChatMessage* mutable_chat_message();
  void set_allocated_chat_message(::qaul::net::messaging::ChatMessage* chat_message);
  private:
  const ::qaul::net::messaging::ChatMessage& _internal_chat_message() const;
  ::qaul::net::messaging::ChatMessage* _internal_mutable_chat_message();
  public:
  void unsafe_arena_set_allocated_chat_message(
      ::qaul::net::messaging::ChatMessage* chat_message);
  ::qaul::net::messaging::ChatMessage* unsafe_arena_release_chat_message();

  // .qaul.net.messaging.FileMessage file_message = 5;
  bool has_file_message() const;
  private:
  bool _internal_has_file_message() const;
  public:
  void clear_file_message();
  const ::qaul::net::messaging::FileMessage& file_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::FileMessage* release_file_message();
  ::qaul::net::messaging::FileMessage* mutable_file_message();
  void set_allocated_file_message(::qaul::net::messaging::FileMessage* file_message);
  private:
  const ::qaul::net::messaging::FileMessage& _internal_file_message() const;
  ::qaul::net::messaging::FileMessage* _internal_mutable_file_message();
  public:
  void unsafe_arena_set_allocated_file_message(
      ::qaul::net::messaging::FileMessage* file_message);
  ::qaul::net::messaging::FileMessage* unsafe_arena_release_file_message();

  // .qaul.net.messaging.GroupMessage group_message = 6;
  bool has_group_message() const;
  private:
  bool _internal_has_group_message() const;
  public:
  void clear_group_message();
  const ::qaul::net::messaging::GroupMessage& group_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::GroupMessage* release_group_message();
  ::qaul::net::messaging::GroupMessage* mutable_group_message();
  void set_allocated_group_message(::qaul::net::messaging::GroupMessage* group_message);
  private:
  const ::qaul::net::messaging::GroupMessage& _internal_group_message() const;
  ::qaul::net::messaging::GroupMessage* _internal_mutable_group_message();
  public:
  void unsafe_arena_set_allocated_group_message(
      ::qaul::net::messaging::GroupMessage* group_message);
  ::qaul::net::messaging::GroupMessage* unsafe_arena_release_group_message();

  // .qaul.net.messaging.RtcMessage rtc_message = 7;
  bool has_rtc_message() const;
  private:
  bool _internal_has_rtc_message() const;
  public:
  void clear_rtc_message();
  const ::qaul::net::messaging::RtcMessage& rtc_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::RtcMessage* release_rtc_message();
  ::qaul::net::messaging::RtcMessage* mutable_rtc_message();
  void set_allocated_rtc_message(::qaul::net::messaging::RtcMessage* rtc_message);
  private:
  const ::qaul::net::messaging::RtcMessage& _internal_rtc_message() const;
  ::qaul::net::messaging::RtcMessage* _internal_mutable_rtc_message();
  public:
  void unsafe_arena_set_allocated_rtc_message(
      ::qaul::net::messaging::RtcMessage* rtc_message);
  ::qaul::net::messaging::RtcMessage* unsafe_arena_release_rtc_message();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:qaul.net.messaging.CommonMessage)
 private:
  class _Internal;
  void set_has_chat_message();
  void set_has_file_message();
  void set_has_group_message();
  void set_has_rtc_message();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    uint64_t sent_at_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::net::messaging::ChatMessage* chat_message_;
      ::qaul::net::messaging::FileMessage* file_message_;
      ::qaul::net::messaging::GroupMessage* group_message_;
      ::qaul::net::messaging::RtcMessage* rtc_message_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class FileMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.FileMessage) */ {
 public:
  inline FileMessage() : FileMessage(nullptr) {}
  ~FileMessage() override;
  explicit PROTOBUF_CONSTEXPR FileMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileMessage(const FileMessage& from);
  FileMessage(FileMessage&& from) noexcept
    : FileMessage() {
    *this = ::std::move(from);
  }

  inline FileMessage& operator=(const FileMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMessage& operator=(FileMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMessage* internal_default_instance() {
    return reinterpret_cast<const FileMessage*>(
               &_FileMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FileMessage& a, FileMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileMessage& from) {
    FileMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.FileMessage";
  }
  protected:
  explicit FileMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.FileMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class GroupMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.GroupMessage) */ {
 public:
  inline GroupMessage() : GroupMessage(nullptr) {}
  ~GroupMessage() override;
  explicit PROTOBUF_CONSTEXPR GroupMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMessage(const GroupMessage& from);
  GroupMessage(GroupMessage&& from) noexcept
    : GroupMessage() {
    *this = ::std::move(from);
  }

  inline GroupMessage& operator=(const GroupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessage& operator=(GroupMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMessage* internal_default_instance() {
    return reinterpret_cast<const GroupMessage*>(
               &_GroupMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GroupMessage& a, GroupMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMessage& from) {
    GroupMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.GroupMessage";
  }
  protected:
  explicit GroupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.GroupMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class RtcMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.RtcMessage) */ {
 public:
  inline RtcMessage() : RtcMessage(nullptr) {}
  ~RtcMessage() override;
  explicit PROTOBUF_CONSTEXPR RtcMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcMessage(const RtcMessage& from);
  RtcMessage(RtcMessage&& from) noexcept
    : RtcMessage() {
    *this = ::std::move(from);
  }

  inline RtcMessage& operator=(const RtcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcMessage& operator=(RtcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcMessage* internal_default_instance() {
    return reinterpret_cast<const RtcMessage*>(
               &_RtcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RtcMessage& a, RtcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcMessage& from) {
    RtcMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.RtcMessage";
  }
  protected:
  explicit RtcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.RtcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Dtn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Dtn) */ {
 public:
  inline Dtn() : Dtn(nullptr) {}
  ~Dtn() override;
  explicit PROTOBUF_CONSTEXPR Dtn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dtn(const Dtn& from);
  Dtn(Dtn&& from) noexcept
    : Dtn() {
    *this = ::std::move(from);
  }

  inline Dtn& operator=(const Dtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dtn& operator=(Dtn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dtn& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kContainer = 1,
    kResponse = 2,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Dtn* internal_default_instance() {
    return reinterpret_cast<const Dtn*>(
               &_Dtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Dtn& a, Dtn& b) {
    a.Swap(&b);
  }
  inline void Swap(Dtn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dtn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dtn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dtn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dtn& from) {
    Dtn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dtn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Dtn";
  }
  protected:
  explicit Dtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // bytes container = 1;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const std::string& container() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container();
  PROTOBUF_NODISCARD std::string* release_container();
  void set_allocated_container(std::string* container);
  private:
  const std::string& _internal_container() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container(const std::string& value);
  std::string* _internal_mutable_container();
  public:

  // .qaul.net.messaging.DtnResponse response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::qaul::net::messaging::DtnResponse& response() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::DtnResponse* release_response();
  ::qaul::net::messaging::DtnResponse* mutable_response();
  void set_allocated_response(::qaul::net::messaging::DtnResponse* response);
  private:
  const ::qaul::net::messaging::DtnResponse& _internal_response() const;
  ::qaul::net::messaging::DtnResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::qaul::net::messaging::DtnResponse* response);
  ::qaul::net::messaging::DtnResponse* unsafe_arena_release_response();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Dtn)
 private:
  class _Internal;
  void set_has_container();
  void set_has_response();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_;
      ::qaul::net::messaging::DtnResponse* response_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class DtnResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.DtnResponse) */ {
 public:
  inline DtnResponse() : DtnResponse(nullptr) {}
  ~DtnResponse() override;
  explicit PROTOBUF_CONSTEXPR DtnResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnResponse(const DtnResponse& from);
  DtnResponse(DtnResponse&& from) noexcept
    : DtnResponse() {
    *this = ::std::move(from);
  }

  inline DtnResponse& operator=(const DtnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnResponse& operator=(DtnResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnResponse* internal_default_instance() {
    return reinterpret_cast<const DtnResponse*>(
               &_DtnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DtnResponse& a, DtnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnResponse& from) {
    DtnResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.DtnResponse";
  }
  protected:
  explicit DtnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DtnResponse_ResponseType ResponseType;
  static constexpr ResponseType ACCEPTED =
    DtnResponse_ResponseType_ACCEPTED;
  static constexpr ResponseType REJECTED =
    DtnResponse_ResponseType_REJECTED;
  static inline bool ResponseType_IsValid(int value) {
    return DtnResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    DtnResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    DtnResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    DtnResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return DtnResponse_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return DtnResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return DtnResponse_ResponseType_Parse(name, value);
  }

  typedef DtnResponse_Reason Reason;
  static constexpr Reason NONE =
    DtnResponse_Reason_NONE;
  static constexpr Reason USER_NOT_ACCEPTED =
    DtnResponse_Reason_USER_NOT_ACCEPTED;
  static constexpr Reason OVERALL_QUOTA =
    DtnResponse_Reason_OVERALL_QUOTA;
  static constexpr Reason USER_QUOTA =
    DtnResponse_Reason_USER_QUOTA;
  static inline bool Reason_IsValid(int value) {
    return DtnResponse_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    DtnResponse_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    DtnResponse_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    DtnResponse_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return DtnResponse_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return DtnResponse_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return DtnResponse_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kResponseTypeFieldNumber = 1,
    kReasonFieldNumber = 3,
  };
  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .qaul.net.messaging.DtnResponse.ResponseType response_type = 1;
  void clear_response_type();
  ::qaul::net::messaging::DtnResponse_ResponseType response_type() const;
  void set_response_type(::qaul::net::messaging::DtnResponse_ResponseType value);
  private:
  ::qaul::net::messaging::DtnResponse_ResponseType _internal_response_type() const;
  void _internal_set_response_type(::qaul::net::messaging::DtnResponse_ResponseType value);
  public:

  // .qaul.net.messaging.DtnResponse.Reason reason = 3;
  void clear_reason();
  ::qaul::net::messaging::DtnResponse_Reason reason() const;
  void set_reason(::qaul::net::messaging::DtnResponse_Reason value);
  private:
  ::qaul::net::messaging::DtnResponse_Reason _internal_reason() const;
  void _internal_set_reason(::qaul::net::messaging::DtnResponse_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.DtnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    int response_type_;
    int reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Container

// bytes signature = 1;
inline void Container::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Container::signature() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Container.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Container::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Container.signature)
}
inline std::string* Container::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Container.signature)
  return _s;
}
inline const std::string& Container::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Container::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Container::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Container::release_signature() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Container.signature)
  return _impl_.signature_.Release();
}
inline void Container::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Container.signature)
}

// .qaul.net.messaging.Envelope envelope = 2;
inline bool Container::_internal_has_envelope() const {
  return this != internal_default_instance() && _impl_.envelope_ != nullptr;
}
inline bool Container::has_envelope() const {
  return _internal_has_envelope();
}
inline void Container::clear_envelope() {
  if (GetArenaForAllocation() == nullptr && _impl_.envelope_ != nullptr) {
    delete _impl_.envelope_;
  }
  _impl_.envelope_ = nullptr;
}
inline const ::qaul::net::messaging::Envelope& Container::_internal_envelope() const {
  const ::qaul::net::messaging::Envelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::net::messaging::Envelope&>(
      ::qaul::net::messaging::_Envelope_default_instance_);
}
inline const ::qaul::net::messaging::Envelope& Container::envelope() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Container.envelope)
  return _internal_envelope();
}
inline void Container::unsafe_arena_set_allocated_envelope(
    ::qaul::net::messaging::Envelope* envelope) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Container.envelope)
}
inline ::qaul::net::messaging::Envelope* Container::release_envelope() {
  
  ::qaul::net::messaging::Envelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::net::messaging::Envelope* Container::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Container.envelope)
  
  ::qaul::net::messaging::Envelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::qaul::net::messaging::Envelope* Container::_internal_mutable_envelope() {
  
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::net::messaging::Envelope>(GetArenaForAllocation());
    _impl_.envelope_ = p;
  }
  return _impl_.envelope_;
}
inline ::qaul::net::messaging::Envelope* Container::mutable_envelope() {
  ::qaul::net::messaging::Envelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Container.envelope)
  return _msg;
}
inline void Container::set_allocated_envelope(::qaul::net::messaging::Envelope* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(envelope);
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Container.envelope)
}

// -------------------------------------------------------------------

// Envelope

// bytes sender_id = 1;
inline void Envelope::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& Envelope::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Envelope.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Envelope.sender_id)
}
inline std::string* Envelope::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Envelope.sender_id)
  return _s;
}
inline const std::string& Envelope::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void Envelope::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Envelope::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Envelope.sender_id)
  return _impl_.sender_id_.Release();
}
inline void Envelope::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Envelope.sender_id)
}

// bytes receiver_id = 2;
inline void Envelope::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& Envelope::receiver_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Envelope.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Envelope.receiver_id)
}
inline std::string* Envelope::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Envelope.receiver_id)
  return _s;
}
inline const std::string& Envelope::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void Envelope::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Envelope::release_receiver_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Envelope.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void Envelope::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Envelope.receiver_id)
}

// bytes payload = 3;
inline void Envelope::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Envelope::payload() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Envelope.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Envelope.payload)
}
inline std::string* Envelope::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Envelope.payload)
  return _s;
}
inline const std::string& Envelope::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void Envelope::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* Envelope::release_payload() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Envelope.payload)
  return _impl_.payload_.Release();
}
inline void Envelope::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Envelope.payload)
}

// -------------------------------------------------------------------

// EnvelopPayload

// .qaul.net.messaging.Encrypted encrypted = 1;
inline bool EnvelopPayload::_internal_has_encrypted() const {
  return payload_case() == kEncrypted;
}
inline bool EnvelopPayload::has_encrypted() const {
  return _internal_has_encrypted();
}
inline void EnvelopPayload::set_has_encrypted() {
  _impl_._oneof_case_[0] = kEncrypted;
}
inline void EnvelopPayload::clear_encrypted() {
  if (_internal_has_encrypted()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.encrypted_;
    }
    clear_has_payload();
  }
}
inline ::qaul::net::messaging::Encrypted* EnvelopPayload::release_encrypted() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.EnvelopPayload.encrypted)
  if (_internal_has_encrypted()) {
    clear_has_payload();
    ::qaul::net::messaging::Encrypted* temp = _impl_.payload_.encrypted_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.encrypted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::Encrypted& EnvelopPayload::_internal_encrypted() const {
  return _internal_has_encrypted()
      ? *_impl_.payload_.encrypted_
      : reinterpret_cast< ::qaul::net::messaging::Encrypted&>(::qaul::net::messaging::_Encrypted_default_instance_);
}
inline const ::qaul::net::messaging::Encrypted& EnvelopPayload::encrypted() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.EnvelopPayload.encrypted)
  return _internal_encrypted();
}
inline ::qaul::net::messaging::Encrypted* EnvelopPayload::unsafe_arena_release_encrypted() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.EnvelopPayload.encrypted)
  if (_internal_has_encrypted()) {
    clear_has_payload();
    ::qaul::net::messaging::Encrypted* temp = _impl_.payload_.encrypted_;
    _impl_.payload_.encrypted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EnvelopPayload::unsafe_arena_set_allocated_encrypted(::qaul::net::messaging::Encrypted* encrypted) {
  clear_payload();
  if (encrypted) {
    set_has_encrypted();
    _impl_.payload_.encrypted_ = encrypted;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.EnvelopPayload.encrypted)
}
inline ::qaul::net::messaging::Encrypted* EnvelopPayload::_internal_mutable_encrypted() {
  if (!_internal_has_encrypted()) {
    clear_payload();
    set_has_encrypted();
    _impl_.payload_.encrypted_ = CreateMaybeMessage< ::qaul::net::messaging::Encrypted >(GetArenaForAllocation());
  }
  return _impl_.payload_.encrypted_;
}
inline ::qaul::net::messaging::Encrypted* EnvelopPayload::mutable_encrypted() {
  ::qaul::net::messaging::Encrypted* _msg = _internal_mutable_encrypted();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.EnvelopPayload.encrypted)
  return _msg;
}

// bytes dtn = 2;
inline bool EnvelopPayload::_internal_has_dtn() const {
  return payload_case() == kDtn;
}
inline bool EnvelopPayload::has_dtn() const {
  return _internal_has_dtn();
}
inline void EnvelopPayload::set_has_dtn() {
  _impl_._oneof_case_[0] = kDtn;
}
inline void EnvelopPayload::clear_dtn() {
  if (_internal_has_dtn()) {
    _impl_.payload_.dtn_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& EnvelopPayload::dtn() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.EnvelopPayload.dtn)
  return _internal_dtn();
}
template <typename ArgT0, typename... ArgT>
inline void EnvelopPayload::set_dtn(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_dtn()) {
    clear_payload();
    set_has_dtn();
    _impl_.payload_.dtn_.InitDefault();
  }
  _impl_.payload_.dtn_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.EnvelopPayload.dtn)
}
inline std::string* EnvelopPayload::mutable_dtn() {
  std::string* _s = _internal_mutable_dtn();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.EnvelopPayload.dtn)
  return _s;
}
inline const std::string& EnvelopPayload::_internal_dtn() const {
  if (_internal_has_dtn()) {
    return _impl_.payload_.dtn_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EnvelopPayload::_internal_set_dtn(const std::string& value) {
  if (!_internal_has_dtn()) {
    clear_payload();
    set_has_dtn();
    _impl_.payload_.dtn_.InitDefault();
  }
  _impl_.payload_.dtn_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvelopPayload::_internal_mutable_dtn() {
  if (!_internal_has_dtn()) {
    clear_payload();
    set_has_dtn();
    _impl_.payload_.dtn_.InitDefault();
  }
  return _impl_.payload_.dtn_.Mutable(      GetArenaForAllocation());
}
inline std::string* EnvelopPayload::release_dtn() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.EnvelopPayload.dtn)
  if (_internal_has_dtn()) {
    clear_has_payload();
    return _impl_.payload_.dtn_.Release();
  } else {
    return nullptr;
  }
}
inline void EnvelopPayload::set_allocated_dtn(std::string* dtn) {
  if (has_payload()) {
    clear_payload();
  }
  if (dtn != nullptr) {
    set_has_dtn();
    _impl_.payload_.dtn_.InitAllocated(dtn, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.EnvelopPayload.dtn)
}

inline bool EnvelopPayload::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void EnvelopPayload::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline EnvelopPayload::PayloadCase EnvelopPayload::payload_case() const {
  return EnvelopPayload::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Encrypted

// .qaul.net.messaging.CryptoState state = 1;
inline void Encrypted::clear_state() {
  _impl_.state_ = 0;
}
inline ::qaul::net::messaging::CryptoState Encrypted::_internal_state() const {
  return static_cast< ::qaul::net::messaging::CryptoState >(_impl_.state_);
}
inline ::qaul::net::messaging::CryptoState Encrypted::state() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Encrypted.state)
  return _internal_state();
}
inline void Encrypted::_internal_set_state(::qaul::net::messaging::CryptoState value) {
  
  _impl_.state_ = value;
}
inline void Encrypted::set_state(::qaul::net::messaging::CryptoState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Encrypted.state)
}

// uint32 session_id = 2;
inline void Encrypted::clear_session_id() {
  _impl_.session_id_ = 0u;
}
inline uint32_t Encrypted::_internal_session_id() const {
  return _impl_.session_id_;
}
inline uint32_t Encrypted::session_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Encrypted.session_id)
  return _internal_session_id();
}
inline void Encrypted::_internal_set_session_id(uint32_t value) {
  
  _impl_.session_id_ = value;
}
inline void Encrypted::set_session_id(uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Encrypted.session_id)
}

// repeated .qaul.net.messaging.Data data = 3;
inline int Encrypted::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Encrypted::data_size() const {
  return _internal_data_size();
}
inline void Encrypted::clear_data() {
  _impl_.data_.Clear();
}
inline ::qaul::net::messaging::Data* Encrypted::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Encrypted.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >*
Encrypted::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:qaul.net.messaging.Encrypted.data)
  return &_impl_.data_;
}
inline const ::qaul::net::messaging::Data& Encrypted::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::qaul::net::messaging::Data& Encrypted::data(int index) const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Encrypted.data)
  return _internal_data(index);
}
inline ::qaul::net::messaging::Data* Encrypted::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::qaul::net::messaging::Data* Encrypted::add_data() {
  ::qaul::net::messaging::Data* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:qaul.net.messaging.Encrypted.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >&
Encrypted::data() const {
  // @@protoc_insertion_point(field_list:qaul.net.messaging.Encrypted.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// Data

// uint64 nonce = 1;
inline void Data::clear_nonce() {
  _impl_.nonce_ = uint64_t{0u};
}
inline uint64_t Data::_internal_nonce() const {
  return _impl_.nonce_;
}
inline uint64_t Data::nonce() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Data.nonce)
  return _internal_nonce();
}
inline void Data::_internal_set_nonce(uint64_t value) {
  
  _impl_.nonce_ = value;
}
inline void Data::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Data.nonce)
}

// bytes data = 2;
inline void Data::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Data::data() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Data.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Data::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Data.data)
}
inline std::string* Data::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Data.data)
  return _s;
}
inline const std::string& Data::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Data::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Data::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Data::release_data() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Data.data)
  return _impl_.data_.Release();
}
inline void Data::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Data.data)
}

// -------------------------------------------------------------------

// Messaging

// .qaul.net.messaging.Confirmation confirmation_message = 1;
inline bool Messaging::_internal_has_confirmation_message() const {
  return message_case() == kConfirmationMessage;
}
inline bool Messaging::has_confirmation_message() const {
  return _internal_has_confirmation_message();
}
inline void Messaging::set_has_confirmation_message() {
  _impl_._oneof_case_[0] = kConfirmationMessage;
}
inline void Messaging::clear_confirmation_message() {
  if (_internal_has_confirmation_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.confirmation_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::Confirmation* Messaging::release_confirmation_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.confirmation_message)
  if (_internal_has_confirmation_message()) {
    clear_has_message();
    ::qaul::net::messaging::Confirmation* temp = _impl_.message_.confirmation_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.confirmation_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::Confirmation& Messaging::_internal_confirmation_message() const {
  return _internal_has_confirmation_message()
      ? *_impl_.message_.confirmation_message_
      : reinterpret_cast< ::qaul::net::messaging::Confirmation&>(::qaul::net::messaging::_Confirmation_default_instance_);
}
inline const ::qaul::net::messaging::Confirmation& Messaging::confirmation_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.confirmation_message)
  return _internal_confirmation_message();
}
inline ::qaul::net::messaging::Confirmation* Messaging::unsafe_arena_release_confirmation_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.confirmation_message)
  if (_internal_has_confirmation_message()) {
    clear_has_message();
    ::qaul::net::messaging::Confirmation* temp = _impl_.message_.confirmation_message_;
    _impl_.message_.confirmation_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_confirmation_message(::qaul::net::messaging::Confirmation* confirmation_message) {
  clear_message();
  if (confirmation_message) {
    set_has_confirmation_message();
    _impl_.message_.confirmation_message_ = confirmation_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.confirmation_message)
}
inline ::qaul::net::messaging::Confirmation* Messaging::_internal_mutable_confirmation_message() {
  if (!_internal_has_confirmation_message()) {
    clear_message();
    set_has_confirmation_message();
    _impl_.message_.confirmation_message_ = CreateMaybeMessage< ::qaul::net::messaging::Confirmation >(GetArenaForAllocation());
  }
  return _impl_.message_.confirmation_message_;
}
inline ::qaul::net::messaging::Confirmation* Messaging::mutable_confirmation_message() {
  ::qaul::net::messaging::Confirmation* _msg = _internal_mutable_confirmation_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.confirmation_message)
  return _msg;
}

// .qaul.net.messaging.DtnResponse dtn_response = 2;
inline bool Messaging::_internal_has_dtn_response() const {
  return message_case() == kDtnResponse;
}
inline bool Messaging::has_dtn_response() const {
  return _internal_has_dtn_response();
}
inline void Messaging::set_has_dtn_response() {
  _impl_._oneof_case_[0] = kDtnResponse;
}
inline void Messaging::clear_dtn_response() {
  if (_internal_has_dtn_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::DtnResponse* Messaging::release_dtn_response() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.dtn_response)
  if (_internal_has_dtn_response()) {
    clear_has_message();
    ::qaul::net::messaging::DtnResponse* temp = _impl_.message_.dtn_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::DtnResponse& Messaging::_internal_dtn_response() const {
  return _internal_has_dtn_response()
      ? *_impl_.message_.dtn_response_
      : reinterpret_cast< ::qaul::net::messaging::DtnResponse&>(::qaul::net::messaging::_DtnResponse_default_instance_);
}
inline const ::qaul::net::messaging::DtnResponse& Messaging::dtn_response() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.dtn_response)
  return _internal_dtn_response();
}
inline ::qaul::net::messaging::DtnResponse* Messaging::unsafe_arena_release_dtn_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.dtn_response)
  if (_internal_has_dtn_response()) {
    clear_has_message();
    ::qaul::net::messaging::DtnResponse* temp = _impl_.message_.dtn_response_;
    _impl_.message_.dtn_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_dtn_response(::qaul::net::messaging::DtnResponse* dtn_response) {
  clear_message();
  if (dtn_response) {
    set_has_dtn_response();
    _impl_.message_.dtn_response_ = dtn_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.dtn_response)
}
inline ::qaul::net::messaging::DtnResponse* Messaging::_internal_mutable_dtn_response() {
  if (!_internal_has_dtn_response()) {
    clear_message();
    set_has_dtn_response();
    _impl_.message_.dtn_response_ = CreateMaybeMessage< ::qaul::net::messaging::DtnResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_response_;
}
inline ::qaul::net::messaging::DtnResponse* Messaging::mutable_dtn_response() {
  ::qaul::net::messaging::DtnResponse* _msg = _internal_mutable_dtn_response();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.dtn_response)
  return _msg;
}

// .qaul.net.messaging.CryptoService crypto_service = 3;
inline bool Messaging::_internal_has_crypto_service() const {
  return message_case() == kCryptoService;
}
inline bool Messaging::has_crypto_service() const {
  return _internal_has_crypto_service();
}
inline void Messaging::set_has_crypto_service() {
  _impl_._oneof_case_[0] = kCryptoService;
}
inline void Messaging::clear_crypto_service() {
  if (_internal_has_crypto_service()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.crypto_service_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::CryptoService* Messaging::release_crypto_service() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.crypto_service)
  if (_internal_has_crypto_service()) {
    clear_has_message();
    ::qaul::net::messaging::CryptoService* temp = _impl_.message_.crypto_service_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.crypto_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::CryptoService& Messaging::_internal_crypto_service() const {
  return _internal_has_crypto_service()
      ? *_impl_.message_.crypto_service_
      : reinterpret_cast< ::qaul::net::messaging::CryptoService&>(::qaul::net::messaging::_CryptoService_default_instance_);
}
inline const ::qaul::net::messaging::CryptoService& Messaging::crypto_service() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.crypto_service)
  return _internal_crypto_service();
}
inline ::qaul::net::messaging::CryptoService* Messaging::unsafe_arena_release_crypto_service() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.crypto_service)
  if (_internal_has_crypto_service()) {
    clear_has_message();
    ::qaul::net::messaging::CryptoService* temp = _impl_.message_.crypto_service_;
    _impl_.message_.crypto_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_crypto_service(::qaul::net::messaging::CryptoService* crypto_service) {
  clear_message();
  if (crypto_service) {
    set_has_crypto_service();
    _impl_.message_.crypto_service_ = crypto_service;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.crypto_service)
}
inline ::qaul::net::messaging::CryptoService* Messaging::_internal_mutable_crypto_service() {
  if (!_internal_has_crypto_service()) {
    clear_message();
    set_has_crypto_service();
    _impl_.message_.crypto_service_ = CreateMaybeMessage< ::qaul::net::messaging::CryptoService >(GetArenaForAllocation());
  }
  return _impl_.message_.crypto_service_;
}
inline ::qaul::net::messaging::CryptoService* Messaging::mutable_crypto_service() {
  ::qaul::net::messaging::CryptoService* _msg = _internal_mutable_crypto_service();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.crypto_service)
  return _msg;
}

// .qaul.net.messaging.RtcStreamMessage rtc_stream_message = 4;
inline bool Messaging::_internal_has_rtc_stream_message() const {
  return message_case() == kRtcStreamMessage;
}
inline bool Messaging::has_rtc_stream_message() const {
  return _internal_has_rtc_stream_message();
}
inline void Messaging::set_has_rtc_stream_message() {
  _impl_._oneof_case_[0] = kRtcStreamMessage;
}
inline void Messaging::clear_rtc_stream_message() {
  if (_internal_has_rtc_stream_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.rtc_stream_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::RtcStreamMessage* Messaging::release_rtc_stream_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.rtc_stream_message)
  if (_internal_has_rtc_stream_message()) {
    clear_has_message();
    ::qaul::net::messaging::RtcStreamMessage* temp = _impl_.message_.rtc_stream_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.rtc_stream_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::RtcStreamMessage& Messaging::_internal_rtc_stream_message() const {
  return _internal_has_rtc_stream_message()
      ? *_impl_.message_.rtc_stream_message_
      : reinterpret_cast< ::qaul::net::messaging::RtcStreamMessage&>(::qaul::net::messaging::_RtcStreamMessage_default_instance_);
}
inline const ::qaul::net::messaging::RtcStreamMessage& Messaging::rtc_stream_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.rtc_stream_message)
  return _internal_rtc_stream_message();
}
inline ::qaul::net::messaging::RtcStreamMessage* Messaging::unsafe_arena_release_rtc_stream_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.rtc_stream_message)
  if (_internal_has_rtc_stream_message()) {
    clear_has_message();
    ::qaul::net::messaging::RtcStreamMessage* temp = _impl_.message_.rtc_stream_message_;
    _impl_.message_.rtc_stream_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_rtc_stream_message(::qaul::net::messaging::RtcStreamMessage* rtc_stream_message) {
  clear_message();
  if (rtc_stream_message) {
    set_has_rtc_stream_message();
    _impl_.message_.rtc_stream_message_ = rtc_stream_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.rtc_stream_message)
}
inline ::qaul::net::messaging::RtcStreamMessage* Messaging::_internal_mutable_rtc_stream_message() {
  if (!_internal_has_rtc_stream_message()) {
    clear_message();
    set_has_rtc_stream_message();
    _impl_.message_.rtc_stream_message_ = CreateMaybeMessage< ::qaul::net::messaging::RtcStreamMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.rtc_stream_message_;
}
inline ::qaul::net::messaging::RtcStreamMessage* Messaging::mutable_rtc_stream_message() {
  ::qaul::net::messaging::RtcStreamMessage* _msg = _internal_mutable_rtc_stream_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.rtc_stream_message)
  return _msg;
}

// .qaul.net.messaging.GroupInviteMessage group_invite_message = 5;
inline bool Messaging::_internal_has_group_invite_message() const {
  return message_case() == kGroupInviteMessage;
}
inline bool Messaging::has_group_invite_message() const {
  return _internal_has_group_invite_message();
}
inline void Messaging::set_has_group_invite_message() {
  _impl_._oneof_case_[0] = kGroupInviteMessage;
}
inline void Messaging::clear_group_invite_message() {
  if (_internal_has_group_invite_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_invite_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::GroupInviteMessage* Messaging::release_group_invite_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.group_invite_message)
  if (_internal_has_group_invite_message()) {
    clear_has_message();
    ::qaul::net::messaging::GroupInviteMessage* temp = _impl_.message_.group_invite_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_invite_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::GroupInviteMessage& Messaging::_internal_group_invite_message() const {
  return _internal_has_group_invite_message()
      ? *_impl_.message_.group_invite_message_
      : reinterpret_cast< ::qaul::net::messaging::GroupInviteMessage&>(::qaul::net::messaging::_GroupInviteMessage_default_instance_);
}
inline const ::qaul::net::messaging::GroupInviteMessage& Messaging::group_invite_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.group_invite_message)
  return _internal_group_invite_message();
}
inline ::qaul::net::messaging::GroupInviteMessage* Messaging::unsafe_arena_release_group_invite_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.group_invite_message)
  if (_internal_has_group_invite_message()) {
    clear_has_message();
    ::qaul::net::messaging::GroupInviteMessage* temp = _impl_.message_.group_invite_message_;
    _impl_.message_.group_invite_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_group_invite_message(::qaul::net::messaging::GroupInviteMessage* group_invite_message) {
  clear_message();
  if (group_invite_message) {
    set_has_group_invite_message();
    _impl_.message_.group_invite_message_ = group_invite_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.group_invite_message)
}
inline ::qaul::net::messaging::GroupInviteMessage* Messaging::_internal_mutable_group_invite_message() {
  if (!_internal_has_group_invite_message()) {
    clear_message();
    set_has_group_invite_message();
    _impl_.message_.group_invite_message_ = CreateMaybeMessage< ::qaul::net::messaging::GroupInviteMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.group_invite_message_;
}
inline ::qaul::net::messaging::GroupInviteMessage* Messaging::mutable_group_invite_message() {
  ::qaul::net::messaging::GroupInviteMessage* _msg = _internal_mutable_group_invite_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.group_invite_message)
  return _msg;
}

// .qaul.net.messaging.CommonMessage common_message = 6;
inline bool Messaging::_internal_has_common_message() const {
  return message_case() == kCommonMessage;
}
inline bool Messaging::has_common_message() const {
  return _internal_has_common_message();
}
inline void Messaging::set_has_common_message() {
  _impl_._oneof_case_[0] = kCommonMessage;
}
inline void Messaging::clear_common_message() {
  if (_internal_has_common_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.common_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::CommonMessage* Messaging::release_common_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.common_message)
  if (_internal_has_common_message()) {
    clear_has_message();
    ::qaul::net::messaging::CommonMessage* temp = _impl_.message_.common_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.common_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::CommonMessage& Messaging::_internal_common_message() const {
  return _internal_has_common_message()
      ? *_impl_.message_.common_message_
      : reinterpret_cast< ::qaul::net::messaging::CommonMessage&>(::qaul::net::messaging::_CommonMessage_default_instance_);
}
inline const ::qaul::net::messaging::CommonMessage& Messaging::common_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.common_message)
  return _internal_common_message();
}
inline ::qaul::net::messaging::CommonMessage* Messaging::unsafe_arena_release_common_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.common_message)
  if (_internal_has_common_message()) {
    clear_has_message();
    ::qaul::net::messaging::CommonMessage* temp = _impl_.message_.common_message_;
    _impl_.message_.common_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_common_message(::qaul::net::messaging::CommonMessage* common_message) {
  clear_message();
  if (common_message) {
    set_has_common_message();
    _impl_.message_.common_message_ = common_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.common_message)
}
inline ::qaul::net::messaging::CommonMessage* Messaging::_internal_mutable_common_message() {
  if (!_internal_has_common_message()) {
    clear_message();
    set_has_common_message();
    _impl_.message_.common_message_ = CreateMaybeMessage< ::qaul::net::messaging::CommonMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.common_message_;
}
inline ::qaul::net::messaging::CommonMessage* Messaging::mutable_common_message() {
  ::qaul::net::messaging::CommonMessage* _msg = _internal_mutable_common_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.common_message)
  return _msg;
}

inline bool Messaging::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Messaging::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Messaging::MessageCase Messaging::message_case() const {
  return Messaging::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Confirmation

// bytes signature = 1;
inline void Confirmation::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Confirmation::signature() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Confirmation.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Confirmation::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Confirmation.signature)
}
inline std::string* Confirmation::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Confirmation.signature)
  return _s;
}
inline const std::string& Confirmation::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Confirmation::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Confirmation::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Confirmation::release_signature() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Confirmation.signature)
  return _impl_.signature_.Release();
}
inline void Confirmation::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Confirmation.signature)
}

// uint64 received_at = 2;
inline void Confirmation::clear_received_at() {
  _impl_.received_at_ = uint64_t{0u};
}
inline uint64_t Confirmation::_internal_received_at() const {
  return _impl_.received_at_;
}
inline uint64_t Confirmation::received_at() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Confirmation.received_at)
  return _internal_received_at();
}
inline void Confirmation::_internal_set_received_at(uint64_t value) {
  
  _impl_.received_at_ = value;
}
inline void Confirmation::set_received_at(uint64_t value) {
  _internal_set_received_at(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Confirmation.received_at)
}

// -------------------------------------------------------------------

// CryptoService

// -------------------------------------------------------------------

// RtcStreamMessage

// bytes content = 1;
inline void RtcStreamMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& RtcStreamMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.RtcStreamMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcStreamMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.RtcStreamMessage.content)
}
inline std::string* RtcStreamMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.RtcStreamMessage.content)
  return _s;
}
inline const std::string& RtcStreamMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void RtcStreamMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcStreamMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcStreamMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.RtcStreamMessage.content)
  return _impl_.content_.Release();
}
inline void RtcStreamMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.RtcStreamMessage.content)
}

// -------------------------------------------------------------------

// GroupInviteMessage

// bytes content = 1;
inline void GroupInviteMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GroupInviteMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.GroupInviteMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInviteMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.GroupInviteMessage.content)
}
inline std::string* GroupInviteMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.GroupInviteMessage.content)
  return _s;
}
inline const std::string& GroupInviteMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GroupInviteMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInviteMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInviteMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.GroupInviteMessage.content)
  return _impl_.content_.Release();
}
inline void GroupInviteMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.GroupInviteMessage.content)
}

// -------------------------------------------------------------------

// CommonMessage

// bytes message_id = 1;
inline void CommonMessage::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& CommonMessage::message_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.CommonMessage.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonMessage::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.CommonMessage.message_id)
}
inline std::string* CommonMessage::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.CommonMessage.message_id)
  return _s;
}
inline const std::string& CommonMessage::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void CommonMessage::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonMessage::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.CommonMessage.message_id)
  return _impl_.message_id_.Release();
}
inline void CommonMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.CommonMessage.message_id)
}

// bytes group_id = 2;
inline void CommonMessage::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& CommonMessage::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.CommonMessage.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonMessage::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.CommonMessage.group_id)
}
inline std::string* CommonMessage::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.CommonMessage.group_id)
  return _s;
}
inline const std::string& CommonMessage::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void CommonMessage::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonMessage::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonMessage::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.CommonMessage.group_id)
  return _impl_.group_id_.Release();
}
inline void CommonMessage::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.CommonMessage.group_id)
}

// uint64 sent_at = 3;
inline void CommonMessage::clear_sent_at() {
  _impl_.sent_at_ = uint64_t{0u};
}
inline uint64_t CommonMessage::_internal_sent_at() const {
  return _impl_.sent_at_;
}
inline uint64_t CommonMessage::sent_at() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.CommonMessage.sent_at)
  return _internal_sent_at();
}
inline void CommonMessage::_internal_set_sent_at(uint64_t value) {
  
  _impl_.sent_at_ = value;
}
inline void CommonMessage::set_sent_at(uint64_t value) {
  _internal_set_sent_at(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.CommonMessage.sent_at)
}

// .qaul.net.messaging.ChatMessage chat_message = 4;
inline bool CommonMessage::_internal_has_chat_message() const {
  return payload_case() == kChatMessage;
}
inline bool CommonMessage::has_chat_message() const {
  return _internal_has_chat_message();
}
inline void CommonMessage::set_has_chat_message() {
  _impl_._oneof_case_[0] = kChatMessage;
}
inline void CommonMessage::clear_chat_message() {
  if (_internal_has_chat_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.chat_message_;
    }
    clear_has_payload();
  }
}
inline ::qaul::net::messaging::ChatMessage* CommonMessage::release_chat_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.CommonMessage.chat_message)
  if (_internal_has_chat_message()) {
    clear_has_payload();
    ::qaul::net::messaging::ChatMessage* temp = _impl_.payload_.chat_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::ChatMessage& CommonMessage::_internal_chat_message() const {
  return _internal_has_chat_message()
      ? *_impl_.payload_.chat_message_
      : reinterpret_cast< ::qaul::net::messaging::ChatMessage&>(::qaul::net::messaging::_ChatMessage_default_instance_);
}
inline const ::qaul::net::messaging::ChatMessage& CommonMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.CommonMessage.chat_message)
  return _internal_chat_message();
}
inline ::qaul::net::messaging::ChatMessage* CommonMessage::unsafe_arena_release_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.CommonMessage.chat_message)
  if (_internal_has_chat_message()) {
    clear_has_payload();
    ::qaul::net::messaging::ChatMessage* temp = _impl_.payload_.chat_message_;
    _impl_.payload_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommonMessage::unsafe_arena_set_allocated_chat_message(::qaul::net::messaging::ChatMessage* chat_message) {
  clear_payload();
  if (chat_message) {
    set_has_chat_message();
    _impl_.payload_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.CommonMessage.chat_message)
}
inline ::qaul::net::messaging::ChatMessage* CommonMessage::_internal_mutable_chat_message() {
  if (!_internal_has_chat_message()) {
    clear_payload();
    set_has_chat_message();
    _impl_.payload_.chat_message_ = CreateMaybeMessage< ::qaul::net::messaging::ChatMessage >(GetArenaForAllocation());
  }
  return _impl_.payload_.chat_message_;
}
inline ::qaul::net::messaging::ChatMessage* CommonMessage::mutable_chat_message() {
  ::qaul::net::messaging::ChatMessage* _msg = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.CommonMessage.chat_message)
  return _msg;
}

// .qaul.net.messaging.FileMessage file_message = 5;
inline bool CommonMessage::_internal_has_file_message() const {
  return payload_case() == kFileMessage;
}
inline bool CommonMessage::has_file_message() const {
  return _internal_has_file_message();
}
inline void CommonMessage::set_has_file_message() {
  _impl_._oneof_case_[0] = kFileMessage;
}
inline void CommonMessage::clear_file_message() {
  if (_internal_has_file_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.file_message_;
    }
    clear_has_payload();
  }
}
inline ::qaul::net::messaging::FileMessage* CommonMessage::release_file_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.CommonMessage.file_message)
  if (_internal_has_file_message()) {
    clear_has_payload();
    ::qaul::net::messaging::FileMessage* temp = _impl_.payload_.file_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.file_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::FileMessage& CommonMessage::_internal_file_message() const {
  return _internal_has_file_message()
      ? *_impl_.payload_.file_message_
      : reinterpret_cast< ::qaul::net::messaging::FileMessage&>(::qaul::net::messaging::_FileMessage_default_instance_);
}
inline const ::qaul::net::messaging::FileMessage& CommonMessage::file_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.CommonMessage.file_message)
  return _internal_file_message();
}
inline ::qaul::net::messaging::FileMessage* CommonMessage::unsafe_arena_release_file_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.CommonMessage.file_message)
  if (_internal_has_file_message()) {
    clear_has_payload();
    ::qaul::net::messaging::FileMessage* temp = _impl_.payload_.file_message_;
    _impl_.payload_.file_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommonMessage::unsafe_arena_set_allocated_file_message(::qaul::net::messaging::FileMessage* file_message) {
  clear_payload();
  if (file_message) {
    set_has_file_message();
    _impl_.payload_.file_message_ = file_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.CommonMessage.file_message)
}
inline ::qaul::net::messaging::FileMessage* CommonMessage::_internal_mutable_file_message() {
  if (!_internal_has_file_message()) {
    clear_payload();
    set_has_file_message();
    _impl_.payload_.file_message_ = CreateMaybeMessage< ::qaul::net::messaging::FileMessage >(GetArenaForAllocation());
  }
  return _impl_.payload_.file_message_;
}
inline ::qaul::net::messaging::FileMessage* CommonMessage::mutable_file_message() {
  ::qaul::net::messaging::FileMessage* _msg = _internal_mutable_file_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.CommonMessage.file_message)
  return _msg;
}

// .qaul.net.messaging.GroupMessage group_message = 6;
inline bool CommonMessage::_internal_has_group_message() const {
  return payload_case() == kGroupMessage;
}
inline bool CommonMessage::has_group_message() const {
  return _internal_has_group_message();
}
inline void CommonMessage::set_has_group_message() {
  _impl_._oneof_case_[0] = kGroupMessage;
}
inline void CommonMessage::clear_group_message() {
  if (_internal_has_group_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.group_message_;
    }
    clear_has_payload();
  }
}
inline ::qaul::net::messaging::GroupMessage* CommonMessage::release_group_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.CommonMessage.group_message)
  if (_internal_has_group_message()) {
    clear_has_payload();
    ::qaul::net::messaging::GroupMessage* temp = _impl_.payload_.group_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.group_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::GroupMessage& CommonMessage::_internal_group_message() const {
  return _internal_has_group_message()
      ? *_impl_.payload_.group_message_
      : reinterpret_cast< ::qaul::net::messaging::GroupMessage&>(::qaul::net::messaging::_GroupMessage_default_instance_);
}
inline const ::qaul::net::messaging::GroupMessage& CommonMessage::group_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.CommonMessage.group_message)
  return _internal_group_message();
}
inline ::qaul::net::messaging::GroupMessage* CommonMessage::unsafe_arena_release_group_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.CommonMessage.group_message)
  if (_internal_has_group_message()) {
    clear_has_payload();
    ::qaul::net::messaging::GroupMessage* temp = _impl_.payload_.group_message_;
    _impl_.payload_.group_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommonMessage::unsafe_arena_set_allocated_group_message(::qaul::net::messaging::GroupMessage* group_message) {
  clear_payload();
  if (group_message) {
    set_has_group_message();
    _impl_.payload_.group_message_ = group_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.CommonMessage.group_message)
}
inline ::qaul::net::messaging::GroupMessage* CommonMessage::_internal_mutable_group_message() {
  if (!_internal_has_group_message()) {
    clear_payload();
    set_has_group_message();
    _impl_.payload_.group_message_ = CreateMaybeMessage< ::qaul::net::messaging::GroupMessage >(GetArenaForAllocation());
  }
  return _impl_.payload_.group_message_;
}
inline ::qaul::net::messaging::GroupMessage* CommonMessage::mutable_group_message() {
  ::qaul::net::messaging::GroupMessage* _msg = _internal_mutable_group_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.CommonMessage.group_message)
  return _msg;
}

// .qaul.net.messaging.RtcMessage rtc_message = 7;
inline bool CommonMessage::_internal_has_rtc_message() const {
  return payload_case() == kRtcMessage;
}
inline bool CommonMessage::has_rtc_message() const {
  return _internal_has_rtc_message();
}
inline void CommonMessage::set_has_rtc_message() {
  _impl_._oneof_case_[0] = kRtcMessage;
}
inline void CommonMessage::clear_rtc_message() {
  if (_internal_has_rtc_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.rtc_message_;
    }
    clear_has_payload();
  }
}
inline ::qaul::net::messaging::RtcMessage* CommonMessage::release_rtc_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.CommonMessage.rtc_message)
  if (_internal_has_rtc_message()) {
    clear_has_payload();
    ::qaul::net::messaging::RtcMessage* temp = _impl_.payload_.rtc_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.rtc_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::RtcMessage& CommonMessage::_internal_rtc_message() const {
  return _internal_has_rtc_message()
      ? *_impl_.payload_.rtc_message_
      : reinterpret_cast< ::qaul::net::messaging::RtcMessage&>(::qaul::net::messaging::_RtcMessage_default_instance_);
}
inline const ::qaul::net::messaging::RtcMessage& CommonMessage::rtc_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.CommonMessage.rtc_message)
  return _internal_rtc_message();
}
inline ::qaul::net::messaging::RtcMessage* CommonMessage::unsafe_arena_release_rtc_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.CommonMessage.rtc_message)
  if (_internal_has_rtc_message()) {
    clear_has_payload();
    ::qaul::net::messaging::RtcMessage* temp = _impl_.payload_.rtc_message_;
    _impl_.payload_.rtc_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommonMessage::unsafe_arena_set_allocated_rtc_message(::qaul::net::messaging::RtcMessage* rtc_message) {
  clear_payload();
  if (rtc_message) {
    set_has_rtc_message();
    _impl_.payload_.rtc_message_ = rtc_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.CommonMessage.rtc_message)
}
inline ::qaul::net::messaging::RtcMessage* CommonMessage::_internal_mutable_rtc_message() {
  if (!_internal_has_rtc_message()) {
    clear_payload();
    set_has_rtc_message();
    _impl_.payload_.rtc_message_ = CreateMaybeMessage< ::qaul::net::messaging::RtcMessage >(GetArenaForAllocation());
  }
  return _impl_.payload_.rtc_message_;
}
inline ::qaul::net::messaging::RtcMessage* CommonMessage::mutable_rtc_message() {
  ::qaul::net::messaging::RtcMessage* _msg = _internal_mutable_rtc_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.CommonMessage.rtc_message)
  return _msg;
}

inline bool CommonMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void CommonMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline CommonMessage::PayloadCase CommonMessage::payload_case() const {
  return CommonMessage::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChatMessage

// string content = 1;
inline void ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.ChatMessage.content)
}

// -------------------------------------------------------------------

// FileMessage

// bytes content = 1;
inline void FileMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FileMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.FileMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.FileMessage.content)
}
inline std::string* FileMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.FileMessage.content)
  return _s;
}
inline const std::string& FileMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void FileMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* FileMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* FileMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.FileMessage.content)
  return _impl_.content_.Release();
}
inline void FileMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.FileMessage.content)
}

// -------------------------------------------------------------------

// GroupMessage

// bytes content = 1;
inline void GroupMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GroupMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.GroupMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.GroupMessage.content)
}
inline std::string* GroupMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.GroupMessage.content)
  return _s;
}
inline const std::string& GroupMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GroupMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.GroupMessage.content)
  return _impl_.content_.Release();
}
inline void GroupMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.GroupMessage.content)
}

// -------------------------------------------------------------------

// RtcMessage

// bytes content = 1;
inline void RtcMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& RtcMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.RtcMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.RtcMessage.content)
}
inline std::string* RtcMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.RtcMessage.content)
  return _s;
}
inline const std::string& RtcMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void RtcMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.RtcMessage.content)
  return _impl_.content_.Release();
}
inline void RtcMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.RtcMessage.content)
}

// -------------------------------------------------------------------

// Dtn

// bytes container = 1;
inline bool Dtn::_internal_has_container() const {
  return message_case() == kContainer;
}
inline bool Dtn::has_container() const {
  return _internal_has_container();
}
inline void Dtn::set_has_container() {
  _impl_._oneof_case_[0] = kContainer;
}
inline void Dtn::clear_container() {
  if (_internal_has_container()) {
    _impl_.message_.container_.Destroy();
    clear_has_message();
  }
}
inline const std::string& Dtn::container() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Dtn.container)
  return _internal_container();
}
template <typename ArgT0, typename... ArgT>
inline void Dtn::set_container(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_container()) {
    clear_message();
    set_has_container();
    _impl_.message_.container_.InitDefault();
  }
  _impl_.message_.container_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Dtn.container)
}
inline std::string* Dtn::mutable_container() {
  std::string* _s = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Dtn.container)
  return _s;
}
inline const std::string& Dtn::_internal_container() const {
  if (_internal_has_container()) {
    return _impl_.message_.container_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Dtn::_internal_set_container(const std::string& value) {
  if (!_internal_has_container()) {
    clear_message();
    set_has_container();
    _impl_.message_.container_.InitDefault();
  }
  _impl_.message_.container_.Set(value, GetArenaForAllocation());
}
inline std::string* Dtn::_internal_mutable_container() {
  if (!_internal_has_container()) {
    clear_message();
    set_has_container();
    _impl_.message_.container_.InitDefault();
  }
  return _impl_.message_.container_.Mutable(      GetArenaForAllocation());
}
inline std::string* Dtn::release_container() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Dtn.container)
  if (_internal_has_container()) {
    clear_has_message();
    return _impl_.message_.container_.Release();
  } else {
    return nullptr;
  }
}
inline void Dtn::set_allocated_container(std::string* container) {
  if (has_message()) {
    clear_message();
  }
  if (container != nullptr) {
    set_has_container();
    _impl_.message_.container_.InitAllocated(container, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Dtn.container)
}

// .qaul.net.messaging.DtnResponse response = 2;
inline bool Dtn::_internal_has_response() const {
  return message_case() == kResponse;
}
inline bool Dtn::has_response() const {
  return _internal_has_response();
}
inline void Dtn::set_has_response() {
  _impl_._oneof_case_[0] = kResponse;
}
inline void Dtn::clear_response() {
  if (_internal_has_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.response_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::DtnResponse* Dtn::release_response() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Dtn.response)
  if (_internal_has_response()) {
    clear_has_message();
    ::qaul::net::messaging::DtnResponse* temp = _impl_.message_.response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::DtnResponse& Dtn::_internal_response() const {
  return _internal_has_response()
      ? *_impl_.message_.response_
      : reinterpret_cast< ::qaul::net::messaging::DtnResponse&>(::qaul::net::messaging::_DtnResponse_default_instance_);
}
inline const ::qaul::net::messaging::DtnResponse& Dtn::response() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Dtn.response)
  return _internal_response();
}
inline ::qaul::net::messaging::DtnResponse* Dtn::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Dtn.response)
  if (_internal_has_response()) {
    clear_has_message();
    ::qaul::net::messaging::DtnResponse* temp = _impl_.message_.response_;
    _impl_.message_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Dtn::unsafe_arena_set_allocated_response(::qaul::net::messaging::DtnResponse* response) {
  clear_message();
  if (response) {
    set_has_response();
    _impl_.message_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Dtn.response)
}
inline ::qaul::net::messaging::DtnResponse* Dtn::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_message();
    set_has_response();
    _impl_.message_.response_ = CreateMaybeMessage< ::qaul::net::messaging::DtnResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.response_;
}
inline ::qaul::net::messaging::DtnResponse* Dtn::mutable_response() {
  ::qaul::net::messaging::DtnResponse* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Dtn.response)
  return _msg;
}

inline bool Dtn::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Dtn::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Dtn::MessageCase Dtn::message_case() const {
  return Dtn::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DtnResponse

// .qaul.net.messaging.DtnResponse.ResponseType response_type = 1;
inline void DtnResponse::clear_response_type() {
  _impl_.response_type_ = 0;
}
inline ::qaul::net::messaging::DtnResponse_ResponseType DtnResponse::_internal_response_type() const {
  return static_cast< ::qaul::net::messaging::DtnResponse_ResponseType >(_impl_.response_type_);
}
inline ::qaul::net::messaging::DtnResponse_ResponseType DtnResponse::response_type() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.DtnResponse.response_type)
  return _internal_response_type();
}
inline void DtnResponse::_internal_set_response_type(::qaul::net::messaging::DtnResponse_ResponseType value) {
  
  _impl_.response_type_ = value;
}
inline void DtnResponse::set_response_type(::qaul::net::messaging::DtnResponse_ResponseType value) {
  _internal_set_response_type(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.DtnResponse.response_type)
}

// bytes signature = 2;
inline void DtnResponse::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& DtnResponse::signature() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.DtnResponse.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DtnResponse::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.DtnResponse.signature)
}
inline std::string* DtnResponse::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.DtnResponse.signature)
  return _s;
}
inline const std::string& DtnResponse::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void DtnResponse::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* DtnResponse::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* DtnResponse::release_signature() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.DtnResponse.signature)
  return _impl_.signature_.Release();
}
inline void DtnResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.DtnResponse.signature)
}

// .qaul.net.messaging.DtnResponse.Reason reason = 3;
inline void DtnResponse::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::qaul::net::messaging::DtnResponse_Reason DtnResponse::_internal_reason() const {
  return static_cast< ::qaul::net::messaging::DtnResponse_Reason >(_impl_.reason_);
}
inline ::qaul::net::messaging::DtnResponse_Reason DtnResponse::reason() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.DtnResponse.reason)
  return _internal_reason();
}
inline void DtnResponse::_internal_set_reason(::qaul::net::messaging::DtnResponse_Reason value) {
  
  _impl_.reason_ = value;
}
inline void DtnResponse::set_reason(::qaul::net::messaging::DtnResponse_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.DtnResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messaging
}  // namespace net
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::net::messaging::DtnResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::net::messaging::DtnResponse_ResponseType>() {
  return ::qaul::net::messaging::DtnResponse_ResponseType_descriptor();
}
template <> struct is_proto_enum< ::qaul::net::messaging::DtnResponse_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::net::messaging::DtnResponse_Reason>() {
  return ::qaul::net::messaging::DtnResponse_Reason_descriptor();
}
template <> struct is_proto_enum< ::qaul::net::messaging::CryptoState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::net::messaging::CryptoState>() {
  return ::qaul::net::messaging::CryptoState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fmessaging_2fmessaging_2eproto
