// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/chat/chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fchat_2fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fchat_2fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fchat_2fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fchat_2fchat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fchat_2fchat_2eproto;
namespace qaul {
namespace rpc {
namespace chat {
class Chat;
struct ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class ChatContent;
struct ChatContentDefaultTypeInternal;
extern ChatContentDefaultTypeInternal _ChatContent_default_instance_;
class ChatContentMessage;
struct ChatContentMessageDefaultTypeInternal;
extern ChatContentMessageDefaultTypeInternal _ChatContentMessage_default_instance_;
class ChatConversationList;
struct ChatConversationListDefaultTypeInternal;
extern ChatConversationListDefaultTypeInternal _ChatConversationList_default_instance_;
class ChatConversationRequest;
struct ChatConversationRequestDefaultTypeInternal;
extern ChatConversationRequestDefaultTypeInternal _ChatConversationRequest_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ChatMessageSend;
struct ChatMessageSendDefaultTypeInternal;
extern ChatMessageSendDefaultTypeInternal _ChatMessageSend_default_instance_;
class FileContent;
struct FileContentDefaultTypeInternal;
extern FileContentDefaultTypeInternal _FileContent_default_instance_;
class GroupEvent;
struct GroupEventDefaultTypeInternal;
extern GroupEventDefaultTypeInternal _GroupEvent_default_instance_;
class MessageReceptionConfirmed;
struct MessageReceptionConfirmedDefaultTypeInternal;
extern MessageReceptionConfirmedDefaultTypeInternal _MessageReceptionConfirmed_default_instance_;
}  // namespace chat
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::chat::Chat* Arena::CreateMaybeMessage<::qaul::rpc::chat::Chat>(Arena*);
template<> ::qaul::rpc::chat::ChatContent* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatContent>(Arena*);
template<> ::qaul::rpc::chat::ChatContentMessage* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatContentMessage>(Arena*);
template<> ::qaul::rpc::chat::ChatConversationList* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatConversationList>(Arena*);
template<> ::qaul::rpc::chat::ChatConversationRequest* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatConversationRequest>(Arena*);
template<> ::qaul::rpc::chat::ChatMessage* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatMessage>(Arena*);
template<> ::qaul::rpc::chat::ChatMessageSend* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatMessageSend>(Arena*);
template<> ::qaul::rpc::chat::FileContent* Arena::CreateMaybeMessage<::qaul::rpc::chat::FileContent>(Arena*);
template<> ::qaul::rpc::chat::GroupEvent* Arena::CreateMaybeMessage<::qaul::rpc::chat::GroupEvent>(Arena*);
template<> ::qaul::rpc::chat::MessageReceptionConfirmed* Arena::CreateMaybeMessage<::qaul::rpc::chat::MessageReceptionConfirmed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace chat {

enum MessageStatus : int {
  SENDING = 0,
  SENT = 1,
  CONFIRMED = 2,
  CONFIRMED_BY_ALL = 3,
  RECEIVING = 4,
  RECEIVED = 5,
  MessageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageStatus_IsValid(int value);
constexpr MessageStatus MessageStatus_MIN = SENDING;
constexpr MessageStatus MessageStatus_MAX = RECEIVED;
constexpr int MessageStatus_ARRAYSIZE = MessageStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageStatus_descriptor();
template<typename T>
inline const std::string& MessageStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageStatus_descriptor(), enum_t_value);
}
inline bool MessageStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageStatus>(
    MessageStatus_descriptor(), name, value);
}
enum GroupEventType : int {
  DEFAULT = 0,
  INVITED = 1,
  JOINED = 2,
  LEFT = 3,
  REMOVED = 4,
  CLOSED = 5,
  CREATED = 6,
  INVITE_ACCEPTED = 7,
  GroupEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupEventType_IsValid(int value);
constexpr GroupEventType GroupEventType_MIN = DEFAULT;
constexpr GroupEventType GroupEventType_MAX = INVITE_ACCEPTED;
constexpr int GroupEventType_ARRAYSIZE = GroupEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupEventType_descriptor();
template<typename T>
inline const std::string& GroupEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupEventType_descriptor(), enum_t_value);
}
inline bool GroupEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupEventType>(
    GroupEventType_descriptor(), name, value);
}
// ===================================================================

class Chat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.Chat) */ {
 public:
  inline Chat() : Chat(nullptr) {}
  ~Chat() override;
  explicit PROTOBUF_CONSTEXPR Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kConversationRequest = 3,
    kConversationList = 4,
    kSend = 5,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Chat& from) {
    Chat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.Chat";
  }
  protected:
  explicit Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationRequestFieldNumber = 3,
    kConversationListFieldNumber = 4,
    kSendFieldNumber = 5,
  };
  // .qaul.rpc.chat.ChatConversationRequest conversation_request = 3;
  bool has_conversation_request() const;
  private:
  bool _internal_has_conversation_request() const;
  public:
  void clear_conversation_request();
  const ::qaul::rpc::chat::ChatConversationRequest& conversation_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatConversationRequest* release_conversation_request();
  ::qaul::rpc::chat::ChatConversationRequest* mutable_conversation_request();
  void set_allocated_conversation_request(::qaul::rpc::chat::ChatConversationRequest* conversation_request);
  private:
  const ::qaul::rpc::chat::ChatConversationRequest& _internal_conversation_request() const;
  ::qaul::rpc::chat::ChatConversationRequest* _internal_mutable_conversation_request();
  public:
  void unsafe_arena_set_allocated_conversation_request(
      ::qaul::rpc::chat::ChatConversationRequest* conversation_request);
  ::qaul::rpc::chat::ChatConversationRequest* unsafe_arena_release_conversation_request();

  // .qaul.rpc.chat.ChatConversationList conversation_list = 4;
  bool has_conversation_list() const;
  private:
  bool _internal_has_conversation_list() const;
  public:
  void clear_conversation_list();
  const ::qaul::rpc::chat::ChatConversationList& conversation_list() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatConversationList* release_conversation_list();
  ::qaul::rpc::chat::ChatConversationList* mutable_conversation_list();
  void set_allocated_conversation_list(::qaul::rpc::chat::ChatConversationList* conversation_list);
  private:
  const ::qaul::rpc::chat::ChatConversationList& _internal_conversation_list() const;
  ::qaul::rpc::chat::ChatConversationList* _internal_mutable_conversation_list();
  public:
  void unsafe_arena_set_allocated_conversation_list(
      ::qaul::rpc::chat::ChatConversationList* conversation_list);
  ::qaul::rpc::chat::ChatConversationList* unsafe_arena_release_conversation_list();

  // .qaul.rpc.chat.ChatMessageSend send = 5;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  const ::qaul::rpc::chat::ChatMessageSend& send() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatMessageSend* release_send();
  ::qaul::rpc::chat::ChatMessageSend* mutable_send();
  void set_allocated_send(::qaul::rpc::chat::ChatMessageSend* send);
  private:
  const ::qaul::rpc::chat::ChatMessageSend& _internal_send() const;
  ::qaul::rpc::chat::ChatMessageSend* _internal_mutable_send();
  public:
  void unsafe_arena_set_allocated_send(
      ::qaul::rpc::chat::ChatMessageSend* send);
  ::qaul::rpc::chat::ChatMessageSend* unsafe_arena_release_send();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.Chat)
 private:
  class _Internal;
  void set_has_conversation_request();
  void set_has_conversation_list();
  void set_has_send();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::chat::ChatConversationRequest* conversation_request_;
      ::qaul::rpc::chat::ChatConversationList* conversation_list_;
      ::qaul::rpc::chat::ChatMessageSend* send_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatConversationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatConversationRequest) */ {
 public:
  inline ChatConversationRequest() : ChatConversationRequest(nullptr) {}
  ~ChatConversationRequest() override;
  explicit PROTOBUF_CONSTEXPR ChatConversationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatConversationRequest(const ChatConversationRequest& from);
  ChatConversationRequest(ChatConversationRequest&& from) noexcept
    : ChatConversationRequest() {
    *this = ::std::move(from);
  }

  inline ChatConversationRequest& operator=(const ChatConversationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatConversationRequest& operator=(ChatConversationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatConversationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatConversationRequest* internal_default_instance() {
    return reinterpret_cast<const ChatConversationRequest*>(
               &_ChatConversationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatConversationRequest& a, ChatConversationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatConversationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatConversationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatConversationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatConversationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatConversationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatConversationRequest& from) {
    ChatConversationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatConversationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatConversationRequest";
  }
  protected:
  explicit ChatConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kLastIndexFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // uint64 last_index = 2;
  void clear_last_index();
  uint64_t last_index() const;
  void set_last_index(uint64_t value);
  private:
  uint64_t _internal_last_index() const;
  void _internal_set_last_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatConversationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    uint64_t last_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatConversationList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatConversationList) */ {
 public:
  inline ChatConversationList() : ChatConversationList(nullptr) {}
  ~ChatConversationList() override;
  explicit PROTOBUF_CONSTEXPR ChatConversationList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatConversationList(const ChatConversationList& from);
  ChatConversationList(ChatConversationList&& from) noexcept
    : ChatConversationList() {
    *this = ::std::move(from);
  }

  inline ChatConversationList& operator=(const ChatConversationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatConversationList& operator=(ChatConversationList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatConversationList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatConversationList* internal_default_instance() {
    return reinterpret_cast<const ChatConversationList*>(
               &_ChatConversationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatConversationList& a, ChatConversationList& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatConversationList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatConversationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatConversationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatConversationList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatConversationList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatConversationList& from) {
    ChatConversationList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatConversationList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatConversationList";
  }
  protected:
  explicit ChatConversationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageListFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated .qaul.rpc.chat.ChatMessage message_list = 2;
  int message_list_size() const;
  private:
  int _internal_message_list_size() const;
  public:
  void clear_message_list();
  ::qaul::rpc::chat::ChatMessage* mutable_message_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >*
      mutable_message_list();
  private:
  const ::qaul::rpc::chat::ChatMessage& _internal_message_list(int index) const;
  ::qaul::rpc::chat::ChatMessage* _internal_add_message_list();
  public:
  const ::qaul::rpc::chat::ChatMessage& message_list(int index) const;
  ::qaul::rpc::chat::ChatMessage* add_message_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >&
      message_list() const;

  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatConversationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage > message_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageReceptionConfirmedFieldNumber = 10,
    kSenderIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kGroupIdFieldNumber = 5,
    kContentFieldNumber = 8,
    kIndexFieldNumber = 1,
    kSentAtFieldNumber = 6,
    kReceivedAtFieldNumber = 7,
    kStatusFieldNumber = 4,
  };
  // repeated .qaul.rpc.chat.MessageReceptionConfirmed message_reception_confirmed = 10;
  int message_reception_confirmed_size() const;
  private:
  int _internal_message_reception_confirmed_size() const;
  public:
  void clear_message_reception_confirmed();
  ::qaul::rpc::chat::MessageReceptionConfirmed* mutable_message_reception_confirmed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::MessageReceptionConfirmed >*
      mutable_message_reception_confirmed();
  private:
  const ::qaul::rpc::chat::MessageReceptionConfirmed& _internal_message_reception_confirmed(int index) const;
  ::qaul::rpc::chat::MessageReceptionConfirmed* _internal_add_message_reception_confirmed();
  public:
  const ::qaul::rpc::chat::MessageReceptionConfirmed& message_reception_confirmed(int index) const;
  ::qaul::rpc::chat::MessageReceptionConfirmed* add_message_reception_confirmed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::MessageReceptionConfirmed >&
      message_reception_confirmed() const;

  // bytes sender_id = 2;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // bytes message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bytes group_id = 5;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes content = 8;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 index = 1;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint64 sent_at = 6;
  void clear_sent_at();
  uint64_t sent_at() const;
  void set_sent_at(uint64_t value);
  private:
  uint64_t _internal_sent_at() const;
  void _internal_set_sent_at(uint64_t value);
  public:

  // uint64 received_at = 7;
  void clear_received_at();
  uint64_t received_at() const;
  void set_received_at(uint64_t value);
  private:
  uint64_t _internal_received_at() const;
  void _internal_set_received_at(uint64_t value);
  public:

  // .qaul.rpc.chat.MessageStatus status = 4;
  void clear_status();
  ::qaul::rpc::chat::MessageStatus status() const;
  void set_status(::qaul::rpc::chat::MessageStatus value);
  private:
  ::qaul::rpc::chat::MessageStatus _internal_status() const;
  void _internal_set_status(::qaul::rpc::chat::MessageStatus value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::MessageReceptionConfirmed > message_reception_confirmed_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t index_;
    uint64_t sent_at_;
    uint64_t received_at_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class MessageReceptionConfirmed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.MessageReceptionConfirmed) */ {
 public:
  inline MessageReceptionConfirmed() : MessageReceptionConfirmed(nullptr) {}
  ~MessageReceptionConfirmed() override;
  explicit PROTOBUF_CONSTEXPR MessageReceptionConfirmed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageReceptionConfirmed(const MessageReceptionConfirmed& from);
  MessageReceptionConfirmed(MessageReceptionConfirmed&& from) noexcept
    : MessageReceptionConfirmed() {
    *this = ::std::move(from);
  }

  inline MessageReceptionConfirmed& operator=(const MessageReceptionConfirmed& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageReceptionConfirmed& operator=(MessageReceptionConfirmed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageReceptionConfirmed& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageReceptionConfirmed* internal_default_instance() {
    return reinterpret_cast<const MessageReceptionConfirmed*>(
               &_MessageReceptionConfirmed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MessageReceptionConfirmed& a, MessageReceptionConfirmed& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageReceptionConfirmed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageReceptionConfirmed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageReceptionConfirmed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageReceptionConfirmed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageReceptionConfirmed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageReceptionConfirmed& from) {
    MessageReceptionConfirmed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageReceptionConfirmed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.MessageReceptionConfirmed";
  }
  protected:
  explicit MessageReceptionConfirmed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kConfirmedAtFieldNumber = 2,
  };
  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint64 confirmed_at = 2;
  void clear_confirmed_at();
  uint64_t confirmed_at() const;
  void set_confirmed_at(uint64_t value);
  private:
  uint64_t _internal_confirmed_at() const;
  void _internal_set_confirmed_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.MessageReceptionConfirmed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    uint64_t confirmed_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatContentMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatContentMessage) */ {
 public:
  inline ChatContentMessage() : ChatContentMessage(nullptr) {}
  ~ChatContentMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatContentMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatContentMessage(const ChatContentMessage& from);
  ChatContentMessage(ChatContentMessage&& from) noexcept
    : ChatContentMessage() {
    *this = ::std::move(from);
  }

  inline ChatContentMessage& operator=(const ChatContentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatContentMessage& operator=(ChatContentMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatContentMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kChatContent = 1,
    kFileContent = 2,
    kGroupEvent = 3,
    MESSAGE_NOT_SET = 0,
  };

  static inline const ChatContentMessage* internal_default_instance() {
    return reinterpret_cast<const ChatContentMessage*>(
               &_ChatContentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatContentMessage& a, ChatContentMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatContentMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatContentMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatContentMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatContentMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatContentMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatContentMessage& from) {
    ChatContentMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatContentMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatContentMessage";
  }
  protected:
  explicit ChatContentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatContentFieldNumber = 1,
    kFileContentFieldNumber = 2,
    kGroupEventFieldNumber = 3,
  };
  // .qaul.rpc.chat.ChatContent chat_content = 1;
  bool has_chat_content() const;
  private:
  bool _internal_has_chat_content() const;
  public:
  void clear_chat_content();
  const ::qaul::rpc::chat::ChatContent& chat_content() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatContent* release_chat_content();
  ::qaul::rpc::chat::ChatContent* mutable_chat_content();
  void set_allocated_chat_content(::qaul::rpc::chat::ChatContent* chat_content);
  private:
  const ::qaul::rpc::chat::ChatContent& _internal_chat_content() const;
  ::qaul::rpc::chat::ChatContent* _internal_mutable_chat_content();
  public:
  void unsafe_arena_set_allocated_chat_content(
      ::qaul::rpc::chat::ChatContent* chat_content);
  ::qaul::rpc::chat::ChatContent* unsafe_arena_release_chat_content();

  // .qaul.rpc.chat.FileContent file_content = 2;
  bool has_file_content() const;
  private:
  bool _internal_has_file_content() const;
  public:
  void clear_file_content();
  const ::qaul::rpc::chat::FileContent& file_content() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::FileContent* release_file_content();
  ::qaul::rpc::chat::FileContent* mutable_file_content();
  void set_allocated_file_content(::qaul::rpc::chat::FileContent* file_content);
  private:
  const ::qaul::rpc::chat::FileContent& _internal_file_content() const;
  ::qaul::rpc::chat::FileContent* _internal_mutable_file_content();
  public:
  void unsafe_arena_set_allocated_file_content(
      ::qaul::rpc::chat::FileContent* file_content);
  ::qaul::rpc::chat::FileContent* unsafe_arena_release_file_content();

  // .qaul.rpc.chat.GroupEvent group_event = 3;
  bool has_group_event() const;
  private:
  bool _internal_has_group_event() const;
  public:
  void clear_group_event();
  const ::qaul::rpc::chat::GroupEvent& group_event() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::GroupEvent* release_group_event();
  ::qaul::rpc::chat::GroupEvent* mutable_group_event();
  void set_allocated_group_event(::qaul::rpc::chat::GroupEvent* group_event);
  private:
  const ::qaul::rpc::chat::GroupEvent& _internal_group_event() const;
  ::qaul::rpc::chat::GroupEvent* _internal_mutable_group_event();
  public:
  void unsafe_arena_set_allocated_group_event(
      ::qaul::rpc::chat::GroupEvent* group_event);
  ::qaul::rpc::chat::GroupEvent* unsafe_arena_release_group_event();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatContentMessage)
 private:
  class _Internal;
  void set_has_chat_content();
  void set_has_file_content();
  void set_has_group_event();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::chat::ChatContent* chat_content_;
      ::qaul::rpc::chat::FileContent* file_content_;
      ::qaul::rpc::chat::GroupEvent* group_event_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatContent) */ {
 public:
  inline ChatContent() : ChatContent(nullptr) {}
  ~ChatContent() override;
  explicit PROTOBUF_CONSTEXPR ChatContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatContent(const ChatContent& from);
  ChatContent(ChatContent&& from) noexcept
    : ChatContent() {
    *this = ::std::move(from);
  }

  inline ChatContent& operator=(const ChatContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatContent& operator=(ChatContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatContent* internal_default_instance() {
    return reinterpret_cast<const ChatContent*>(
               &_ChatContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatContent& a, ChatContent& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatContent& from) {
    ChatContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatContent";
  }
  protected:
  explicit ChatContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class FileContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.FileContent) */ {
 public:
  inline FileContent() : FileContent(nullptr) {}
  ~FileContent() override;
  explicit PROTOBUF_CONSTEXPR FileContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileContent(const FileContent& from);
  FileContent(FileContent&& from) noexcept
    : FileContent() {
    *this = ::std::move(from);
  }

  inline FileContent& operator=(const FileContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileContent& operator=(FileContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileContent* internal_default_instance() {
    return reinterpret_cast<const FileContent*>(
               &_FileContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FileContent& a, FileContent& b) {
    a.Swap(&b);
  }
  inline void Swap(FileContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileContent& from) {
    FileContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.FileContent";
  }
  protected:
  explicit FileContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kFileExtensionFieldNumber = 3,
    kFileDescriptionFieldNumber = 5,
    kFileIdFieldNumber = 1,
    kFileSizeFieldNumber = 4,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_extension = 3;
  void clear_file_extension();
  const std::string& file_extension() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_extension(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_extension();
  PROTOBUF_NODISCARD std::string* release_file_extension();
  void set_allocated_file_extension(std::string* file_extension);
  private:
  const std::string& _internal_file_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_extension(const std::string& value);
  std::string* _internal_mutable_file_extension();
  public:

  // string file_description = 5;
  void clear_file_description();
  const std::string& file_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_description();
  PROTOBUF_NODISCARD std::string* release_file_description();
  void set_allocated_file_description(std::string* file_description);
  private:
  const std::string& _internal_file_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_description(const std::string& value);
  std::string* _internal_mutable_file_description();
  public:

  // uint64 file_id = 1;
  void clear_file_id();
  uint64_t file_id() const;
  void set_file_id(uint64_t value);
  private:
  uint64_t _internal_file_id() const;
  void _internal_set_file_id(uint64_t value);
  public:

  // uint32 file_size = 4;
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.FileContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_extension_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_description_;
    uint64_t file_id_;
    uint32_t file_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class GroupEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.GroupEvent) */ {
 public:
  inline GroupEvent() : GroupEvent(nullptr) {}
  ~GroupEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupEvent(const GroupEvent& from);
  GroupEvent(GroupEvent&& from) noexcept
    : GroupEvent() {
    *this = ::std::move(from);
  }

  inline GroupEvent& operator=(const GroupEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupEvent& operator=(GroupEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupEvent* internal_default_instance() {
    return reinterpret_cast<const GroupEvent*>(
               &_GroupEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupEvent& a, GroupEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupEvent& from) {
    GroupEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.GroupEvent";
  }
  protected:
  explicit GroupEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .qaul.rpc.chat.GroupEventType event_type = 1;
  void clear_event_type();
  ::qaul::rpc::chat::GroupEventType event_type() const;
  void set_event_type(::qaul::rpc::chat::GroupEventType value);
  private:
  ::qaul::rpc::chat::GroupEventType _internal_event_type() const;
  void _internal_set_event_type(::qaul::rpc::chat::GroupEventType value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.GroupEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    int event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessageSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatMessageSend) */ {
 public:
  inline ChatMessageSend() : ChatMessageSend(nullptr) {}
  ~ChatMessageSend() override;
  explicit PROTOBUF_CONSTEXPR ChatMessageSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessageSend(const ChatMessageSend& from);
  ChatMessageSend(ChatMessageSend&& from) noexcept
    : ChatMessageSend() {
    *this = ::std::move(from);
  }

  inline ChatMessageSend& operator=(const ChatMessageSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageSend& operator=(ChatMessageSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessageSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessageSend* internal_default_instance() {
    return reinterpret_cast<const ChatMessageSend*>(
               &_ChatMessageSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChatMessageSend& a, ChatMessageSend& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessageSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessageSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessageSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessageSend& from) {
    ChatMessageSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatMessageSend";
  }
  protected:
  explicit ChatMessageSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatMessageSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chat

// .qaul.rpc.chat.ChatConversationRequest conversation_request = 3;
inline bool Chat::_internal_has_conversation_request() const {
  return message_case() == kConversationRequest;
}
inline bool Chat::has_conversation_request() const {
  return _internal_has_conversation_request();
}
inline void Chat::set_has_conversation_request() {
  _impl_._oneof_case_[0] = kConversationRequest;
}
inline void Chat::clear_conversation_request() {
  if (_internal_has_conversation_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.conversation_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::release_conversation_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.conversation_request)
  if (_internal_has_conversation_request()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationRequest* temp = _impl_.message_.conversation_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.conversation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatConversationRequest& Chat::_internal_conversation_request() const {
  return _internal_has_conversation_request()
      ? *_impl_.message_.conversation_request_
      : reinterpret_cast< ::qaul::rpc::chat::ChatConversationRequest&>(::qaul::rpc::chat::_ChatConversationRequest_default_instance_);
}
inline const ::qaul::rpc::chat::ChatConversationRequest& Chat::conversation_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.conversation_request)
  return _internal_conversation_request();
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::unsafe_arena_release_conversation_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.conversation_request)
  if (_internal_has_conversation_request()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationRequest* temp = _impl_.message_.conversation_request_;
    _impl_.message_.conversation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_conversation_request(::qaul::rpc::chat::ChatConversationRequest* conversation_request) {
  clear_message();
  if (conversation_request) {
    set_has_conversation_request();
    _impl_.message_.conversation_request_ = conversation_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.conversation_request)
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::_internal_mutable_conversation_request() {
  if (!_internal_has_conversation_request()) {
    clear_message();
    set_has_conversation_request();
    _impl_.message_.conversation_request_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatConversationRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.conversation_request_;
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::mutable_conversation_request() {
  ::qaul::rpc::chat::ChatConversationRequest* _msg = _internal_mutable_conversation_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.conversation_request)
  return _msg;
}

// .qaul.rpc.chat.ChatConversationList conversation_list = 4;
inline bool Chat::_internal_has_conversation_list() const {
  return message_case() == kConversationList;
}
inline bool Chat::has_conversation_list() const {
  return _internal_has_conversation_list();
}
inline void Chat::set_has_conversation_list() {
  _impl_._oneof_case_[0] = kConversationList;
}
inline void Chat::clear_conversation_list() {
  if (_internal_has_conversation_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.conversation_list_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::release_conversation_list() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.conversation_list)
  if (_internal_has_conversation_list()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationList* temp = _impl_.message_.conversation_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.conversation_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatConversationList& Chat::_internal_conversation_list() const {
  return _internal_has_conversation_list()
      ? *_impl_.message_.conversation_list_
      : reinterpret_cast< ::qaul::rpc::chat::ChatConversationList&>(::qaul::rpc::chat::_ChatConversationList_default_instance_);
}
inline const ::qaul::rpc::chat::ChatConversationList& Chat::conversation_list() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.conversation_list)
  return _internal_conversation_list();
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::unsafe_arena_release_conversation_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.conversation_list)
  if (_internal_has_conversation_list()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationList* temp = _impl_.message_.conversation_list_;
    _impl_.message_.conversation_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_conversation_list(::qaul::rpc::chat::ChatConversationList* conversation_list) {
  clear_message();
  if (conversation_list) {
    set_has_conversation_list();
    _impl_.message_.conversation_list_ = conversation_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.conversation_list)
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::_internal_mutable_conversation_list() {
  if (!_internal_has_conversation_list()) {
    clear_message();
    set_has_conversation_list();
    _impl_.message_.conversation_list_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatConversationList >(GetArenaForAllocation());
  }
  return _impl_.message_.conversation_list_;
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::mutable_conversation_list() {
  ::qaul::rpc::chat::ChatConversationList* _msg = _internal_mutable_conversation_list();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.conversation_list)
  return _msg;
}

// .qaul.rpc.chat.ChatMessageSend send = 5;
inline bool Chat::_internal_has_send() const {
  return message_case() == kSend;
}
inline bool Chat::has_send() const {
  return _internal_has_send();
}
inline void Chat::set_has_send() {
  _impl_._oneof_case_[0] = kSend;
}
inline void Chat::clear_send() {
  if (_internal_has_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::release_send() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.send)
  if (_internal_has_send()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatMessageSend* temp = _impl_.message_.send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatMessageSend& Chat::_internal_send() const {
  return _internal_has_send()
      ? *_impl_.message_.send_
      : reinterpret_cast< ::qaul::rpc::chat::ChatMessageSend&>(::qaul::rpc::chat::_ChatMessageSend_default_instance_);
}
inline const ::qaul::rpc::chat::ChatMessageSend& Chat::send() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.send)
  return _internal_send();
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::unsafe_arena_release_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.send)
  if (_internal_has_send()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatMessageSend* temp = _impl_.message_.send_;
    _impl_.message_.send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_send(::qaul::rpc::chat::ChatMessageSend* send) {
  clear_message();
  if (send) {
    set_has_send();
    _impl_.message_.send_ = send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.send)
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::_internal_mutable_send() {
  if (!_internal_has_send()) {
    clear_message();
    set_has_send();
    _impl_.message_.send_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatMessageSend >(GetArenaForAllocation());
  }
  return _impl_.message_.send_;
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::mutable_send() {
  ::qaul::rpc::chat::ChatMessageSend* _msg = _internal_mutable_send();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.send)
  return _msg;
}

inline bool Chat::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Chat::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Chat::MessageCase Chat::message_case() const {
  return Chat::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChatConversationRequest

// bytes group_id = 1;
inline void ChatConversationRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& ChatConversationRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatConversationRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatConversationRequest.group_id)
}
inline std::string* ChatConversationRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatConversationRequest.group_id)
  return _s;
}
inline const std::string& ChatConversationRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void ChatConversationRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatConversationRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatConversationRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatConversationRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void ChatConversationRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatConversationRequest.group_id)
}

// uint64 last_index = 2;
inline void ChatConversationRequest::clear_last_index() {
  _impl_.last_index_ = uint64_t{0u};
}
inline uint64_t ChatConversationRequest::_internal_last_index() const {
  return _impl_.last_index_;
}
inline uint64_t ChatConversationRequest::last_index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationRequest.last_index)
  return _internal_last_index();
}
inline void ChatConversationRequest::_internal_set_last_index(uint64_t value) {
  
  _impl_.last_index_ = value;
}
inline void ChatConversationRequest::set_last_index(uint64_t value) {
  _internal_set_last_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatConversationRequest.last_index)
}

// -------------------------------------------------------------------

// ChatConversationList

// bytes group_id = 1;
inline void ChatConversationList::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& ChatConversationList::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationList.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatConversationList::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatConversationList.group_id)
}
inline std::string* ChatConversationList::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatConversationList.group_id)
  return _s;
}
inline const std::string& ChatConversationList::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void ChatConversationList::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatConversationList::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatConversationList::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatConversationList.group_id)
  return _impl_.group_id_.Release();
}
inline void ChatConversationList::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatConversationList.group_id)
}

// repeated .qaul.rpc.chat.ChatMessage message_list = 2;
inline int ChatConversationList::_internal_message_list_size() const {
  return _impl_.message_list_.size();
}
inline int ChatConversationList::message_list_size() const {
  return _internal_message_list_size();
}
inline void ChatConversationList::clear_message_list() {
  _impl_.message_list_.Clear();
}
inline ::qaul::rpc::chat::ChatMessage* ChatConversationList::mutable_message_list(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatConversationList.message_list)
  return _impl_.message_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >*
ChatConversationList::mutable_message_list() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.chat.ChatConversationList.message_list)
  return &_impl_.message_list_;
}
inline const ::qaul::rpc::chat::ChatMessage& ChatConversationList::_internal_message_list(int index) const {
  return _impl_.message_list_.Get(index);
}
inline const ::qaul::rpc::chat::ChatMessage& ChatConversationList::message_list(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationList.message_list)
  return _internal_message_list(index);
}
inline ::qaul::rpc::chat::ChatMessage* ChatConversationList::_internal_add_message_list() {
  return _impl_.message_list_.Add();
}
inline ::qaul::rpc::chat::ChatMessage* ChatConversationList::add_message_list() {
  ::qaul::rpc::chat::ChatMessage* _add = _internal_add_message_list();
  // @@protoc_insertion_point(field_add:qaul.rpc.chat.ChatConversationList.message_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >&
ChatConversationList::message_list() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.chat.ChatConversationList.message_list)
  return _impl_.message_list_;
}

// -------------------------------------------------------------------

// ChatMessage

// uint64 index = 1;
inline void ChatMessage::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t ChatMessage::index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.index)
  return _internal_index();
}
inline void ChatMessage::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void ChatMessage::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.index)
}

// bytes sender_id = 2;
inline void ChatMessage::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.sender_id)
}
inline std::string* ChatMessage::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.sender_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void ChatMessage::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.sender_id)
  return _impl_.sender_id_.Release();
}
inline void ChatMessage::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.sender_id)
}

// bytes message_id = 3;
inline void ChatMessage::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::message_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.message_id)
}
inline std::string* ChatMessage::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.message_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void ChatMessage::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.message_id)
  return _impl_.message_id_.Release();
}
inline void ChatMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.message_id)
}

// .qaul.rpc.chat.MessageStatus status = 4;
inline void ChatMessage::clear_status() {
  _impl_.status_ = 0;
}
inline ::qaul::rpc::chat::MessageStatus ChatMessage::_internal_status() const {
  return static_cast< ::qaul::rpc::chat::MessageStatus >(_impl_.status_);
}
inline ::qaul::rpc::chat::MessageStatus ChatMessage::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.status)
  return _internal_status();
}
inline void ChatMessage::_internal_set_status(::qaul::rpc::chat::MessageStatus value) {
  
  _impl_.status_ = value;
}
inline void ChatMessage::set_status(::qaul::rpc::chat::MessageStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.status)
}

// repeated .qaul.rpc.chat.MessageReceptionConfirmed message_reception_confirmed = 10;
inline int ChatMessage::_internal_message_reception_confirmed_size() const {
  return _impl_.message_reception_confirmed_.size();
}
inline int ChatMessage::message_reception_confirmed_size() const {
  return _internal_message_reception_confirmed_size();
}
inline void ChatMessage::clear_message_reception_confirmed() {
  _impl_.message_reception_confirmed_.Clear();
}
inline ::qaul::rpc::chat::MessageReceptionConfirmed* ChatMessage::mutable_message_reception_confirmed(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.message_reception_confirmed)
  return _impl_.message_reception_confirmed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::MessageReceptionConfirmed >*
ChatMessage::mutable_message_reception_confirmed() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.chat.ChatMessage.message_reception_confirmed)
  return &_impl_.message_reception_confirmed_;
}
inline const ::qaul::rpc::chat::MessageReceptionConfirmed& ChatMessage::_internal_message_reception_confirmed(int index) const {
  return _impl_.message_reception_confirmed_.Get(index);
}
inline const ::qaul::rpc::chat::MessageReceptionConfirmed& ChatMessage::message_reception_confirmed(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.message_reception_confirmed)
  return _internal_message_reception_confirmed(index);
}
inline ::qaul::rpc::chat::MessageReceptionConfirmed* ChatMessage::_internal_add_message_reception_confirmed() {
  return _impl_.message_reception_confirmed_.Add();
}
inline ::qaul::rpc::chat::MessageReceptionConfirmed* ChatMessage::add_message_reception_confirmed() {
  ::qaul::rpc::chat::MessageReceptionConfirmed* _add = _internal_add_message_reception_confirmed();
  // @@protoc_insertion_point(field_add:qaul.rpc.chat.ChatMessage.message_reception_confirmed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::MessageReceptionConfirmed >&
ChatMessage::message_reception_confirmed() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.chat.ChatMessage.message_reception_confirmed)
  return _impl_.message_reception_confirmed_;
}

// bytes group_id = 5;
inline void ChatMessage::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.group_id)
}
inline std::string* ChatMessage::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.group_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void ChatMessage::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.group_id)
  return _impl_.group_id_.Release();
}
inline void ChatMessage::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.group_id)
}

// uint64 sent_at = 6;
inline void ChatMessage::clear_sent_at() {
  _impl_.sent_at_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_sent_at() const {
  return _impl_.sent_at_;
}
inline uint64_t ChatMessage::sent_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.sent_at)
  return _internal_sent_at();
}
inline void ChatMessage::_internal_set_sent_at(uint64_t value) {
  
  _impl_.sent_at_ = value;
}
inline void ChatMessage::set_sent_at(uint64_t value) {
  _internal_set_sent_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.sent_at)
}

// uint64 received_at = 7;
inline void ChatMessage::clear_received_at() {
  _impl_.received_at_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_received_at() const {
  return _impl_.received_at_;
}
inline uint64_t ChatMessage::received_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.received_at)
  return _internal_received_at();
}
inline void ChatMessage::_internal_set_received_at(uint64_t value) {
  
  _impl_.received_at_ = value;
}
inline void ChatMessage::set_received_at(uint64_t value) {
  _internal_set_received_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.received_at)
}

// bytes content = 8;
inline void ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.content)
}

// -------------------------------------------------------------------

// MessageReceptionConfirmed

// bytes user_id = 1;
inline void MessageReceptionConfirmed::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& MessageReceptionConfirmed::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.MessageReceptionConfirmed.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageReceptionConfirmed::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.MessageReceptionConfirmed.user_id)
}
inline std::string* MessageReceptionConfirmed::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.MessageReceptionConfirmed.user_id)
  return _s;
}
inline const std::string& MessageReceptionConfirmed::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void MessageReceptionConfirmed::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageReceptionConfirmed::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageReceptionConfirmed::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.MessageReceptionConfirmed.user_id)
  return _impl_.user_id_.Release();
}
inline void MessageReceptionConfirmed::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.MessageReceptionConfirmed.user_id)
}

// uint64 confirmed_at = 2;
inline void MessageReceptionConfirmed::clear_confirmed_at() {
  _impl_.confirmed_at_ = uint64_t{0u};
}
inline uint64_t MessageReceptionConfirmed::_internal_confirmed_at() const {
  return _impl_.confirmed_at_;
}
inline uint64_t MessageReceptionConfirmed::confirmed_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.MessageReceptionConfirmed.confirmed_at)
  return _internal_confirmed_at();
}
inline void MessageReceptionConfirmed::_internal_set_confirmed_at(uint64_t value) {
  
  _impl_.confirmed_at_ = value;
}
inline void MessageReceptionConfirmed::set_confirmed_at(uint64_t value) {
  _internal_set_confirmed_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.MessageReceptionConfirmed.confirmed_at)
}

// -------------------------------------------------------------------

// ChatContentMessage

// .qaul.rpc.chat.ChatContent chat_content = 1;
inline bool ChatContentMessage::_internal_has_chat_content() const {
  return message_case() == kChatContent;
}
inline bool ChatContentMessage::has_chat_content() const {
  return _internal_has_chat_content();
}
inline void ChatContentMessage::set_has_chat_content() {
  _impl_._oneof_case_[0] = kChatContent;
}
inline void ChatContentMessage::clear_chat_content() {
  if (_internal_has_chat_content()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.chat_content_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatContent* ChatContentMessage::release_chat_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatContentMessage.chat_content)
  if (_internal_has_chat_content()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatContent* temp = _impl_.message_.chat_content_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.chat_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatContent& ChatContentMessage::_internal_chat_content() const {
  return _internal_has_chat_content()
      ? *_impl_.message_.chat_content_
      : reinterpret_cast< ::qaul::rpc::chat::ChatContent&>(::qaul::rpc::chat::_ChatContent_default_instance_);
}
inline const ::qaul::rpc::chat::ChatContent& ChatContentMessage::chat_content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatContentMessage.chat_content)
  return _internal_chat_content();
}
inline ::qaul::rpc::chat::ChatContent* ChatContentMessage::unsafe_arena_release_chat_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.ChatContentMessage.chat_content)
  if (_internal_has_chat_content()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatContent* temp = _impl_.message_.chat_content_;
    _impl_.message_.chat_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatContentMessage::unsafe_arena_set_allocated_chat_content(::qaul::rpc::chat::ChatContent* chat_content) {
  clear_message();
  if (chat_content) {
    set_has_chat_content();
    _impl_.message_.chat_content_ = chat_content;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.ChatContentMessage.chat_content)
}
inline ::qaul::rpc::chat::ChatContent* ChatContentMessage::_internal_mutable_chat_content() {
  if (!_internal_has_chat_content()) {
    clear_message();
    set_has_chat_content();
    _impl_.message_.chat_content_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatContent >(GetArenaForAllocation());
  }
  return _impl_.message_.chat_content_;
}
inline ::qaul::rpc::chat::ChatContent* ChatContentMessage::mutable_chat_content() {
  ::qaul::rpc::chat::ChatContent* _msg = _internal_mutable_chat_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatContentMessage.chat_content)
  return _msg;
}

// .qaul.rpc.chat.FileContent file_content = 2;
inline bool ChatContentMessage::_internal_has_file_content() const {
  return message_case() == kFileContent;
}
inline bool ChatContentMessage::has_file_content() const {
  return _internal_has_file_content();
}
inline void ChatContentMessage::set_has_file_content() {
  _impl_._oneof_case_[0] = kFileContent;
}
inline void ChatContentMessage::clear_file_content() {
  if (_internal_has_file_content()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.file_content_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::FileContent* ChatContentMessage::release_file_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatContentMessage.file_content)
  if (_internal_has_file_content()) {
    clear_has_message();
    ::qaul::rpc::chat::FileContent* temp = _impl_.message_.file_content_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.file_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::FileContent& ChatContentMessage::_internal_file_content() const {
  return _internal_has_file_content()
      ? *_impl_.message_.file_content_
      : reinterpret_cast< ::qaul::rpc::chat::FileContent&>(::qaul::rpc::chat::_FileContent_default_instance_);
}
inline const ::qaul::rpc::chat::FileContent& ChatContentMessage::file_content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatContentMessage.file_content)
  return _internal_file_content();
}
inline ::qaul::rpc::chat::FileContent* ChatContentMessage::unsafe_arena_release_file_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.ChatContentMessage.file_content)
  if (_internal_has_file_content()) {
    clear_has_message();
    ::qaul::rpc::chat::FileContent* temp = _impl_.message_.file_content_;
    _impl_.message_.file_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatContentMessage::unsafe_arena_set_allocated_file_content(::qaul::rpc::chat::FileContent* file_content) {
  clear_message();
  if (file_content) {
    set_has_file_content();
    _impl_.message_.file_content_ = file_content;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.ChatContentMessage.file_content)
}
inline ::qaul::rpc::chat::FileContent* ChatContentMessage::_internal_mutable_file_content() {
  if (!_internal_has_file_content()) {
    clear_message();
    set_has_file_content();
    _impl_.message_.file_content_ = CreateMaybeMessage< ::qaul::rpc::chat::FileContent >(GetArenaForAllocation());
  }
  return _impl_.message_.file_content_;
}
inline ::qaul::rpc::chat::FileContent* ChatContentMessage::mutable_file_content() {
  ::qaul::rpc::chat::FileContent* _msg = _internal_mutable_file_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatContentMessage.file_content)
  return _msg;
}

// .qaul.rpc.chat.GroupEvent group_event = 3;
inline bool ChatContentMessage::_internal_has_group_event() const {
  return message_case() == kGroupEvent;
}
inline bool ChatContentMessage::has_group_event() const {
  return _internal_has_group_event();
}
inline void ChatContentMessage::set_has_group_event() {
  _impl_._oneof_case_[0] = kGroupEvent;
}
inline void ChatContentMessage::clear_group_event() {
  if (_internal_has_group_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_event_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::GroupEvent* ChatContentMessage::release_group_event() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatContentMessage.group_event)
  if (_internal_has_group_event()) {
    clear_has_message();
    ::qaul::rpc::chat::GroupEvent* temp = _impl_.message_.group_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::GroupEvent& ChatContentMessage::_internal_group_event() const {
  return _internal_has_group_event()
      ? *_impl_.message_.group_event_
      : reinterpret_cast< ::qaul::rpc::chat::GroupEvent&>(::qaul::rpc::chat::_GroupEvent_default_instance_);
}
inline const ::qaul::rpc::chat::GroupEvent& ChatContentMessage::group_event() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatContentMessage.group_event)
  return _internal_group_event();
}
inline ::qaul::rpc::chat::GroupEvent* ChatContentMessage::unsafe_arena_release_group_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.ChatContentMessage.group_event)
  if (_internal_has_group_event()) {
    clear_has_message();
    ::qaul::rpc::chat::GroupEvent* temp = _impl_.message_.group_event_;
    _impl_.message_.group_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChatContentMessage::unsafe_arena_set_allocated_group_event(::qaul::rpc::chat::GroupEvent* group_event) {
  clear_message();
  if (group_event) {
    set_has_group_event();
    _impl_.message_.group_event_ = group_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.ChatContentMessage.group_event)
}
inline ::qaul::rpc::chat::GroupEvent* ChatContentMessage::_internal_mutable_group_event() {
  if (!_internal_has_group_event()) {
    clear_message();
    set_has_group_event();
    _impl_.message_.group_event_ = CreateMaybeMessage< ::qaul::rpc::chat::GroupEvent >(GetArenaForAllocation());
  }
  return _impl_.message_.group_event_;
}
inline ::qaul::rpc::chat::GroupEvent* ChatContentMessage::mutable_group_event() {
  ::qaul::rpc::chat::GroupEvent* _msg = _internal_mutable_group_event();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatContentMessage.group_event)
  return _msg;
}

inline bool ChatContentMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ChatContentMessage::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ChatContentMessage::MessageCase ChatContentMessage::message_case() const {
  return ChatContentMessage::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChatContent

// string text = 1;
inline void ChatContent::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& ChatContent::text() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatContent.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatContent::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatContent.text)
}
inline std::string* ChatContent::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatContent.text)
  return _s;
}
inline const std::string& ChatContent::_internal_text() const {
  return _impl_.text_.Get();
}
inline void ChatContent::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatContent::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatContent::release_text() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatContent.text)
  return _impl_.text_.Release();
}
inline void ChatContent::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatContent.text)
}

// -------------------------------------------------------------------

// FileContent

// uint64 file_id = 1;
inline void FileContent::clear_file_id() {
  _impl_.file_id_ = uint64_t{0u};
}
inline uint64_t FileContent::_internal_file_id() const {
  return _impl_.file_id_;
}
inline uint64_t FileContent::file_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.FileContent.file_id)
  return _internal_file_id();
}
inline void FileContent::_internal_set_file_id(uint64_t value) {
  
  _impl_.file_id_ = value;
}
inline void FileContent::set_file_id(uint64_t value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.FileContent.file_id)
}

// string file_name = 2;
inline void FileContent::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileContent::file_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.FileContent.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContent::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.FileContent.file_name)
}
inline std::string* FileContent::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.FileContent.file_name)
  return _s;
}
inline const std::string& FileContent::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileContent::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileContent::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileContent::release_file_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.FileContent.file_name)
  return _impl_.file_name_.Release();
}
inline void FileContent::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.FileContent.file_name)
}

// string file_extension = 3;
inline void FileContent::clear_file_extension() {
  _impl_.file_extension_.ClearToEmpty();
}
inline const std::string& FileContent::file_extension() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.FileContent.file_extension)
  return _internal_file_extension();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContent::set_file_extension(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_extension_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.FileContent.file_extension)
}
inline std::string* FileContent::mutable_file_extension() {
  std::string* _s = _internal_mutable_file_extension();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.FileContent.file_extension)
  return _s;
}
inline const std::string& FileContent::_internal_file_extension() const {
  return _impl_.file_extension_.Get();
}
inline void FileContent::_internal_set_file_extension(const std::string& value) {
  
  _impl_.file_extension_.Set(value, GetArenaForAllocation());
}
inline std::string* FileContent::_internal_mutable_file_extension() {
  
  return _impl_.file_extension_.Mutable(GetArenaForAllocation());
}
inline std::string* FileContent::release_file_extension() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.FileContent.file_extension)
  return _impl_.file_extension_.Release();
}
inline void FileContent::set_allocated_file_extension(std::string* file_extension) {
  if (file_extension != nullptr) {
    
  } else {
    
  }
  _impl_.file_extension_.SetAllocated(file_extension, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_extension_.IsDefault()) {
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.FileContent.file_extension)
}

// uint32 file_size = 4;
inline void FileContent::clear_file_size() {
  _impl_.file_size_ = 0u;
}
inline uint32_t FileContent::_internal_file_size() const {
  return _impl_.file_size_;
}
inline uint32_t FileContent::file_size() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.FileContent.file_size)
  return _internal_file_size();
}
inline void FileContent::_internal_set_file_size(uint32_t value) {
  
  _impl_.file_size_ = value;
}
inline void FileContent::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.FileContent.file_size)
}

// string file_description = 5;
inline void FileContent::clear_file_description() {
  _impl_.file_description_.ClearToEmpty();
}
inline const std::string& FileContent::file_description() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.FileContent.file_description)
  return _internal_file_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContent::set_file_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.FileContent.file_description)
}
inline std::string* FileContent::mutable_file_description() {
  std::string* _s = _internal_mutable_file_description();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.FileContent.file_description)
  return _s;
}
inline const std::string& FileContent::_internal_file_description() const {
  return _impl_.file_description_.Get();
}
inline void FileContent::_internal_set_file_description(const std::string& value) {
  
  _impl_.file_description_.Set(value, GetArenaForAllocation());
}
inline std::string* FileContent::_internal_mutable_file_description() {
  
  return _impl_.file_description_.Mutable(GetArenaForAllocation());
}
inline std::string* FileContent::release_file_description() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.FileContent.file_description)
  return _impl_.file_description_.Release();
}
inline void FileContent::set_allocated_file_description(std::string* file_description) {
  if (file_description != nullptr) {
    
  } else {
    
  }
  _impl_.file_description_.SetAllocated(file_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_description_.IsDefault()) {
    _impl_.file_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.FileContent.file_description)
}

// -------------------------------------------------------------------

// GroupEvent

// .qaul.rpc.chat.GroupEventType event_type = 1;
inline void GroupEvent::clear_event_type() {
  _impl_.event_type_ = 0;
}
inline ::qaul::rpc::chat::GroupEventType GroupEvent::_internal_event_type() const {
  return static_cast< ::qaul::rpc::chat::GroupEventType >(_impl_.event_type_);
}
inline ::qaul::rpc::chat::GroupEventType GroupEvent::event_type() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.GroupEvent.event_type)
  return _internal_event_type();
}
inline void GroupEvent::_internal_set_event_type(::qaul::rpc::chat::GroupEventType value) {
  
  _impl_.event_type_ = value;
}
inline void GroupEvent::set_event_type(::qaul::rpc::chat::GroupEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.GroupEvent.event_type)
}

// bytes user_id = 2;
inline void GroupEvent::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupEvent::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.GroupEvent.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupEvent::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.GroupEvent.user_id)
}
inline std::string* GroupEvent::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.GroupEvent.user_id)
  return _s;
}
inline const std::string& GroupEvent::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupEvent::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupEvent::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupEvent::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.GroupEvent.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupEvent::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.GroupEvent.user_id)
}

// -------------------------------------------------------------------

// ChatMessageSend

// bytes group_id = 1;
inline void ChatMessageSend::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& ChatMessageSend::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessageSend.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessageSend::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessageSend.group_id)
}
inline std::string* ChatMessageSend::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessageSend.group_id)
  return _s;
}
inline const std::string& ChatMessageSend::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void ChatMessageSend::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessageSend::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessageSend::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessageSend.group_id)
  return _impl_.group_id_.Release();
}
inline void ChatMessageSend::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessageSend.group_id)
}

// string content = 2;
inline void ChatMessageSend::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessageSend::content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessageSend.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessageSend::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessageSend.content)
}
inline std::string* ChatMessageSend::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessageSend.content)
  return _s;
}
inline const std::string& ChatMessageSend::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessageSend::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessageSend::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessageSend::release_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessageSend.content)
  return _impl_.content_.Release();
}
inline void ChatMessageSend::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessageSend.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace rpc
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::rpc::chat::MessageStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::chat::MessageStatus>() {
  return ::qaul::rpc::chat::MessageStatus_descriptor();
}
template <> struct is_proto_enum< ::qaul::rpc::chat::GroupEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::chat::GroupEventType>() {
  return ::qaul::rpc::chat::GroupEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fchat_2fchat_2eproto
