// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/chat/chatfile_rpc.proto

#include "services/chat/chatfile_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace rpc {
namespace chatfile {
PROTOBUF_CONSTEXPR ChatFile::ChatFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChatFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatFileDefaultTypeInternal() {}
  union {
    ChatFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatFileDefaultTypeInternal _ChatFile_default_instance_;
PROTOBUF_CONSTEXPR SendFileRequest::SendFileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendFileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendFileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendFileRequestDefaultTypeInternal() {}
  union {
    SendFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendFileRequestDefaultTypeInternal _SendFileRequest_default_instance_;
PROTOBUF_CONSTEXPR SendFileResponse::SendFileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_id_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendFileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendFileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendFileResponseDefaultTypeInternal() {}
  union {
    SendFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendFileResponseDefaultTypeInternal _SendFileResponse_default_instance_;
PROTOBUF_CONSTEXPR FileHistoryRequest::FileHistoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileHistoryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileHistoryRequestDefaultTypeInternal() {}
  union {
    FileHistoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileHistoryRequestDefaultTypeInternal _FileHistoryRequest_default_instance_;
PROTOBUF_CONSTEXPR FileHistoryEntry::FileHistoryEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_extension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_id_)*/uint64_t{0u}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.file_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileHistoryEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileHistoryEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileHistoryEntryDefaultTypeInternal() {}
  union {
    FileHistoryEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileHistoryEntryDefaultTypeInternal _FileHistoryEntry_default_instance_;
PROTOBUF_CONSTEXPR FileHistoryResponse::FileHistoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.histories_)*/{}
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileHistoryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileHistoryResponseDefaultTypeInternal() {}
  union {
    FileHistoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileHistoryResponseDefaultTypeInternal _FileHistoryResponse_default_instance_;
}  // namespace chatfile
}  // namespace rpc
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2fchat_2fchatfile_5frpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fchat_2fchatfile_5frpc_2eproto = nullptr;

const uint32_t TableStruct_services_2fchat_2fchatfile_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::ChatFile, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::ChatFile, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::ChatFile, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileRequest, _impl_.path_name_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileRequest, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileRequest, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::SendFileResponse, _impl_.file_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.file_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.file_extension_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.file_size_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.file_description_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryEntry, _impl_.group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryResponse, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryResponse, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryResponse, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chatfile::FileHistoryResponse, _impl_.histories_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::rpc::chatfile::ChatFile)},
  { 11, -1, -1, sizeof(::qaul::rpc::chatfile::SendFileRequest)},
  { 20, -1, -1, sizeof(::qaul::rpc::chatfile::SendFileResponse)},
  { 29, -1, -1, sizeof(::qaul::rpc::chatfile::FileHistoryRequest)},
  { 37, -1, -1, sizeof(::qaul::rpc::chatfile::FileHistoryEntry)},
  { 51, -1, -1, sizeof(::qaul::rpc::chatfile::FileHistoryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::rpc::chatfile::_ChatFile_default_instance_._instance,
  &::qaul::rpc::chatfile::_SendFileRequest_default_instance_._instance,
  &::qaul::rpc::chatfile::_SendFileResponse_default_instance_._instance,
  &::qaul::rpc::chatfile::_FileHistoryRequest_default_instance_._instance,
  &::qaul::rpc::chatfile::_FileHistoryEntry_default_instance_._instance,
  &::qaul::rpc::chatfile::_FileHistoryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fchat_2fchatfile_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n services/chat/chatfile_rpc.proto\022\021qaul"
  ".rpc.chatfile\"\241\002\n\010ChatFile\022\?\n\021send_file_"
  "request\030\001 \001(\0132\".qaul.rpc.chatfile.SendFi"
  "leRequestH\000\022A\n\022send_file_response\030\002 \001(\0132"
  "#.qaul.rpc.chatfile.SendFileResponseH\000\022="
  "\n\014file_history\030\003 \001(\0132%.qaul.rpc.chatfile"
  ".FileHistoryRequestH\000\022G\n\025file_history_re"
  "sponse\030\004 \001(\0132&.qaul.rpc.chatfile.FileHis"
  "toryResponseH\000B\t\n\007message\"K\n\017SendFileReq"
  "uest\022\021\n\tpath_name\030\001 \001(\t\022\020\n\010group_id\030\002 \001("
  "\014\022\023\n\013description\030\003 \001(\t\"C\n\020SendFileRespon"
  "se\022\017\n\007success\030\001 \001(\010\022\r\n\005error\030\002 \001(\t\022\017\n\007fi"
  "le_id\030\003 \001(\004\"3\n\022FileHistoryRequest\022\016\n\006off"
  "set\030\001 \001(\r\022\r\n\005limit\030\002 \001(\r\"\256\001\n\020FileHistory"
  "Entry\022\017\n\007file_id\030\001 \001(\004\022\021\n\tfile_name\030\002 \001("
  "\t\022\026\n\016file_extension\030\003 \001(\t\022\021\n\tfile_size\030\004"
  " \001(\r\022\030\n\020file_description\030\005 \001(\t\022\014\n\004time\030\006"
  " \001(\004\022\021\n\tsender_id\030\007 \001(\t\022\020\n\010group_id\030\010 \001("
  "\t\"{\n\023FileHistoryResponse\022\016\n\006offset\030\001 \001(\r"
  "\022\r\n\005limit\030\002 \001(\r\022\r\n\005total\030\003 \001(\004\0226\n\thistor"
  "ies\030\004 \003(\0132#.qaul.rpc.chatfile.FileHistor"
  "yEntryb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto = {
    false, false, 854, descriptor_table_protodef_services_2fchat_2fchatfile_5frpc_2eproto,
    "services/chat/chatfile_rpc.proto",
    &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_services_2fchat_2fchatfile_5frpc_2eproto::offsets,
    file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto, file_level_enum_descriptors_services_2fchat_2fchatfile_5frpc_2eproto,
    file_level_service_descriptors_services_2fchat_2fchatfile_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_getter() {
  return &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fchat_2fchatfile_5frpc_2eproto(&descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto);
namespace qaul {
namespace rpc {
namespace chatfile {

// ===================================================================

class ChatFile::_Internal {
 public:
  static const ::qaul::rpc::chatfile::SendFileRequest& send_file_request(const ChatFile* msg);
  static const ::qaul::rpc::chatfile::SendFileResponse& send_file_response(const ChatFile* msg);
  static const ::qaul::rpc::chatfile::FileHistoryRequest& file_history(const ChatFile* msg);
  static const ::qaul::rpc::chatfile::FileHistoryResponse& file_history_response(const ChatFile* msg);
};

const ::qaul::rpc::chatfile::SendFileRequest&
ChatFile::_Internal::send_file_request(const ChatFile* msg) {
  return *msg->_impl_.message_.send_file_request_;
}
const ::qaul::rpc::chatfile::SendFileResponse&
ChatFile::_Internal::send_file_response(const ChatFile* msg) {
  return *msg->_impl_.message_.send_file_response_;
}
const ::qaul::rpc::chatfile::FileHistoryRequest&
ChatFile::_Internal::file_history(const ChatFile* msg) {
  return *msg->_impl_.message_.file_history_;
}
const ::qaul::rpc::chatfile::FileHistoryResponse&
ChatFile::_Internal::file_history_response(const ChatFile* msg) {
  return *msg->_impl_.message_.file_history_response_;
}
void ChatFile::set_allocated_send_file_request(::qaul::rpc::chatfile::SendFileRequest* send_file_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_file_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(send_file_request);
    if (message_arena != submessage_arena) {
      send_file_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_file_request, submessage_arena);
    }
    set_has_send_file_request();
    _impl_.message_.send_file_request_ = send_file_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chatfile.ChatFile.send_file_request)
}
void ChatFile::set_allocated_send_file_response(::qaul::rpc::chatfile::SendFileResponse* send_file_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send_file_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(send_file_response);
    if (message_arena != submessage_arena) {
      send_file_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_file_response, submessage_arena);
    }
    set_has_send_file_response();
    _impl_.message_.send_file_response_ = send_file_response;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chatfile.ChatFile.send_file_response)
}
void ChatFile::set_allocated_file_history(::qaul::rpc::chatfile::FileHistoryRequest* file_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (file_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_history);
    if (message_arena != submessage_arena) {
      file_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_history, submessage_arena);
    }
    set_has_file_history();
    _impl_.message_.file_history_ = file_history;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chatfile.ChatFile.file_history)
}
void ChatFile::set_allocated_file_history_response(::qaul::rpc::chatfile::FileHistoryResponse* file_history_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (file_history_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_history_response);
    if (message_arena != submessage_arena) {
      file_history_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_history_response, submessage_arena);
    }
    set_has_file_history_response();
    _impl_.message_.file_history_response_ = file_history_response;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chatfile.ChatFile.file_history_response)
}
ChatFile::ChatFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chatfile.ChatFile)
}
ChatFile::ChatFile(const ChatFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kSendFileRequest: {
      _this->_internal_mutable_send_file_request()->::qaul::rpc::chatfile::SendFileRequest::MergeFrom(
          from._internal_send_file_request());
      break;
    }
    case kSendFileResponse: {
      _this->_internal_mutable_send_file_response()->::qaul::rpc::chatfile::SendFileResponse::MergeFrom(
          from._internal_send_file_response());
      break;
    }
    case kFileHistory: {
      _this->_internal_mutable_file_history()->::qaul::rpc::chatfile::FileHistoryRequest::MergeFrom(
          from._internal_file_history());
      break;
    }
    case kFileHistoryResponse: {
      _this->_internal_mutable_file_history_response()->::qaul::rpc::chatfile::FileHistoryResponse::MergeFrom(
          from._internal_file_history_response());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chatfile.ChatFile)
}

inline void ChatFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

ChatFile::~ChatFile() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chatfile.ChatFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void ChatFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatFile::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.rpc.chatfile.ChatFile)
  switch (message_case()) {
    case kSendFileRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_file_request_;
      }
      break;
    }
    case kSendFileResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.send_file_response_;
      }
      break;
    }
    case kFileHistory: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.file_history_;
      }
      break;
    }
    case kFileHistoryResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.file_history_response_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void ChatFile::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chatfile.ChatFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.rpc.chatfile.SendFileRequest send_file_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_file_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.chatfile.SendFileResponse send_file_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_file_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.chatfile.FileHistoryRequest file_history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.chatfile.FileHistoryResponse file_history_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_history_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chatfile.ChatFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.rpc.chatfile.SendFileRequest send_file_request = 1;
  if (_internal_has_send_file_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::send_file_request(this),
        _Internal::send_file_request(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.chatfile.SendFileResponse send_file_response = 2;
  if (_internal_has_send_file_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::send_file_response(this),
        _Internal::send_file_response(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.chatfile.FileHistoryRequest file_history = 3;
  if (_internal_has_file_history()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::file_history(this),
        _Internal::file_history(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.chatfile.FileHistoryResponse file_history_response = 4;
  if (_internal_has_file_history_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file_history_response(this),
        _Internal::file_history_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chatfile.ChatFile)
  return target;
}

size_t ChatFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chatfile.ChatFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.rpc.chatfile.SendFileRequest send_file_request = 1;
    case kSendFileRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_file_request_);
      break;
    }
    // .qaul.rpc.chatfile.SendFileResponse send_file_response = 2;
    case kSendFileResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.send_file_response_);
      break;
    }
    // .qaul.rpc.chatfile.FileHistoryRequest file_history = 3;
    case kFileHistory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.file_history_);
      break;
    }
    // .qaul.rpc.chatfile.FileHistoryResponse file_history_response = 4;
    case kFileHistoryResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.file_history_response_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatFile::GetClassData() const { return &_class_data_; }


void ChatFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatFile*>(&to_msg);
  auto& from = static_cast<const ChatFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chatfile.ChatFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kSendFileRequest: {
      _this->_internal_mutable_send_file_request()->::qaul::rpc::chatfile::SendFileRequest::MergeFrom(
          from._internal_send_file_request());
      break;
    }
    case kSendFileResponse: {
      _this->_internal_mutable_send_file_response()->::qaul::rpc::chatfile::SendFileResponse::MergeFrom(
          from._internal_send_file_response());
      break;
    }
    case kFileHistory: {
      _this->_internal_mutable_file_history()->::qaul::rpc::chatfile::FileHistoryRequest::MergeFrom(
          from._internal_file_history());
      break;
    }
    case kFileHistoryResponse: {
      _this->_internal_mutable_file_history_response()->::qaul::rpc::chatfile::FileHistoryResponse::MergeFrom(
          from._internal_file_history_response());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatFile::CopyFrom(const ChatFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chatfile.ChatFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatFile::IsInitialized() const {
  return true;
}

void ChatFile::InternalSwap(ChatFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_getter, &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once,
      file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto[0]);
}

// ===================================================================

class SendFileRequest::_Internal {
 public:
};

SendFileRequest::SendFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chatfile.SendFileRequest)
}
SendFileRequest::SendFileRequest(const SendFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendFileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_name_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path_name().empty()) {
    _this->_impl_.path_name_.Set(from._internal_path_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_id().empty()) {
    _this->_impl_.group_id_.Set(from._internal_group_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chatfile.SendFileRequest)
}

inline void SendFileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_name_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendFileRequest::~SendFileRequest() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chatfile.SendFileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_name_.Destroy();
  _impl_.group_id_.Destroy();
  _impl_.description_.Destroy();
}

void SendFileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chatfile.SendFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_name_.ClearToEmpty();
  _impl_.group_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendFileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.SendFileRequest.path_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.SendFileRequest.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chatfile.SendFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path_name = 1;
  if (!this->_internal_path_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_name().data(), static_cast<int>(this->_internal_path_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.SendFileRequest.path_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path_name(), target);
  }

  // bytes group_id = 2;
  if (!this->_internal_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_group_id(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.SendFileRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chatfile.SendFileRequest)
  return target;
}

size_t SendFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chatfile.SendFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path_name = 1;
  if (!this->_internal_path_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_name());
  }

  // bytes group_id = 2;
  if (!this->_internal_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_group_id());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendFileRequest::GetClassData() const { return &_class_data_; }


void SendFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendFileRequest*>(&to_msg);
  auto& from = static_cast<const SendFileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chatfile.SendFileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path_name().empty()) {
    _this->_internal_set_path_name(from._internal_path_name());
  }
  if (!from._internal_group_id().empty()) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendFileRequest::CopyFrom(const SendFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chatfile.SendFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFileRequest::IsInitialized() const {
  return true;
}

void SendFileRequest::InternalSwap(SendFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_name_, lhs_arena,
      &other->_impl_.path_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_id_, lhs_arena,
      &other->_impl_.group_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendFileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_getter, &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once,
      file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto[1]);
}

// ===================================================================

class SendFileResponse::_Internal {
 public:
};

SendFileResponse::SendFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chatfile.SendFileResponse)
}
SendFileResponse::SendFileResponse(const SendFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendFileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_id_, &from._impl_.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.file_id_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chatfile.SendFileResponse)
}

inline void SendFileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.file_id_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendFileResponse::~SendFileResponse() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chatfile.SendFileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void SendFileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chatfile.SendFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  ::memset(&_impl_.file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.file_id_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendFileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.SendFileResponse.error"));
        } else
          goto handle_unusual;
        continue;
      // uint64 file_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chatfile.SendFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.SendFileResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // uint64 file_id = 3;
  if (this->_internal_file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_file_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chatfile.SendFileResponse)
  return target;
}

size_t SendFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chatfile.SendFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // uint64 file_id = 3;
  if (this->_internal_file_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendFileResponse::GetClassData() const { return &_class_data_; }


void SendFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendFileResponse*>(&to_msg);
  auto& from = static_cast<const SendFileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chatfile.SendFileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_file_id() != 0) {
    _this->_internal_set_file_id(from._internal_file_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendFileResponse::CopyFrom(const SendFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chatfile.SendFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFileResponse::IsInitialized() const {
  return true;
}

void SendFileResponse::InternalSwap(SendFileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendFileResponse, _impl_.success_)
      + sizeof(SendFileResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(SendFileResponse, _impl_.file_id_)>(
          reinterpret_cast<char*>(&_impl_.file_id_),
          reinterpret_cast<char*>(&other->_impl_.file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendFileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_getter, &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once,
      file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto[2]);
}

// ===================================================================

class FileHistoryRequest::_Internal {
 public:
};

FileHistoryRequest::FileHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chatfile.FileHistoryRequest)
}
FileHistoryRequest::FileHistoryRequest(const FileHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileHistoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chatfile.FileHistoryRequest)
}

inline void FileHistoryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){0u}
    , decltype(_impl_.limit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileHistoryRequest::~FileHistoryRequest() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chatfile.FileHistoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileHistoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FileHistoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chatfile.FileHistoryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileHistoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileHistoryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chatfile.FileHistoryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_offset(), target);
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chatfile.FileHistoryRequest)
  return target;
}

size_t FileHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chatfile.FileHistoryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileHistoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileHistoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileHistoryRequest::GetClassData() const { return &_class_data_; }


void FileHistoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileHistoryRequest*>(&to_msg);
  auto& from = static_cast<const FileHistoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chatfile.FileHistoryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileHistoryRequest::CopyFrom(const FileHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chatfile.FileHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHistoryRequest::IsInitialized() const {
  return true;
}

void FileHistoryRequest::InternalSwap(FileHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileHistoryRequest, _impl_.limit_)
      + sizeof(FileHistoryRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(FileHistoryRequest, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileHistoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_getter, &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once,
      file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto[3]);
}

// ===================================================================

class FileHistoryEntry::_Internal {
 public:
};

FileHistoryEntry::FileHistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chatfile.FileHistoryEntry)
}
FileHistoryEntry::FileHistoryEntry(const FileHistoryEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileHistoryEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_extension_){}
    , decltype(_impl_.file_description_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.file_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_extension().empty()) {
    _this->_impl_.file_extension_.Set(from._internal_file_extension(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_description().empty()) {
    _this->_impl_.file_description_.Set(from._internal_file_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    _this->_impl_.sender_id_.Set(from._internal_sender_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_id().empty()) {
    _this->_impl_.group_id_.Set(from._internal_group_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_id_, &from._impl_.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.file_size_) -
    reinterpret_cast<char*>(&_impl_.file_id_)) + sizeof(_impl_.file_size_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chatfile.FileHistoryEntry)
}

inline void FileHistoryEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_extension_){}
    , decltype(_impl_.file_description_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.file_id_){uint64_t{0u}}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.file_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileHistoryEntry::~FileHistoryEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chatfile.FileHistoryEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileHistoryEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.file_extension_.Destroy();
  _impl_.file_description_.Destroy();
  _impl_.sender_id_.Destroy();
  _impl_.group_id_.Destroy();
}

void FileHistoryEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileHistoryEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chatfile.FileHistoryEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  _impl_.file_extension_.ClearToEmpty();
  _impl_.file_description_.ClearToEmpty();
  _impl_.sender_id_.ClearToEmpty();
  _impl_.group_id_.ClearToEmpty();
  ::memset(&_impl_.file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.file_size_) -
      reinterpret_cast<char*>(&_impl_.file_id_)) + sizeof(_impl_.file_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileHistoryEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.FileHistoryEntry.file_name"));
        } else
          goto handle_unusual;
        continue;
      // string file_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.FileHistoryEntry.file_extension"));
        } else
          goto handle_unusual;
        continue;
      // uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_file_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.FileHistoryEntry.file_description"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.FileHistoryEntry.sender_id"));
        } else
          goto handle_unusual;
        continue;
      // string group_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_group_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chatfile.FileHistoryEntry.group_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileHistoryEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chatfile.FileHistoryEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 file_id = 1;
  if (this->_internal_file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_file_id(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.FileHistoryEntry.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // string file_extension = 3;
  if (!this->_internal_file_extension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_extension().data(), static_cast<int>(this->_internal_file_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.FileHistoryEntry.file_extension");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_extension(), target);
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  // string file_description = 5;
  if (!this->_internal_file_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_description().data(), static_cast<int>(this->_internal_file_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.FileHistoryEntry.file_description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_file_description(), target);
  }

  // uint64 time = 6;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_time(), target);
  }

  // string sender_id = 7;
  if (!this->_internal_sender_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.FileHistoryEntry.sender_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sender_id(), target);
  }

  // string group_id = 8;
  if (!this->_internal_group_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chatfile.FileHistoryEntry.group_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chatfile.FileHistoryEntry)
  return target;
}

size_t FileHistoryEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chatfile.FileHistoryEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_extension = 3;
  if (!this->_internal_file_extension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_extension());
  }

  // string file_description = 5;
  if (!this->_internal_file_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_description());
  }

  // string sender_id = 7;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  // string group_id = 8;
  if (!this->_internal_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // uint64 file_id = 1;
  if (this->_internal_file_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_id());
  }

  // uint64 time = 6;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileHistoryEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileHistoryEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileHistoryEntry::GetClassData() const { return &_class_data_; }


void FileHistoryEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileHistoryEntry*>(&to_msg);
  auto& from = static_cast<const FileHistoryEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chatfile.FileHistoryEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_extension().empty()) {
    _this->_internal_set_file_extension(from._internal_file_extension());
  }
  if (!from._internal_file_description().empty()) {
    _this->_internal_set_file_description(from._internal_file_description());
  }
  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_group_id().empty()) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_file_id() != 0) {
    _this->_internal_set_file_id(from._internal_file_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileHistoryEntry::CopyFrom(const FileHistoryEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chatfile.FileHistoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHistoryEntry::IsInitialized() const {
  return true;
}

void FileHistoryEntry::InternalSwap(FileHistoryEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_extension_, lhs_arena,
      &other->_impl_.file_extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_description_, lhs_arena,
      &other->_impl_.file_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_id_, lhs_arena,
      &other->_impl_.sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_id_, lhs_arena,
      &other->_impl_.group_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileHistoryEntry, _impl_.file_size_)
      + sizeof(FileHistoryEntry::_impl_.file_size_)
      - PROTOBUF_FIELD_OFFSET(FileHistoryEntry, _impl_.file_id_)>(
          reinterpret_cast<char*>(&_impl_.file_id_),
          reinterpret_cast<char*>(&other->_impl_.file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileHistoryEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_getter, &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once,
      file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto[4]);
}

// ===================================================================

class FileHistoryResponse::_Internal {
 public:
};

FileHistoryResponse::FileHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chatfile.FileHistoryResponse)
}
FileHistoryResponse::FileHistoryResponse(const FileHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileHistoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.histories_){from._impl_.histories_}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.total_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chatfile.FileHistoryResponse)
}

inline void FileHistoryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.histories_){arena}
    , decltype(_impl_.offset_){0u}
    , decltype(_impl_.limit_){0u}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileHistoryResponse::~FileHistoryResponse() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chatfile.FileHistoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.histories_.~RepeatedPtrField();
}

void FileHistoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chatfile.FileHistoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.histories_.Clear();
  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileHistoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileHistoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chatfile.FileHistoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_offset(), target);
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  // uint64 total = 3;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total(), target);
  }

  // repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_histories_size()); i < n; i++) {
    const auto& repfield = this->_internal_histories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chatfile.FileHistoryResponse)
  return target;
}

size_t FileHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chatfile.FileHistoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.chatfile.FileHistoryEntry histories = 4;
  total_size += 1UL * this->_internal_histories_size();
  for (const auto& msg : this->_impl_.histories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  // uint64 total = 3;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileHistoryResponse::GetClassData() const { return &_class_data_; }


void FileHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileHistoryResponse*>(&to_msg);
  auto& from = static_cast<const FileHistoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chatfile.FileHistoryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.histories_.MergeFrom(from._impl_.histories_);
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileHistoryResponse::CopyFrom(const FileHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chatfile.FileHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHistoryResponse::IsInitialized() const {
  return true;
}

void FileHistoryResponse::InternalSwap(FileHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.histories_.InternalSwap(&other->_impl_.histories_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileHistoryResponse, _impl_.total_)
      + sizeof(FileHistoryResponse::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(FileHistoryResponse, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_getter, &descriptor_table_services_2fchat_2fchatfile_5frpc_2eproto_once,
      file_level_metadata_services_2fchat_2fchatfile_5frpc_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chatfile
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::rpc::chatfile::ChatFile*
Arena::CreateMaybeMessage< ::qaul::rpc::chatfile::ChatFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chatfile::ChatFile >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chatfile::SendFileRequest*
Arena::CreateMaybeMessage< ::qaul::rpc::chatfile::SendFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chatfile::SendFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chatfile::SendFileResponse*
Arena::CreateMaybeMessage< ::qaul::rpc::chatfile::SendFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chatfile::SendFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chatfile::FileHistoryRequest*
Arena::CreateMaybeMessage< ::qaul::rpc::chatfile::FileHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chatfile::FileHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chatfile::FileHistoryEntry*
Arena::CreateMaybeMessage< ::qaul::rpc::chatfile::FileHistoryEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chatfile::FileHistoryEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chatfile::FileHistoryResponse*
Arena::CreateMaybeMessage< ::qaul::rpc::chatfile::FileHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chatfile::FileHistoryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
