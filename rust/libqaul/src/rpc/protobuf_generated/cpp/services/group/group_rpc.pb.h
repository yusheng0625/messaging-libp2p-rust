// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/group/group_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fgroup_2fgroup_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fgroup_2fgroup_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fgroup_2fgroup_5frpc_2eproto;
namespace qaul {
namespace rpc {
namespace group {
class Group;
struct GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupCreateRequest;
struct GroupCreateRequestDefaultTypeInternal;
extern GroupCreateRequestDefaultTypeInternal _GroupCreateRequest_default_instance_;
class GroupCreateResponse;
struct GroupCreateResponseDefaultTypeInternal;
extern GroupCreateResponseDefaultTypeInternal _GroupCreateResponse_default_instance_;
class GroupInfo;
struct GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupInfoRequest;
struct GroupInfoRequestDefaultTypeInternal;
extern GroupInfoRequestDefaultTypeInternal _GroupInfoRequest_default_instance_;
class GroupInviteMemberRequest;
struct GroupInviteMemberRequestDefaultTypeInternal;
extern GroupInviteMemberRequestDefaultTypeInternal _GroupInviteMemberRequest_default_instance_;
class GroupInviteMemberResponse;
struct GroupInviteMemberResponseDefaultTypeInternal;
extern GroupInviteMemberResponseDefaultTypeInternal _GroupInviteMemberResponse_default_instance_;
class GroupInvited;
struct GroupInvitedDefaultTypeInternal;
extern GroupInvitedDefaultTypeInternal _GroupInvited_default_instance_;
class GroupInvitedRequest;
struct GroupInvitedRequestDefaultTypeInternal;
extern GroupInvitedRequestDefaultTypeInternal _GroupInvitedRequest_default_instance_;
class GroupInvitedResponse;
struct GroupInvitedResponseDefaultTypeInternal;
extern GroupInvitedResponseDefaultTypeInternal _GroupInvitedResponse_default_instance_;
class GroupListRequest;
struct GroupListRequestDefaultTypeInternal;
extern GroupListRequestDefaultTypeInternal _GroupListRequest_default_instance_;
class GroupListResponse;
struct GroupListResponseDefaultTypeInternal;
extern GroupListResponseDefaultTypeInternal _GroupListResponse_default_instance_;
class GroupMember;
struct GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
class GroupRemoveMemberRequest;
struct GroupRemoveMemberRequestDefaultTypeInternal;
extern GroupRemoveMemberRequestDefaultTypeInternal _GroupRemoveMemberRequest_default_instance_;
class GroupRemoveMemberResponse;
struct GroupRemoveMemberResponseDefaultTypeInternal;
extern GroupRemoveMemberResponseDefaultTypeInternal _GroupRemoveMemberResponse_default_instance_;
class GroupRenameRequest;
struct GroupRenameRequestDefaultTypeInternal;
extern GroupRenameRequestDefaultTypeInternal _GroupRenameRequest_default_instance_;
class GroupRenameResponse;
struct GroupRenameResponseDefaultTypeInternal;
extern GroupRenameResponseDefaultTypeInternal _GroupRenameResponse_default_instance_;
class GroupReplyInviteRequest;
struct GroupReplyInviteRequestDefaultTypeInternal;
extern GroupReplyInviteRequestDefaultTypeInternal _GroupReplyInviteRequest_default_instance_;
class GroupReplyInviteResponse;
struct GroupReplyInviteResponseDefaultTypeInternal;
extern GroupReplyInviteResponseDefaultTypeInternal _GroupReplyInviteResponse_default_instance_;
class GroupResult;
struct GroupResultDefaultTypeInternal;
extern GroupResultDefaultTypeInternal _GroupResult_default_instance_;
}  // namespace group
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::group::Group* Arena::CreateMaybeMessage<::qaul::rpc::group::Group>(Arena*);
template<> ::qaul::rpc::group::GroupCreateRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupCreateRequest>(Arena*);
template<> ::qaul::rpc::group::GroupCreateResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupCreateResponse>(Arena*);
template<> ::qaul::rpc::group::GroupInfo* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInfo>(Arena*);
template<> ::qaul::rpc::group::GroupInfoRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInfoRequest>(Arena*);
template<> ::qaul::rpc::group::GroupInviteMemberRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInviteMemberRequest>(Arena*);
template<> ::qaul::rpc::group::GroupInviteMemberResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInviteMemberResponse>(Arena*);
template<> ::qaul::rpc::group::GroupInvited* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInvited>(Arena*);
template<> ::qaul::rpc::group::GroupInvitedRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInvitedRequest>(Arena*);
template<> ::qaul::rpc::group::GroupInvitedResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInvitedResponse>(Arena*);
template<> ::qaul::rpc::group::GroupListRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupListRequest>(Arena*);
template<> ::qaul::rpc::group::GroupListResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupListResponse>(Arena*);
template<> ::qaul::rpc::group::GroupMember* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupMember>(Arena*);
template<> ::qaul::rpc::group::GroupRemoveMemberRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupRemoveMemberRequest>(Arena*);
template<> ::qaul::rpc::group::GroupRemoveMemberResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupRemoveMemberResponse>(Arena*);
template<> ::qaul::rpc::group::GroupRenameRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupRenameRequest>(Arena*);
template<> ::qaul::rpc::group::GroupRenameResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupRenameResponse>(Arena*);
template<> ::qaul::rpc::group::GroupReplyInviteRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupReplyInviteRequest>(Arena*);
template<> ::qaul::rpc::group::GroupReplyInviteResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupReplyInviteResponse>(Arena*);
template<> ::qaul::rpc::group::GroupResult* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace group {

enum GroupMemberState : int {
  Invited = 0,
  Activated = 1,
  GroupMemberState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupMemberState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupMemberState_IsValid(int value);
constexpr GroupMemberState GroupMemberState_MIN = Invited;
constexpr GroupMemberState GroupMemberState_MAX = Activated;
constexpr int GroupMemberState_ARRAYSIZE = GroupMemberState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupMemberState_descriptor();
template<typename T>
inline const std::string& GroupMemberState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupMemberState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupMemberState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupMemberState_descriptor(), enum_t_value);
}
inline bool GroupMemberState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupMemberState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupMemberState>(
    GroupMemberState_descriptor(), name, value);
}
enum GroupMemberRole : int {
  User = 0,
  Admin = 255,
  GroupMemberRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupMemberRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupMemberRole_IsValid(int value);
constexpr GroupMemberRole GroupMemberRole_MIN = User;
constexpr GroupMemberRole GroupMemberRole_MAX = Admin;
constexpr int GroupMemberRole_ARRAYSIZE = GroupMemberRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupMemberRole_descriptor();
template<typename T>
inline const std::string& GroupMemberRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupMemberRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupMemberRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupMemberRole_descriptor(), enum_t_value);
}
inline bool GroupMemberRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupMemberRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupMemberRole>(
    GroupMemberRole_descriptor(), name, value);
}
enum GroupStatus : int {
  ACTIVE = 0,
  INVITE_ACCEPTED = 1,
  DEACTIVATED = 2,
  GroupStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupStatus_IsValid(int value);
constexpr GroupStatus GroupStatus_MIN = ACTIVE;
constexpr GroupStatus GroupStatus_MAX = DEACTIVATED;
constexpr int GroupStatus_ARRAYSIZE = GroupStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupStatus_descriptor();
template<typename T>
inline const std::string& GroupStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupStatus_descriptor(), enum_t_value);
}
inline bool GroupStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupStatus>(
    GroupStatus_descriptor(), name, value);
}
// ===================================================================

class Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  ~Group() override;
  explicit PROTOBUF_CONSTEXPR Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kGroupCreateRequest = 1,
    kGroupCreateResponse = 2,
    kGroupRenameRequest = 3,
    kGroupRenameResponse = 4,
    kGroupInviteMemberRequest = 5,
    kGroupInviteMemberResponse = 6,
    kGroupRemoveMemberRequest = 7,
    kGroupRemoveMemberResponse = 8,
    kGroupInfoRequest = 9,
    kGroupInfoResponse = 10,
    kGroupReplyInviteRequest = 11,
    kGroupReplyInviteResponse = 12,
    kGroupListRequest = 13,
    kGroupListResponse = 14,
    kGroupInvitedRequest = 15,
    kGroupInvitedResponse = 16,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Group& from) {
    Group::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupCreateRequestFieldNumber = 1,
    kGroupCreateResponseFieldNumber = 2,
    kGroupRenameRequestFieldNumber = 3,
    kGroupRenameResponseFieldNumber = 4,
    kGroupInviteMemberRequestFieldNumber = 5,
    kGroupInviteMemberResponseFieldNumber = 6,
    kGroupRemoveMemberRequestFieldNumber = 7,
    kGroupRemoveMemberResponseFieldNumber = 8,
    kGroupInfoRequestFieldNumber = 9,
    kGroupInfoResponseFieldNumber = 10,
    kGroupReplyInviteRequestFieldNumber = 11,
    kGroupReplyInviteResponseFieldNumber = 12,
    kGroupListRequestFieldNumber = 13,
    kGroupListResponseFieldNumber = 14,
    kGroupInvitedRequestFieldNumber = 15,
    kGroupInvitedResponseFieldNumber = 16,
  };
  // .qaul.rpc.group.GroupCreateRequest group_create_request = 1;
  bool has_group_create_request() const;
  private:
  bool _internal_has_group_create_request() const;
  public:
  void clear_group_create_request();
  const ::qaul::rpc::group::GroupCreateRequest& group_create_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupCreateRequest* release_group_create_request();
  ::qaul::rpc::group::GroupCreateRequest* mutable_group_create_request();
  void set_allocated_group_create_request(::qaul::rpc::group::GroupCreateRequest* group_create_request);
  private:
  const ::qaul::rpc::group::GroupCreateRequest& _internal_group_create_request() const;
  ::qaul::rpc::group::GroupCreateRequest* _internal_mutable_group_create_request();
  public:
  void unsafe_arena_set_allocated_group_create_request(
      ::qaul::rpc::group::GroupCreateRequest* group_create_request);
  ::qaul::rpc::group::GroupCreateRequest* unsafe_arena_release_group_create_request();

  // .qaul.rpc.group.GroupCreateResponse group_create_response = 2;
  bool has_group_create_response() const;
  private:
  bool _internal_has_group_create_response() const;
  public:
  void clear_group_create_response();
  const ::qaul::rpc::group::GroupCreateResponse& group_create_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupCreateResponse* release_group_create_response();
  ::qaul::rpc::group::GroupCreateResponse* mutable_group_create_response();
  void set_allocated_group_create_response(::qaul::rpc::group::GroupCreateResponse* group_create_response);
  private:
  const ::qaul::rpc::group::GroupCreateResponse& _internal_group_create_response() const;
  ::qaul::rpc::group::GroupCreateResponse* _internal_mutable_group_create_response();
  public:
  void unsafe_arena_set_allocated_group_create_response(
      ::qaul::rpc::group::GroupCreateResponse* group_create_response);
  ::qaul::rpc::group::GroupCreateResponse* unsafe_arena_release_group_create_response();

  // .qaul.rpc.group.GroupRenameRequest group_rename_request = 3;
  bool has_group_rename_request() const;
  private:
  bool _internal_has_group_rename_request() const;
  public:
  void clear_group_rename_request();
  const ::qaul::rpc::group::GroupRenameRequest& group_rename_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupRenameRequest* release_group_rename_request();
  ::qaul::rpc::group::GroupRenameRequest* mutable_group_rename_request();
  void set_allocated_group_rename_request(::qaul::rpc::group::GroupRenameRequest* group_rename_request);
  private:
  const ::qaul::rpc::group::GroupRenameRequest& _internal_group_rename_request() const;
  ::qaul::rpc::group::GroupRenameRequest* _internal_mutable_group_rename_request();
  public:
  void unsafe_arena_set_allocated_group_rename_request(
      ::qaul::rpc::group::GroupRenameRequest* group_rename_request);
  ::qaul::rpc::group::GroupRenameRequest* unsafe_arena_release_group_rename_request();

  // .qaul.rpc.group.GroupRenameResponse group_rename_response = 4;
  bool has_group_rename_response() const;
  private:
  bool _internal_has_group_rename_response() const;
  public:
  void clear_group_rename_response();
  const ::qaul::rpc::group::GroupRenameResponse& group_rename_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupRenameResponse* release_group_rename_response();
  ::qaul::rpc::group::GroupRenameResponse* mutable_group_rename_response();
  void set_allocated_group_rename_response(::qaul::rpc::group::GroupRenameResponse* group_rename_response);
  private:
  const ::qaul::rpc::group::GroupRenameResponse& _internal_group_rename_response() const;
  ::qaul::rpc::group::GroupRenameResponse* _internal_mutable_group_rename_response();
  public:
  void unsafe_arena_set_allocated_group_rename_response(
      ::qaul::rpc::group::GroupRenameResponse* group_rename_response);
  ::qaul::rpc::group::GroupRenameResponse* unsafe_arena_release_group_rename_response();

  // .qaul.rpc.group.GroupInviteMemberRequest group_invite_member_request = 5;
  bool has_group_invite_member_request() const;
  private:
  bool _internal_has_group_invite_member_request() const;
  public:
  void clear_group_invite_member_request();
  const ::qaul::rpc::group::GroupInviteMemberRequest& group_invite_member_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInviteMemberRequest* release_group_invite_member_request();
  ::qaul::rpc::group::GroupInviteMemberRequest* mutable_group_invite_member_request();
  void set_allocated_group_invite_member_request(::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request);
  private:
  const ::qaul::rpc::group::GroupInviteMemberRequest& _internal_group_invite_member_request() const;
  ::qaul::rpc::group::GroupInviteMemberRequest* _internal_mutable_group_invite_member_request();
  public:
  void unsafe_arena_set_allocated_group_invite_member_request(
      ::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request);
  ::qaul::rpc::group::GroupInviteMemberRequest* unsafe_arena_release_group_invite_member_request();

  // .qaul.rpc.group.GroupInviteMemberResponse group_invite_member_response = 6;
  bool has_group_invite_member_response() const;
  private:
  bool _internal_has_group_invite_member_response() const;
  public:
  void clear_group_invite_member_response();
  const ::qaul::rpc::group::GroupInviteMemberResponse& group_invite_member_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInviteMemberResponse* release_group_invite_member_response();
  ::qaul::rpc::group::GroupInviteMemberResponse* mutable_group_invite_member_response();
  void set_allocated_group_invite_member_response(::qaul::rpc::group::GroupInviteMemberResponse* group_invite_member_response);
  private:
  const ::qaul::rpc::group::GroupInviteMemberResponse& _internal_group_invite_member_response() const;
  ::qaul::rpc::group::GroupInviteMemberResponse* _internal_mutable_group_invite_member_response();
  public:
  void unsafe_arena_set_allocated_group_invite_member_response(
      ::qaul::rpc::group::GroupInviteMemberResponse* group_invite_member_response);
  ::qaul::rpc::group::GroupInviteMemberResponse* unsafe_arena_release_group_invite_member_response();

  // .qaul.rpc.group.GroupRemoveMemberRequest group_remove_member_request = 7;
  bool has_group_remove_member_request() const;
  private:
  bool _internal_has_group_remove_member_request() const;
  public:
  void clear_group_remove_member_request();
  const ::qaul::rpc::group::GroupRemoveMemberRequest& group_remove_member_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupRemoveMemberRequest* release_group_remove_member_request();
  ::qaul::rpc::group::GroupRemoveMemberRequest* mutable_group_remove_member_request();
  void set_allocated_group_remove_member_request(::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request);
  private:
  const ::qaul::rpc::group::GroupRemoveMemberRequest& _internal_group_remove_member_request() const;
  ::qaul::rpc::group::GroupRemoveMemberRequest* _internal_mutable_group_remove_member_request();
  public:
  void unsafe_arena_set_allocated_group_remove_member_request(
      ::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request);
  ::qaul::rpc::group::GroupRemoveMemberRequest* unsafe_arena_release_group_remove_member_request();

  // .qaul.rpc.group.GroupRemoveMemberResponse group_remove_member_response = 8;
  bool has_group_remove_member_response() const;
  private:
  bool _internal_has_group_remove_member_response() const;
  public:
  void clear_group_remove_member_response();
  const ::qaul::rpc::group::GroupRemoveMemberResponse& group_remove_member_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupRemoveMemberResponse* release_group_remove_member_response();
  ::qaul::rpc::group::GroupRemoveMemberResponse* mutable_group_remove_member_response();
  void set_allocated_group_remove_member_response(::qaul::rpc::group::GroupRemoveMemberResponse* group_remove_member_response);
  private:
  const ::qaul::rpc::group::GroupRemoveMemberResponse& _internal_group_remove_member_response() const;
  ::qaul::rpc::group::GroupRemoveMemberResponse* _internal_mutable_group_remove_member_response();
  public:
  void unsafe_arena_set_allocated_group_remove_member_response(
      ::qaul::rpc::group::GroupRemoveMemberResponse* group_remove_member_response);
  ::qaul::rpc::group::GroupRemoveMemberResponse* unsafe_arena_release_group_remove_member_response();

  // .qaul.rpc.group.GroupInfoRequest group_info_request = 9;
  bool has_group_info_request() const;
  private:
  bool _internal_has_group_info_request() const;
  public:
  void clear_group_info_request();
  const ::qaul::rpc::group::GroupInfoRequest& group_info_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInfoRequest* release_group_info_request();
  ::qaul::rpc::group::GroupInfoRequest* mutable_group_info_request();
  void set_allocated_group_info_request(::qaul::rpc::group::GroupInfoRequest* group_info_request);
  private:
  const ::qaul::rpc::group::GroupInfoRequest& _internal_group_info_request() const;
  ::qaul::rpc::group::GroupInfoRequest* _internal_mutable_group_info_request();
  public:
  void unsafe_arena_set_allocated_group_info_request(
      ::qaul::rpc::group::GroupInfoRequest* group_info_request);
  ::qaul::rpc::group::GroupInfoRequest* unsafe_arena_release_group_info_request();

  // .qaul.rpc.group.GroupInfo group_info_response = 10;
  bool has_group_info_response() const;
  private:
  bool _internal_has_group_info_response() const;
  public:
  void clear_group_info_response();
  const ::qaul::rpc::group::GroupInfo& group_info_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInfo* release_group_info_response();
  ::qaul::rpc::group::GroupInfo* mutable_group_info_response();
  void set_allocated_group_info_response(::qaul::rpc::group::GroupInfo* group_info_response);
  private:
  const ::qaul::rpc::group::GroupInfo& _internal_group_info_response() const;
  ::qaul::rpc::group::GroupInfo* _internal_mutable_group_info_response();
  public:
  void unsafe_arena_set_allocated_group_info_response(
      ::qaul::rpc::group::GroupInfo* group_info_response);
  ::qaul::rpc::group::GroupInfo* unsafe_arena_release_group_info_response();

  // .qaul.rpc.group.GroupReplyInviteRequest group_reply_invite_request = 11;
  bool has_group_reply_invite_request() const;
  private:
  bool _internal_has_group_reply_invite_request() const;
  public:
  void clear_group_reply_invite_request();
  const ::qaul::rpc::group::GroupReplyInviteRequest& group_reply_invite_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupReplyInviteRequest* release_group_reply_invite_request();
  ::qaul::rpc::group::GroupReplyInviteRequest* mutable_group_reply_invite_request();
  void set_allocated_group_reply_invite_request(::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request);
  private:
  const ::qaul::rpc::group::GroupReplyInviteRequest& _internal_group_reply_invite_request() const;
  ::qaul::rpc::group::GroupReplyInviteRequest* _internal_mutable_group_reply_invite_request();
  public:
  void unsafe_arena_set_allocated_group_reply_invite_request(
      ::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request);
  ::qaul::rpc::group::GroupReplyInviteRequest* unsafe_arena_release_group_reply_invite_request();

  // .qaul.rpc.group.GroupReplyInviteResponse group_reply_invite_response = 12;
  bool has_group_reply_invite_response() const;
  private:
  bool _internal_has_group_reply_invite_response() const;
  public:
  void clear_group_reply_invite_response();
  const ::qaul::rpc::group::GroupReplyInviteResponse& group_reply_invite_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupReplyInviteResponse* release_group_reply_invite_response();
  ::qaul::rpc::group::GroupReplyInviteResponse* mutable_group_reply_invite_response();
  void set_allocated_group_reply_invite_response(::qaul::rpc::group::GroupReplyInviteResponse* group_reply_invite_response);
  private:
  const ::qaul::rpc::group::GroupReplyInviteResponse& _internal_group_reply_invite_response() const;
  ::qaul::rpc::group::GroupReplyInviteResponse* _internal_mutable_group_reply_invite_response();
  public:
  void unsafe_arena_set_allocated_group_reply_invite_response(
      ::qaul::rpc::group::GroupReplyInviteResponse* group_reply_invite_response);
  ::qaul::rpc::group::GroupReplyInviteResponse* unsafe_arena_release_group_reply_invite_response();

  // .qaul.rpc.group.GroupListRequest group_list_request = 13;
  bool has_group_list_request() const;
  private:
  bool _internal_has_group_list_request() const;
  public:
  void clear_group_list_request();
  const ::qaul::rpc::group::GroupListRequest& group_list_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupListRequest* release_group_list_request();
  ::qaul::rpc::group::GroupListRequest* mutable_group_list_request();
  void set_allocated_group_list_request(::qaul::rpc::group::GroupListRequest* group_list_request);
  private:
  const ::qaul::rpc::group::GroupListRequest& _internal_group_list_request() const;
  ::qaul::rpc::group::GroupListRequest* _internal_mutable_group_list_request();
  public:
  void unsafe_arena_set_allocated_group_list_request(
      ::qaul::rpc::group::GroupListRequest* group_list_request);
  ::qaul::rpc::group::GroupListRequest* unsafe_arena_release_group_list_request();

  // .qaul.rpc.group.GroupListResponse group_list_response = 14;
  bool has_group_list_response() const;
  private:
  bool _internal_has_group_list_response() const;
  public:
  void clear_group_list_response();
  const ::qaul::rpc::group::GroupListResponse& group_list_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupListResponse* release_group_list_response();
  ::qaul::rpc::group::GroupListResponse* mutable_group_list_response();
  void set_allocated_group_list_response(::qaul::rpc::group::GroupListResponse* group_list_response);
  private:
  const ::qaul::rpc::group::GroupListResponse& _internal_group_list_response() const;
  ::qaul::rpc::group::GroupListResponse* _internal_mutable_group_list_response();
  public:
  void unsafe_arena_set_allocated_group_list_response(
      ::qaul::rpc::group::GroupListResponse* group_list_response);
  ::qaul::rpc::group::GroupListResponse* unsafe_arena_release_group_list_response();

  // .qaul.rpc.group.GroupInvitedRequest group_invited_request = 15;
  bool has_group_invited_request() const;
  private:
  bool _internal_has_group_invited_request() const;
  public:
  void clear_group_invited_request();
  const ::qaul::rpc::group::GroupInvitedRequest& group_invited_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInvitedRequest* release_group_invited_request();
  ::qaul::rpc::group::GroupInvitedRequest* mutable_group_invited_request();
  void set_allocated_group_invited_request(::qaul::rpc::group::GroupInvitedRequest* group_invited_request);
  private:
  const ::qaul::rpc::group::GroupInvitedRequest& _internal_group_invited_request() const;
  ::qaul::rpc::group::GroupInvitedRequest* _internal_mutable_group_invited_request();
  public:
  void unsafe_arena_set_allocated_group_invited_request(
      ::qaul::rpc::group::GroupInvitedRequest* group_invited_request);
  ::qaul::rpc::group::GroupInvitedRequest* unsafe_arena_release_group_invited_request();

  // .qaul.rpc.group.GroupInvitedResponse group_invited_response = 16;
  bool has_group_invited_response() const;
  private:
  bool _internal_has_group_invited_response() const;
  public:
  void clear_group_invited_response();
  const ::qaul::rpc::group::GroupInvitedResponse& group_invited_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInvitedResponse* release_group_invited_response();
  ::qaul::rpc::group::GroupInvitedResponse* mutable_group_invited_response();
  void set_allocated_group_invited_response(::qaul::rpc::group::GroupInvitedResponse* group_invited_response);
  private:
  const ::qaul::rpc::group::GroupInvitedResponse& _internal_group_invited_response() const;
  ::qaul::rpc::group::GroupInvitedResponse* _internal_mutable_group_invited_response();
  public:
  void unsafe_arena_set_allocated_group_invited_response(
      ::qaul::rpc::group::GroupInvitedResponse* group_invited_response);
  ::qaul::rpc::group::GroupInvitedResponse* unsafe_arena_release_group_invited_response();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.group.Group)
 private:
  class _Internal;
  void set_has_group_create_request();
  void set_has_group_create_response();
  void set_has_group_rename_request();
  void set_has_group_rename_response();
  void set_has_group_invite_member_request();
  void set_has_group_invite_member_response();
  void set_has_group_remove_member_request();
  void set_has_group_remove_member_response();
  void set_has_group_info_request();
  void set_has_group_info_response();
  void set_has_group_reply_invite_request();
  void set_has_group_reply_invite_response();
  void set_has_group_list_request();
  void set_has_group_list_response();
  void set_has_group_invited_request();
  void set_has_group_invited_response();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::group::GroupCreateRequest* group_create_request_;
      ::qaul::rpc::group::GroupCreateResponse* group_create_response_;
      ::qaul::rpc::group::GroupRenameRequest* group_rename_request_;
      ::qaul::rpc::group::GroupRenameResponse* group_rename_response_;
      ::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request_;
      ::qaul::rpc::group::GroupInviteMemberResponse* group_invite_member_response_;
      ::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request_;
      ::qaul::rpc::group::GroupRemoveMemberResponse* group_remove_member_response_;
      ::qaul::rpc::group::GroupInfoRequest* group_info_request_;
      ::qaul::rpc::group::GroupInfo* group_info_response_;
      ::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request_;
      ::qaul::rpc::group::GroupReplyInviteResponse* group_reply_invite_response_;
      ::qaul::rpc::group::GroupListRequest* group_list_request_;
      ::qaul::rpc::group::GroupListResponse* group_list_response_;
      ::qaul::rpc::group::GroupInvitedRequest* group_invited_request_;
      ::qaul::rpc::group::GroupInvitedResponse* group_invited_response_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupResult) */ {
 public:
  inline GroupResult() : GroupResult(nullptr) {}
  ~GroupResult() override;
  explicit PROTOBUF_CONSTEXPR GroupResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupResult(const GroupResult& from);
  GroupResult(GroupResult&& from) noexcept
    : GroupResult() {
    *this = ::std::move(from);
  }

  inline GroupResult& operator=(const GroupResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupResult& operator=(GroupResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupResult* internal_default_instance() {
    return reinterpret_cast<const GroupResult*>(
               &_GroupResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupResult& a, GroupResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupResult& from) {
    GroupResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupResult";
  }
  protected:
  explicit GroupResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupCreateRequest) */ {
 public:
  inline GroupCreateRequest() : GroupCreateRequest(nullptr) {}
  ~GroupCreateRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateRequest(const GroupCreateRequest& from);
  GroupCreateRequest(GroupCreateRequest&& from) noexcept
    : GroupCreateRequest() {
    *this = ::std::move(from);
  }

  inline GroupCreateRequest& operator=(const GroupCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateRequest& operator=(GroupCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateRequest* internal_default_instance() {
    return reinterpret_cast<const GroupCreateRequest*>(
               &_GroupCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupCreateRequest& a, GroupCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupCreateRequest& from) {
    GroupCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupCreateRequest";
  }
  protected:
  explicit GroupCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
  };
  // string group_name = 1;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupCreateResponse) */ {
 public:
  inline GroupCreateResponse() : GroupCreateResponse(nullptr) {}
  ~GroupCreateResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateResponse(const GroupCreateResponse& from);
  GroupCreateResponse(GroupCreateResponse&& from) noexcept
    : GroupCreateResponse() {
    *this = ::std::move(from);
  }

  inline GroupCreateResponse& operator=(const GroupCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateResponse& operator=(GroupCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateResponse* internal_default_instance() {
    return reinterpret_cast<const GroupCreateResponse*>(
               &_GroupCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupCreateResponse& a, GroupCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupCreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupCreateResponse& from) {
    GroupCreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupCreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupCreateResponse";
  }
  protected:
  explicit GroupCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // .qaul.rpc.group.GroupResult result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::qaul::rpc::group::GroupResult& result() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupResult* release_result();
  ::qaul::rpc::group::GroupResult* mutable_result();
  void set_allocated_result(::qaul::rpc::group::GroupResult* result);
  private:
  const ::qaul::rpc::group::GroupResult& _internal_result() const;
  ::qaul::rpc::group::GroupResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::qaul::rpc::group::GroupResult* result);
  ::qaul::rpc::group::GroupResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::qaul::rpc::group::GroupResult* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupRenameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupRenameRequest) */ {
 public:
  inline GroupRenameRequest() : GroupRenameRequest(nullptr) {}
  ~GroupRenameRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupRenameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRenameRequest(const GroupRenameRequest& from);
  GroupRenameRequest(GroupRenameRequest&& from) noexcept
    : GroupRenameRequest() {
    *this = ::std::move(from);
  }

  inline GroupRenameRequest& operator=(const GroupRenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRenameRequest& operator=(GroupRenameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupRenameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRenameRequest* internal_default_instance() {
    return reinterpret_cast<const GroupRenameRequest*>(
               &_GroupRenameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupRenameRequest& a, GroupRenameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRenameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRenameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRenameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRenameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupRenameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupRenameRequest& from) {
    GroupRenameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRenameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupRenameRequest";
  }
  protected:
  explicit GroupRenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupRenameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupRenameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupRenameResponse) */ {
 public:
  inline GroupRenameResponse() : GroupRenameResponse(nullptr) {}
  ~GroupRenameResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupRenameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRenameResponse(const GroupRenameResponse& from);
  GroupRenameResponse(GroupRenameResponse&& from) noexcept
    : GroupRenameResponse() {
    *this = ::std::move(from);
  }

  inline GroupRenameResponse& operator=(const GroupRenameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRenameResponse& operator=(GroupRenameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupRenameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRenameResponse* internal_default_instance() {
    return reinterpret_cast<const GroupRenameResponse*>(
               &_GroupRenameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupRenameResponse& a, GroupRenameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRenameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRenameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRenameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRenameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupRenameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupRenameResponse& from) {
    GroupRenameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRenameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupRenameResponse";
  }
  protected:
  explicit GroupRenameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // .qaul.rpc.group.GroupResult result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::qaul::rpc::group::GroupResult& result() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupResult* release_result();
  ::qaul::rpc::group::GroupResult* mutable_result();
  void set_allocated_result(::qaul::rpc::group::GroupResult* result);
  private:
  const ::qaul::rpc::group::GroupResult& _internal_result() const;
  ::qaul::rpc::group::GroupResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::qaul::rpc::group::GroupResult* result);
  ::qaul::rpc::group::GroupResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupRenameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::qaul::rpc::group::GroupResult* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInviteMemberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInviteMemberRequest) */ {
 public:
  inline GroupInviteMemberRequest() : GroupInviteMemberRequest(nullptr) {}
  ~GroupInviteMemberRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupInviteMemberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInviteMemberRequest(const GroupInviteMemberRequest& from);
  GroupInviteMemberRequest(GroupInviteMemberRequest&& from) noexcept
    : GroupInviteMemberRequest() {
    *this = ::std::move(from);
  }

  inline GroupInviteMemberRequest& operator=(const GroupInviteMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInviteMemberRequest& operator=(GroupInviteMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInviteMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInviteMemberRequest* internal_default_instance() {
    return reinterpret_cast<const GroupInviteMemberRequest*>(
               &_GroupInviteMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GroupInviteMemberRequest& a, GroupInviteMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInviteMemberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInviteMemberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInviteMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInviteMemberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInviteMemberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInviteMemberRequest& from) {
    GroupInviteMemberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInviteMemberRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInviteMemberRequest";
  }
  protected:
  explicit GroupInviteMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInviteMemberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInviteMemberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInviteMemberResponse) */ {
 public:
  inline GroupInviteMemberResponse() : GroupInviteMemberResponse(nullptr) {}
  ~GroupInviteMemberResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupInviteMemberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInviteMemberResponse(const GroupInviteMemberResponse& from);
  GroupInviteMemberResponse(GroupInviteMemberResponse&& from) noexcept
    : GroupInviteMemberResponse() {
    *this = ::std::move(from);
  }

  inline GroupInviteMemberResponse& operator=(const GroupInviteMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInviteMemberResponse& operator=(GroupInviteMemberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInviteMemberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInviteMemberResponse* internal_default_instance() {
    return reinterpret_cast<const GroupInviteMemberResponse*>(
               &_GroupInviteMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroupInviteMemberResponse& a, GroupInviteMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInviteMemberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInviteMemberResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInviteMemberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInviteMemberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInviteMemberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInviteMemberResponse& from) {
    GroupInviteMemberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInviteMemberResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInviteMemberResponse";
  }
  protected:
  explicit GroupInviteMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .qaul.rpc.group.GroupResult result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::qaul::rpc::group::GroupResult& result() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupResult* release_result();
  ::qaul::rpc::group::GroupResult* mutable_result();
  void set_allocated_result(::qaul::rpc::group::GroupResult* result);
  private:
  const ::qaul::rpc::group::GroupResult& _internal_result() const;
  ::qaul::rpc::group::GroupResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::qaul::rpc::group::GroupResult* result);
  ::qaul::rpc::group::GroupResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInviteMemberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::qaul::rpc::group::GroupResult* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupReplyInviteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupReplyInviteRequest) */ {
 public:
  inline GroupReplyInviteRequest() : GroupReplyInviteRequest(nullptr) {}
  ~GroupReplyInviteRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupReplyInviteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupReplyInviteRequest(const GroupReplyInviteRequest& from);
  GroupReplyInviteRequest(GroupReplyInviteRequest&& from) noexcept
    : GroupReplyInviteRequest() {
    *this = ::std::move(from);
  }

  inline GroupReplyInviteRequest& operator=(const GroupReplyInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupReplyInviteRequest& operator=(GroupReplyInviteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupReplyInviteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupReplyInviteRequest* internal_default_instance() {
    return reinterpret_cast<const GroupReplyInviteRequest*>(
               &_GroupReplyInviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupReplyInviteRequest& a, GroupReplyInviteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupReplyInviteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupReplyInviteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupReplyInviteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupReplyInviteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupReplyInviteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupReplyInviteRequest& from) {
    GroupReplyInviteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupReplyInviteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupReplyInviteRequest";
  }
  protected:
  explicit GroupReplyInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kAcceptFieldNumber = 3,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bool accept = 3;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupReplyInviteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    bool accept_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupReplyInviteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupReplyInviteResponse) */ {
 public:
  inline GroupReplyInviteResponse() : GroupReplyInviteResponse(nullptr) {}
  ~GroupReplyInviteResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupReplyInviteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupReplyInviteResponse(const GroupReplyInviteResponse& from);
  GroupReplyInviteResponse(GroupReplyInviteResponse&& from) noexcept
    : GroupReplyInviteResponse() {
    *this = ::std::move(from);
  }

  inline GroupReplyInviteResponse& operator=(const GroupReplyInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupReplyInviteResponse& operator=(GroupReplyInviteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupReplyInviteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupReplyInviteResponse* internal_default_instance() {
    return reinterpret_cast<const GroupReplyInviteResponse*>(
               &_GroupReplyInviteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupReplyInviteResponse& a, GroupReplyInviteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupReplyInviteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupReplyInviteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupReplyInviteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupReplyInviteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupReplyInviteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupReplyInviteResponse& from) {
    GroupReplyInviteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupReplyInviteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupReplyInviteResponse";
  }
  protected:
  explicit GroupReplyInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kResultFieldNumber = 3,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // .qaul.rpc.group.GroupResult result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::qaul::rpc::group::GroupResult& result() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupResult* release_result();
  ::qaul::rpc::group::GroupResult* mutable_result();
  void set_allocated_result(::qaul::rpc::group::GroupResult* result);
  private:
  const ::qaul::rpc::group::GroupResult& _internal_result() const;
  ::qaul::rpc::group::GroupResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::qaul::rpc::group::GroupResult* result);
  ::qaul::rpc::group::GroupResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupReplyInviteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::qaul::rpc::group::GroupResult* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupRemoveMemberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupRemoveMemberRequest) */ {
 public:
  inline GroupRemoveMemberRequest() : GroupRemoveMemberRequest(nullptr) {}
  ~GroupRemoveMemberRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupRemoveMemberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRemoveMemberRequest(const GroupRemoveMemberRequest& from);
  GroupRemoveMemberRequest(GroupRemoveMemberRequest&& from) noexcept
    : GroupRemoveMemberRequest() {
    *this = ::std::move(from);
  }

  inline GroupRemoveMemberRequest& operator=(const GroupRemoveMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRemoveMemberRequest& operator=(GroupRemoveMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupRemoveMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRemoveMemberRequest* internal_default_instance() {
    return reinterpret_cast<const GroupRemoveMemberRequest*>(
               &_GroupRemoveMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroupRemoveMemberRequest& a, GroupRemoveMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRemoveMemberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRemoveMemberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRemoveMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRemoveMemberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupRemoveMemberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupRemoveMemberRequest& from) {
    GroupRemoveMemberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRemoveMemberRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupRemoveMemberRequest";
  }
  protected:
  explicit GroupRemoveMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupRemoveMemberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupRemoveMemberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupRemoveMemberResponse) */ {
 public:
  inline GroupRemoveMemberResponse() : GroupRemoveMemberResponse(nullptr) {}
  ~GroupRemoveMemberResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupRemoveMemberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRemoveMemberResponse(const GroupRemoveMemberResponse& from);
  GroupRemoveMemberResponse(GroupRemoveMemberResponse&& from) noexcept
    : GroupRemoveMemberResponse() {
    *this = ::std::move(from);
  }

  inline GroupRemoveMemberResponse& operator=(const GroupRemoveMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRemoveMemberResponse& operator=(GroupRemoveMemberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupRemoveMemberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRemoveMemberResponse* internal_default_instance() {
    return reinterpret_cast<const GroupRemoveMemberResponse*>(
               &_GroupRemoveMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GroupRemoveMemberResponse& a, GroupRemoveMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRemoveMemberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRemoveMemberResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRemoveMemberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRemoveMemberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupRemoveMemberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupRemoveMemberResponse& from) {
    GroupRemoveMemberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRemoveMemberResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupRemoveMemberResponse";
  }
  protected:
  explicit GroupRemoveMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .qaul.rpc.group.GroupResult result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::qaul::rpc::group::GroupResult& result() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupResult* release_result();
  ::qaul::rpc::group::GroupResult* mutable_result();
  void set_allocated_result(::qaul::rpc::group::GroupResult* result);
  private:
  const ::qaul::rpc::group::GroupResult& _internal_result() const;
  ::qaul::rpc::group::GroupResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::qaul::rpc::group::GroupResult* result);
  ::qaul::rpc::group::GroupResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupRemoveMemberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::qaul::rpc::group::GroupResult* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInfoRequest) */ {
 public:
  inline GroupInfoRequest() : GroupInfoRequest(nullptr) {}
  ~GroupInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfoRequest(const GroupInfoRequest& from);
  GroupInfoRequest(GroupInfoRequest&& from) noexcept
    : GroupInfoRequest() {
    *this = ::std::move(from);
  }

  inline GroupInfoRequest& operator=(const GroupInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfoRequest& operator=(GroupInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GroupInfoRequest*>(
               &_GroupInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GroupInfoRequest& a, GroupInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInfoRequest& from) {
    GroupInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInfoRequest";
  }
  protected:
  explicit GroupInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupMember) */ {
 public:
  inline GroupMember() : GroupMember(nullptr) {}
  ~GroupMember() override;
  explicit PROTOBUF_CONSTEXPR GroupMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMember(const GroupMember& from);
  GroupMember(GroupMember&& from) noexcept
    : GroupMember() {
    *this = ::std::move(from);
  }

  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
               &_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GroupMember& a, GroupMember& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMember& from) {
    GroupMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupMember";
  }
  protected:
  explicit GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kJoinedAtFieldNumber = 3,
    kRoleFieldNumber = 2,
    kStateFieldNumber = 4,
    kLastMessageIndexFieldNumber = 5,
  };
  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint64 joined_at = 3;
  void clear_joined_at();
  uint64_t joined_at() const;
  void set_joined_at(uint64_t value);
  private:
  uint64_t _internal_joined_at() const;
  void _internal_set_joined_at(uint64_t value);
  public:

  // .qaul.rpc.group.GroupMemberRole role = 2;
  void clear_role();
  ::qaul::rpc::group::GroupMemberRole role() const;
  void set_role(::qaul::rpc::group::GroupMemberRole value);
  private:
  ::qaul::rpc::group::GroupMemberRole _internal_role() const;
  void _internal_set_role(::qaul::rpc::group::GroupMemberRole value);
  public:

  // .qaul.rpc.group.GroupMemberState state = 4;
  void clear_state();
  ::qaul::rpc::group::GroupMemberState state() const;
  void set_state(::qaul::rpc::group::GroupMemberState value);
  private:
  ::qaul::rpc::group::GroupMemberState _internal_state() const;
  void _internal_set_state(::qaul::rpc::group::GroupMemberState value);
  public:

  // uint32 last_message_index = 5;
  void clear_last_message_index();
  uint32_t last_message_index() const;
  void set_last_message_index(uint32_t value);
  private:
  uint32_t _internal_last_message_index() const;
  void _internal_set_last_message_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    uint64_t joined_at_;
    int role_;
    int state_;
    uint32_t last_message_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInfo) */ {
 public:
  inline GroupInfo() : GroupInfo(nullptr) {}
  ~GroupInfo() override;
  explicit PROTOBUF_CONSTEXPR GroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInfo& from) {
    GroupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInfo";
  }
  protected:
  explicit GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 7,
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kLastMessageFieldNumber = 10,
    kLastMessageSenderIdFieldNumber = 11,
    kCreatedAtFieldNumber = 3,
    kStatusFieldNumber = 4,
    kRevisionFieldNumber = 5,
    kIsDirectChatFieldNumber = 6,
    kUnreadMessagesFieldNumber = 8,
    kLastMessageAtFieldNumber = 9,
  };
  // repeated .qaul.rpc.group.GroupMember members = 7;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::qaul::rpc::group::GroupMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >*
      mutable_members();
  private:
  const ::qaul::rpc::group::GroupMember& _internal_members(int index) const;
  ::qaul::rpc::group::GroupMember* _internal_add_members();
  public:
  const ::qaul::rpc::group::GroupMember& members(int index) const;
  ::qaul::rpc::group::GroupMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >&
      members() const;

  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // bytes last_message = 10;
  void clear_last_message();
  const std::string& last_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_message();
  PROTOBUF_NODISCARD std::string* release_last_message();
  void set_allocated_last_message(std::string* last_message);
  private:
  const std::string& _internal_last_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_message(const std::string& value);
  std::string* _internal_mutable_last_message();
  public:

  // bytes last_message_sender_id = 11;
  void clear_last_message_sender_id();
  const std::string& last_message_sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_message_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_message_sender_id();
  PROTOBUF_NODISCARD std::string* release_last_message_sender_id();
  void set_allocated_last_message_sender_id(std::string* last_message_sender_id);
  private:
  const std::string& _internal_last_message_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_message_sender_id(const std::string& value);
  std::string* _internal_mutable_last_message_sender_id();
  public:

  // uint64 created_at = 3;
  void clear_created_at();
  uint64_t created_at() const;
  void set_created_at(uint64_t value);
  private:
  uint64_t _internal_created_at() const;
  void _internal_set_created_at(uint64_t value);
  public:

  // .qaul.rpc.group.GroupStatus status = 4;
  void clear_status();
  ::qaul::rpc::group::GroupStatus status() const;
  void set_status(::qaul::rpc::group::GroupStatus value);
  private:
  ::qaul::rpc::group::GroupStatus _internal_status() const;
  void _internal_set_status(::qaul::rpc::group::GroupStatus value);
  public:

  // uint32 revision = 5;
  void clear_revision();
  uint32_t revision() const;
  void set_revision(uint32_t value);
  private:
  uint32_t _internal_revision() const;
  void _internal_set_revision(uint32_t value);
  public:

  // bool is_direct_chat = 6;
  void clear_is_direct_chat();
  bool is_direct_chat() const;
  void set_is_direct_chat(bool value);
  private:
  bool _internal_is_direct_chat() const;
  void _internal_set_is_direct_chat(bool value);
  public:

  // uint32 unread_messages = 8;
  void clear_unread_messages();
  uint32_t unread_messages() const;
  void set_unread_messages(uint32_t value);
  private:
  uint32_t _internal_unread_messages() const;
  void _internal_set_unread_messages(uint32_t value);
  public:

  // uint64 last_message_at = 9;
  void clear_last_message_at();
  uint64_t last_message_at() const;
  void set_last_message_at(uint64_t value);
  private:
  uint64_t _internal_last_message_at() const;
  void _internal_set_last_message_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_message_sender_id_;
    uint64_t created_at_;
    int status_;
    uint32_t revision_;
    bool is_direct_chat_;
    uint32_t unread_messages_;
    uint64_t last_message_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupListRequest) */ {
 public:
  inline GroupListRequest() : GroupListRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GroupListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupListRequest(const GroupListRequest& from);
  GroupListRequest(GroupListRequest&& from) noexcept
    : GroupListRequest() {
    *this = ::std::move(from);
  }

  inline GroupListRequest& operator=(const GroupListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListRequest& operator=(GroupListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupListRequest* internal_default_instance() {
    return reinterpret_cast<const GroupListRequest*>(
               &_GroupListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GroupListRequest& a, GroupListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GroupListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GroupListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupListRequest";
  }
  protected:
  explicit GroupListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupListResponse) */ {
 public:
  inline GroupListResponse() : GroupListResponse(nullptr) {}
  ~GroupListResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupListResponse(const GroupListResponse& from);
  GroupListResponse(GroupListResponse&& from) noexcept
    : GroupListResponse() {
    *this = ::std::move(from);
  }

  inline GroupListResponse& operator=(const GroupListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListResponse& operator=(GroupListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupListResponse* internal_default_instance() {
    return reinterpret_cast<const GroupListResponse*>(
               &_GroupListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GroupListResponse& a, GroupListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupListResponse& from) {
    GroupListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupListResponse";
  }
  protected:
  explicit GroupListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .qaul.rpc.group.GroupInfo groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::qaul::rpc::group::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfo >*
      mutable_groups();
  private:
  const ::qaul::rpc::group::GroupInfo& _internal_groups(int index) const;
  ::qaul::rpc::group::GroupInfo* _internal_add_groups();
  public:
  const ::qaul::rpc::group::GroupInfo& groups(int index) const;
  ::qaul::rpc::group::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfo >&
      groups() const;

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfo > groups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInvited final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInvited) */ {
 public:
  inline GroupInvited() : GroupInvited(nullptr) {}
  ~GroupInvited() override;
  explicit PROTOBUF_CONSTEXPR GroupInvited(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInvited(const GroupInvited& from);
  GroupInvited(GroupInvited&& from) noexcept
    : GroupInvited() {
    *this = ::std::move(from);
  }

  inline GroupInvited& operator=(const GroupInvited& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInvited& operator=(GroupInvited&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInvited& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInvited* internal_default_instance() {
    return reinterpret_cast<const GroupInvited*>(
               &_GroupInvited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GroupInvited& a, GroupInvited& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInvited* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInvited* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInvited* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInvited>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInvited& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInvited& from) {
    GroupInvited::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInvited* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInvited";
  }
  protected:
  explicit GroupInvited(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kGroupFieldNumber = 3,
    kReceivedAtFieldNumber = 2,
  };
  // bytes sender_id = 1;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // .qaul.rpc.group.GroupInfo group = 3;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::qaul::rpc::group::GroupInfo& group() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInfo* release_group();
  ::qaul::rpc::group::GroupInfo* mutable_group();
  void set_allocated_group(::qaul::rpc::group::GroupInfo* group);
  private:
  const ::qaul::rpc::group::GroupInfo& _internal_group() const;
  ::qaul::rpc::group::GroupInfo* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::qaul::rpc::group::GroupInfo* group);
  ::qaul::rpc::group::GroupInfo* unsafe_arena_release_group();

  // uint64 received_at = 2;
  void clear_received_at();
  uint64_t received_at() const;
  void set_received_at(uint64_t value);
  private:
  uint64_t _internal_received_at() const;
  void _internal_set_received_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInvited)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::qaul::rpc::group::GroupInfo* group_;
    uint64_t received_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInvitedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInvitedRequest) */ {
 public:
  inline GroupInvitedRequest() : GroupInvitedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GroupInvitedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInvitedRequest(const GroupInvitedRequest& from);
  GroupInvitedRequest(GroupInvitedRequest&& from) noexcept
    : GroupInvitedRequest() {
    *this = ::std::move(from);
  }

  inline GroupInvitedRequest& operator=(const GroupInvitedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInvitedRequest& operator=(GroupInvitedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInvitedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInvitedRequest* internal_default_instance() {
    return reinterpret_cast<const GroupInvitedRequest*>(
               &_GroupInvitedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GroupInvitedRequest& a, GroupInvitedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInvitedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInvitedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInvitedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInvitedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GroupInvitedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GroupInvitedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInvitedRequest";
  }
  protected:
  explicit GroupInvitedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInvitedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInvitedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInvitedResponse) */ {
 public:
  inline GroupInvitedResponse() : GroupInvitedResponse(nullptr) {}
  ~GroupInvitedResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupInvitedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInvitedResponse(const GroupInvitedResponse& from);
  GroupInvitedResponse(GroupInvitedResponse&& from) noexcept
    : GroupInvitedResponse() {
    *this = ::std::move(from);
  }

  inline GroupInvitedResponse& operator=(const GroupInvitedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInvitedResponse& operator=(GroupInvitedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInvitedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInvitedResponse* internal_default_instance() {
    return reinterpret_cast<const GroupInvitedResponse*>(
               &_GroupInvitedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GroupInvitedResponse& a, GroupInvitedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInvitedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInvitedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInvitedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInvitedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInvitedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInvitedResponse& from) {
    GroupInvitedResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInvitedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInvitedResponse";
  }
  protected:
  explicit GroupInvitedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitedFieldNumber = 1,
  };
  // repeated .qaul.rpc.group.GroupInvited invited = 1;
  int invited_size() const;
  private:
  int _internal_invited_size() const;
  public:
  void clear_invited();
  ::qaul::rpc::group::GroupInvited* mutable_invited(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInvited >*
      mutable_invited();
  private:
  const ::qaul::rpc::group::GroupInvited& _internal_invited(int index) const;
  ::qaul::rpc::group::GroupInvited* _internal_add_invited();
  public:
  const ::qaul::rpc::group::GroupInvited& invited(int index) const;
  ::qaul::rpc::group::GroupInvited* add_invited();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInvited >&
      invited() const;

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInvitedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInvited > invited_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Group

// .qaul.rpc.group.GroupCreateRequest group_create_request = 1;
inline bool Group::_internal_has_group_create_request() const {
  return message_case() == kGroupCreateRequest;
}
inline bool Group::has_group_create_request() const {
  return _internal_has_group_create_request();
}
inline void Group::set_has_group_create_request() {
  _impl_._oneof_case_[0] = kGroupCreateRequest;
}
inline void Group::clear_group_create_request() {
  if (_internal_has_group_create_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_create_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::release_group_create_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_create_request)
  if (_internal_has_group_create_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateRequest* temp = _impl_.message_.group_create_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_create_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupCreateRequest& Group::_internal_group_create_request() const {
  return _internal_has_group_create_request()
      ? *_impl_.message_.group_create_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupCreateRequest&>(::qaul::rpc::group::_GroupCreateRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupCreateRequest& Group::group_create_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_create_request)
  return _internal_group_create_request();
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::unsafe_arena_release_group_create_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_create_request)
  if (_internal_has_group_create_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateRequest* temp = _impl_.message_.group_create_request_;
    _impl_.message_.group_create_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_create_request(::qaul::rpc::group::GroupCreateRequest* group_create_request) {
  clear_message();
  if (group_create_request) {
    set_has_group_create_request();
    _impl_.message_.group_create_request_ = group_create_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_create_request)
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::_internal_mutable_group_create_request() {
  if (!_internal_has_group_create_request()) {
    clear_message();
    set_has_group_create_request();
    _impl_.message_.group_create_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupCreateRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_create_request_;
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::mutable_group_create_request() {
  ::qaul::rpc::group::GroupCreateRequest* _msg = _internal_mutable_group_create_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_create_request)
  return _msg;
}

// .qaul.rpc.group.GroupCreateResponse group_create_response = 2;
inline bool Group::_internal_has_group_create_response() const {
  return message_case() == kGroupCreateResponse;
}
inline bool Group::has_group_create_response() const {
  return _internal_has_group_create_response();
}
inline void Group::set_has_group_create_response() {
  _impl_._oneof_case_[0] = kGroupCreateResponse;
}
inline void Group::clear_group_create_response() {
  if (_internal_has_group_create_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_create_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::release_group_create_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_create_response)
  if (_internal_has_group_create_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateResponse* temp = _impl_.message_.group_create_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_create_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupCreateResponse& Group::_internal_group_create_response() const {
  return _internal_has_group_create_response()
      ? *_impl_.message_.group_create_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupCreateResponse&>(::qaul::rpc::group::_GroupCreateResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupCreateResponse& Group::group_create_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_create_response)
  return _internal_group_create_response();
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::unsafe_arena_release_group_create_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_create_response)
  if (_internal_has_group_create_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateResponse* temp = _impl_.message_.group_create_response_;
    _impl_.message_.group_create_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_create_response(::qaul::rpc::group::GroupCreateResponse* group_create_response) {
  clear_message();
  if (group_create_response) {
    set_has_group_create_response();
    _impl_.message_.group_create_response_ = group_create_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_create_response)
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::_internal_mutable_group_create_response() {
  if (!_internal_has_group_create_response()) {
    clear_message();
    set_has_group_create_response();
    _impl_.message_.group_create_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupCreateResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_create_response_;
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::mutable_group_create_response() {
  ::qaul::rpc::group::GroupCreateResponse* _msg = _internal_mutable_group_create_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_create_response)
  return _msg;
}

// .qaul.rpc.group.GroupRenameRequest group_rename_request = 3;
inline bool Group::_internal_has_group_rename_request() const {
  return message_case() == kGroupRenameRequest;
}
inline bool Group::has_group_rename_request() const {
  return _internal_has_group_rename_request();
}
inline void Group::set_has_group_rename_request() {
  _impl_._oneof_case_[0] = kGroupRenameRequest;
}
inline void Group::clear_group_rename_request() {
  if (_internal_has_group_rename_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_rename_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::release_group_rename_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_rename_request)
  if (_internal_has_group_rename_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRenameRequest* temp = _impl_.message_.group_rename_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_rename_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupRenameRequest& Group::_internal_group_rename_request() const {
  return _internal_has_group_rename_request()
      ? *_impl_.message_.group_rename_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupRenameRequest&>(::qaul::rpc::group::_GroupRenameRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupRenameRequest& Group::group_rename_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_rename_request)
  return _internal_group_rename_request();
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::unsafe_arena_release_group_rename_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_rename_request)
  if (_internal_has_group_rename_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRenameRequest* temp = _impl_.message_.group_rename_request_;
    _impl_.message_.group_rename_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_rename_request(::qaul::rpc::group::GroupRenameRequest* group_rename_request) {
  clear_message();
  if (group_rename_request) {
    set_has_group_rename_request();
    _impl_.message_.group_rename_request_ = group_rename_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_rename_request)
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::_internal_mutable_group_rename_request() {
  if (!_internal_has_group_rename_request()) {
    clear_message();
    set_has_group_rename_request();
    _impl_.message_.group_rename_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupRenameRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_rename_request_;
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::mutable_group_rename_request() {
  ::qaul::rpc::group::GroupRenameRequest* _msg = _internal_mutable_group_rename_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_rename_request)
  return _msg;
}

// .qaul.rpc.group.GroupRenameResponse group_rename_response = 4;
inline bool Group::_internal_has_group_rename_response() const {
  return message_case() == kGroupRenameResponse;
}
inline bool Group::has_group_rename_response() const {
  return _internal_has_group_rename_response();
}
inline void Group::set_has_group_rename_response() {
  _impl_._oneof_case_[0] = kGroupRenameResponse;
}
inline void Group::clear_group_rename_response() {
  if (_internal_has_group_rename_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_rename_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupRenameResponse* Group::release_group_rename_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_rename_response)
  if (_internal_has_group_rename_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRenameResponse* temp = _impl_.message_.group_rename_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_rename_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupRenameResponse& Group::_internal_group_rename_response() const {
  return _internal_has_group_rename_response()
      ? *_impl_.message_.group_rename_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupRenameResponse&>(::qaul::rpc::group::_GroupRenameResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupRenameResponse& Group::group_rename_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_rename_response)
  return _internal_group_rename_response();
}
inline ::qaul::rpc::group::GroupRenameResponse* Group::unsafe_arena_release_group_rename_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_rename_response)
  if (_internal_has_group_rename_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRenameResponse* temp = _impl_.message_.group_rename_response_;
    _impl_.message_.group_rename_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_rename_response(::qaul::rpc::group::GroupRenameResponse* group_rename_response) {
  clear_message();
  if (group_rename_response) {
    set_has_group_rename_response();
    _impl_.message_.group_rename_response_ = group_rename_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_rename_response)
}
inline ::qaul::rpc::group::GroupRenameResponse* Group::_internal_mutable_group_rename_response() {
  if (!_internal_has_group_rename_response()) {
    clear_message();
    set_has_group_rename_response();
    _impl_.message_.group_rename_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupRenameResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_rename_response_;
}
inline ::qaul::rpc::group::GroupRenameResponse* Group::mutable_group_rename_response() {
  ::qaul::rpc::group::GroupRenameResponse* _msg = _internal_mutable_group_rename_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_rename_response)
  return _msg;
}

// .qaul.rpc.group.GroupInviteMemberRequest group_invite_member_request = 5;
inline bool Group::_internal_has_group_invite_member_request() const {
  return message_case() == kGroupInviteMemberRequest;
}
inline bool Group::has_group_invite_member_request() const {
  return _internal_has_group_invite_member_request();
}
inline void Group::set_has_group_invite_member_request() {
  _impl_._oneof_case_[0] = kGroupInviteMemberRequest;
}
inline void Group::clear_group_invite_member_request() {
  if (_internal_has_group_invite_member_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_invite_member_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::release_group_invite_member_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_invite_member_request)
  if (_internal_has_group_invite_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInviteMemberRequest* temp = _impl_.message_.group_invite_member_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_invite_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInviteMemberRequest& Group::_internal_group_invite_member_request() const {
  return _internal_has_group_invite_member_request()
      ? *_impl_.message_.group_invite_member_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupInviteMemberRequest&>(::qaul::rpc::group::_GroupInviteMemberRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupInviteMemberRequest& Group::group_invite_member_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_invite_member_request)
  return _internal_group_invite_member_request();
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::unsafe_arena_release_group_invite_member_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_invite_member_request)
  if (_internal_has_group_invite_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInviteMemberRequest* temp = _impl_.message_.group_invite_member_request_;
    _impl_.message_.group_invite_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_invite_member_request(::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request) {
  clear_message();
  if (group_invite_member_request) {
    set_has_group_invite_member_request();
    _impl_.message_.group_invite_member_request_ = group_invite_member_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_invite_member_request)
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::_internal_mutable_group_invite_member_request() {
  if (!_internal_has_group_invite_member_request()) {
    clear_message();
    set_has_group_invite_member_request();
    _impl_.message_.group_invite_member_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInviteMemberRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_invite_member_request_;
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::mutable_group_invite_member_request() {
  ::qaul::rpc::group::GroupInviteMemberRequest* _msg = _internal_mutable_group_invite_member_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_invite_member_request)
  return _msg;
}

// .qaul.rpc.group.GroupInviteMemberResponse group_invite_member_response = 6;
inline bool Group::_internal_has_group_invite_member_response() const {
  return message_case() == kGroupInviteMemberResponse;
}
inline bool Group::has_group_invite_member_response() const {
  return _internal_has_group_invite_member_response();
}
inline void Group::set_has_group_invite_member_response() {
  _impl_._oneof_case_[0] = kGroupInviteMemberResponse;
}
inline void Group::clear_group_invite_member_response() {
  if (_internal_has_group_invite_member_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_invite_member_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInviteMemberResponse* Group::release_group_invite_member_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_invite_member_response)
  if (_internal_has_group_invite_member_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInviteMemberResponse* temp = _impl_.message_.group_invite_member_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_invite_member_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInviteMemberResponse& Group::_internal_group_invite_member_response() const {
  return _internal_has_group_invite_member_response()
      ? *_impl_.message_.group_invite_member_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupInviteMemberResponse&>(::qaul::rpc::group::_GroupInviteMemberResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupInviteMemberResponse& Group::group_invite_member_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_invite_member_response)
  return _internal_group_invite_member_response();
}
inline ::qaul::rpc::group::GroupInviteMemberResponse* Group::unsafe_arena_release_group_invite_member_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_invite_member_response)
  if (_internal_has_group_invite_member_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInviteMemberResponse* temp = _impl_.message_.group_invite_member_response_;
    _impl_.message_.group_invite_member_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_invite_member_response(::qaul::rpc::group::GroupInviteMemberResponse* group_invite_member_response) {
  clear_message();
  if (group_invite_member_response) {
    set_has_group_invite_member_response();
    _impl_.message_.group_invite_member_response_ = group_invite_member_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_invite_member_response)
}
inline ::qaul::rpc::group::GroupInviteMemberResponse* Group::_internal_mutable_group_invite_member_response() {
  if (!_internal_has_group_invite_member_response()) {
    clear_message();
    set_has_group_invite_member_response();
    _impl_.message_.group_invite_member_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInviteMemberResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_invite_member_response_;
}
inline ::qaul::rpc::group::GroupInviteMemberResponse* Group::mutable_group_invite_member_response() {
  ::qaul::rpc::group::GroupInviteMemberResponse* _msg = _internal_mutable_group_invite_member_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_invite_member_response)
  return _msg;
}

// .qaul.rpc.group.GroupRemoveMemberRequest group_remove_member_request = 7;
inline bool Group::_internal_has_group_remove_member_request() const {
  return message_case() == kGroupRemoveMemberRequest;
}
inline bool Group::has_group_remove_member_request() const {
  return _internal_has_group_remove_member_request();
}
inline void Group::set_has_group_remove_member_request() {
  _impl_._oneof_case_[0] = kGroupRemoveMemberRequest;
}
inline void Group::clear_group_remove_member_request() {
  if (_internal_has_group_remove_member_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_remove_member_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::release_group_remove_member_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_remove_member_request)
  if (_internal_has_group_remove_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRemoveMemberRequest* temp = _impl_.message_.group_remove_member_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_remove_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupRemoveMemberRequest& Group::_internal_group_remove_member_request() const {
  return _internal_has_group_remove_member_request()
      ? *_impl_.message_.group_remove_member_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupRemoveMemberRequest&>(::qaul::rpc::group::_GroupRemoveMemberRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupRemoveMemberRequest& Group::group_remove_member_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_remove_member_request)
  return _internal_group_remove_member_request();
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::unsafe_arena_release_group_remove_member_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_remove_member_request)
  if (_internal_has_group_remove_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRemoveMemberRequest* temp = _impl_.message_.group_remove_member_request_;
    _impl_.message_.group_remove_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_remove_member_request(::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request) {
  clear_message();
  if (group_remove_member_request) {
    set_has_group_remove_member_request();
    _impl_.message_.group_remove_member_request_ = group_remove_member_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_remove_member_request)
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::_internal_mutable_group_remove_member_request() {
  if (!_internal_has_group_remove_member_request()) {
    clear_message();
    set_has_group_remove_member_request();
    _impl_.message_.group_remove_member_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupRemoveMemberRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_remove_member_request_;
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::mutable_group_remove_member_request() {
  ::qaul::rpc::group::GroupRemoveMemberRequest* _msg = _internal_mutable_group_remove_member_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_remove_member_request)
  return _msg;
}

// .qaul.rpc.group.GroupRemoveMemberResponse group_remove_member_response = 8;
inline bool Group::_internal_has_group_remove_member_response() const {
  return message_case() == kGroupRemoveMemberResponse;
}
inline bool Group::has_group_remove_member_response() const {
  return _internal_has_group_remove_member_response();
}
inline void Group::set_has_group_remove_member_response() {
  _impl_._oneof_case_[0] = kGroupRemoveMemberResponse;
}
inline void Group::clear_group_remove_member_response() {
  if (_internal_has_group_remove_member_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_remove_member_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupRemoveMemberResponse* Group::release_group_remove_member_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_remove_member_response)
  if (_internal_has_group_remove_member_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRemoveMemberResponse* temp = _impl_.message_.group_remove_member_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_remove_member_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupRemoveMemberResponse& Group::_internal_group_remove_member_response() const {
  return _internal_has_group_remove_member_response()
      ? *_impl_.message_.group_remove_member_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupRemoveMemberResponse&>(::qaul::rpc::group::_GroupRemoveMemberResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupRemoveMemberResponse& Group::group_remove_member_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_remove_member_response)
  return _internal_group_remove_member_response();
}
inline ::qaul::rpc::group::GroupRemoveMemberResponse* Group::unsafe_arena_release_group_remove_member_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_remove_member_response)
  if (_internal_has_group_remove_member_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRemoveMemberResponse* temp = _impl_.message_.group_remove_member_response_;
    _impl_.message_.group_remove_member_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_remove_member_response(::qaul::rpc::group::GroupRemoveMemberResponse* group_remove_member_response) {
  clear_message();
  if (group_remove_member_response) {
    set_has_group_remove_member_response();
    _impl_.message_.group_remove_member_response_ = group_remove_member_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_remove_member_response)
}
inline ::qaul::rpc::group::GroupRemoveMemberResponse* Group::_internal_mutable_group_remove_member_response() {
  if (!_internal_has_group_remove_member_response()) {
    clear_message();
    set_has_group_remove_member_response();
    _impl_.message_.group_remove_member_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupRemoveMemberResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_remove_member_response_;
}
inline ::qaul::rpc::group::GroupRemoveMemberResponse* Group::mutable_group_remove_member_response() {
  ::qaul::rpc::group::GroupRemoveMemberResponse* _msg = _internal_mutable_group_remove_member_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_remove_member_response)
  return _msg;
}

// .qaul.rpc.group.GroupInfoRequest group_info_request = 9;
inline bool Group::_internal_has_group_info_request() const {
  return message_case() == kGroupInfoRequest;
}
inline bool Group::has_group_info_request() const {
  return _internal_has_group_info_request();
}
inline void Group::set_has_group_info_request() {
  _impl_._oneof_case_[0] = kGroupInfoRequest;
}
inline void Group::clear_group_info_request() {
  if (_internal_has_group_info_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_info_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::release_group_info_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_info_request)
  if (_internal_has_group_info_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfoRequest* temp = _impl_.message_.group_info_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInfoRequest& Group::_internal_group_info_request() const {
  return _internal_has_group_info_request()
      ? *_impl_.message_.group_info_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupInfoRequest&>(::qaul::rpc::group::_GroupInfoRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupInfoRequest& Group::group_info_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_info_request)
  return _internal_group_info_request();
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::unsafe_arena_release_group_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_info_request)
  if (_internal_has_group_info_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfoRequest* temp = _impl_.message_.group_info_request_;
    _impl_.message_.group_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_info_request(::qaul::rpc::group::GroupInfoRequest* group_info_request) {
  clear_message();
  if (group_info_request) {
    set_has_group_info_request();
    _impl_.message_.group_info_request_ = group_info_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_info_request)
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::_internal_mutable_group_info_request() {
  if (!_internal_has_group_info_request()) {
    clear_message();
    set_has_group_info_request();
    _impl_.message_.group_info_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInfoRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_info_request_;
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::mutable_group_info_request() {
  ::qaul::rpc::group::GroupInfoRequest* _msg = _internal_mutable_group_info_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_info_request)
  return _msg;
}

// .qaul.rpc.group.GroupInfo group_info_response = 10;
inline bool Group::_internal_has_group_info_response() const {
  return message_case() == kGroupInfoResponse;
}
inline bool Group::has_group_info_response() const {
  return _internal_has_group_info_response();
}
inline void Group::set_has_group_info_response() {
  _impl_._oneof_case_[0] = kGroupInfoResponse;
}
inline void Group::clear_group_info_response() {
  if (_internal_has_group_info_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_info_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInfo* Group::release_group_info_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_info_response)
  if (_internal_has_group_info_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfo* temp = _impl_.message_.group_info_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInfo& Group::_internal_group_info_response() const {
  return _internal_has_group_info_response()
      ? *_impl_.message_.group_info_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupInfo&>(::qaul::rpc::group::_GroupInfo_default_instance_);
}
inline const ::qaul::rpc::group::GroupInfo& Group::group_info_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_info_response)
  return _internal_group_info_response();
}
inline ::qaul::rpc::group::GroupInfo* Group::unsafe_arena_release_group_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_info_response)
  if (_internal_has_group_info_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfo* temp = _impl_.message_.group_info_response_;
    _impl_.message_.group_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_info_response(::qaul::rpc::group::GroupInfo* group_info_response) {
  clear_message();
  if (group_info_response) {
    set_has_group_info_response();
    _impl_.message_.group_info_response_ = group_info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_info_response)
}
inline ::qaul::rpc::group::GroupInfo* Group::_internal_mutable_group_info_response() {
  if (!_internal_has_group_info_response()) {
    clear_message();
    set_has_group_info_response();
    _impl_.message_.group_info_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInfo >(GetArenaForAllocation());
  }
  return _impl_.message_.group_info_response_;
}
inline ::qaul::rpc::group::GroupInfo* Group::mutable_group_info_response() {
  ::qaul::rpc::group::GroupInfo* _msg = _internal_mutable_group_info_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_info_response)
  return _msg;
}

// .qaul.rpc.group.GroupReplyInviteRequest group_reply_invite_request = 11;
inline bool Group::_internal_has_group_reply_invite_request() const {
  return message_case() == kGroupReplyInviteRequest;
}
inline bool Group::has_group_reply_invite_request() const {
  return _internal_has_group_reply_invite_request();
}
inline void Group::set_has_group_reply_invite_request() {
  _impl_._oneof_case_[0] = kGroupReplyInviteRequest;
}
inline void Group::clear_group_reply_invite_request() {
  if (_internal_has_group_reply_invite_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_reply_invite_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::release_group_reply_invite_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_reply_invite_request)
  if (_internal_has_group_reply_invite_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupReplyInviteRequest* temp = _impl_.message_.group_reply_invite_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_reply_invite_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupReplyInviteRequest& Group::_internal_group_reply_invite_request() const {
  return _internal_has_group_reply_invite_request()
      ? *_impl_.message_.group_reply_invite_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupReplyInviteRequest&>(::qaul::rpc::group::_GroupReplyInviteRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupReplyInviteRequest& Group::group_reply_invite_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_reply_invite_request)
  return _internal_group_reply_invite_request();
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::unsafe_arena_release_group_reply_invite_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_reply_invite_request)
  if (_internal_has_group_reply_invite_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupReplyInviteRequest* temp = _impl_.message_.group_reply_invite_request_;
    _impl_.message_.group_reply_invite_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_reply_invite_request(::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request) {
  clear_message();
  if (group_reply_invite_request) {
    set_has_group_reply_invite_request();
    _impl_.message_.group_reply_invite_request_ = group_reply_invite_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_reply_invite_request)
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::_internal_mutable_group_reply_invite_request() {
  if (!_internal_has_group_reply_invite_request()) {
    clear_message();
    set_has_group_reply_invite_request();
    _impl_.message_.group_reply_invite_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupReplyInviteRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_reply_invite_request_;
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::mutable_group_reply_invite_request() {
  ::qaul::rpc::group::GroupReplyInviteRequest* _msg = _internal_mutable_group_reply_invite_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_reply_invite_request)
  return _msg;
}

// .qaul.rpc.group.GroupReplyInviteResponse group_reply_invite_response = 12;
inline bool Group::_internal_has_group_reply_invite_response() const {
  return message_case() == kGroupReplyInviteResponse;
}
inline bool Group::has_group_reply_invite_response() const {
  return _internal_has_group_reply_invite_response();
}
inline void Group::set_has_group_reply_invite_response() {
  _impl_._oneof_case_[0] = kGroupReplyInviteResponse;
}
inline void Group::clear_group_reply_invite_response() {
  if (_internal_has_group_reply_invite_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_reply_invite_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupReplyInviteResponse* Group::release_group_reply_invite_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_reply_invite_response)
  if (_internal_has_group_reply_invite_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupReplyInviteResponse* temp = _impl_.message_.group_reply_invite_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_reply_invite_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupReplyInviteResponse& Group::_internal_group_reply_invite_response() const {
  return _internal_has_group_reply_invite_response()
      ? *_impl_.message_.group_reply_invite_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupReplyInviteResponse&>(::qaul::rpc::group::_GroupReplyInviteResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupReplyInviteResponse& Group::group_reply_invite_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_reply_invite_response)
  return _internal_group_reply_invite_response();
}
inline ::qaul::rpc::group::GroupReplyInviteResponse* Group::unsafe_arena_release_group_reply_invite_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_reply_invite_response)
  if (_internal_has_group_reply_invite_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupReplyInviteResponse* temp = _impl_.message_.group_reply_invite_response_;
    _impl_.message_.group_reply_invite_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_reply_invite_response(::qaul::rpc::group::GroupReplyInviteResponse* group_reply_invite_response) {
  clear_message();
  if (group_reply_invite_response) {
    set_has_group_reply_invite_response();
    _impl_.message_.group_reply_invite_response_ = group_reply_invite_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_reply_invite_response)
}
inline ::qaul::rpc::group::GroupReplyInviteResponse* Group::_internal_mutable_group_reply_invite_response() {
  if (!_internal_has_group_reply_invite_response()) {
    clear_message();
    set_has_group_reply_invite_response();
    _impl_.message_.group_reply_invite_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupReplyInviteResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_reply_invite_response_;
}
inline ::qaul::rpc::group::GroupReplyInviteResponse* Group::mutable_group_reply_invite_response() {
  ::qaul::rpc::group::GroupReplyInviteResponse* _msg = _internal_mutable_group_reply_invite_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_reply_invite_response)
  return _msg;
}

// .qaul.rpc.group.GroupListRequest group_list_request = 13;
inline bool Group::_internal_has_group_list_request() const {
  return message_case() == kGroupListRequest;
}
inline bool Group::has_group_list_request() const {
  return _internal_has_group_list_request();
}
inline void Group::set_has_group_list_request() {
  _impl_._oneof_case_[0] = kGroupListRequest;
}
inline void Group::clear_group_list_request() {
  if (_internal_has_group_list_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_list_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupListRequest* Group::release_group_list_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_list_request)
  if (_internal_has_group_list_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListRequest* temp = _impl_.message_.group_list_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupListRequest& Group::_internal_group_list_request() const {
  return _internal_has_group_list_request()
      ? *_impl_.message_.group_list_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupListRequest&>(::qaul::rpc::group::_GroupListRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupListRequest& Group::group_list_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_list_request)
  return _internal_group_list_request();
}
inline ::qaul::rpc::group::GroupListRequest* Group::unsafe_arena_release_group_list_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_list_request)
  if (_internal_has_group_list_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListRequest* temp = _impl_.message_.group_list_request_;
    _impl_.message_.group_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_list_request(::qaul::rpc::group::GroupListRequest* group_list_request) {
  clear_message();
  if (group_list_request) {
    set_has_group_list_request();
    _impl_.message_.group_list_request_ = group_list_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_list_request)
}
inline ::qaul::rpc::group::GroupListRequest* Group::_internal_mutable_group_list_request() {
  if (!_internal_has_group_list_request()) {
    clear_message();
    set_has_group_list_request();
    _impl_.message_.group_list_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupListRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_list_request_;
}
inline ::qaul::rpc::group::GroupListRequest* Group::mutable_group_list_request() {
  ::qaul::rpc::group::GroupListRequest* _msg = _internal_mutable_group_list_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_list_request)
  return _msg;
}

// .qaul.rpc.group.GroupListResponse group_list_response = 14;
inline bool Group::_internal_has_group_list_response() const {
  return message_case() == kGroupListResponse;
}
inline bool Group::has_group_list_response() const {
  return _internal_has_group_list_response();
}
inline void Group::set_has_group_list_response() {
  _impl_._oneof_case_[0] = kGroupListResponse;
}
inline void Group::clear_group_list_response() {
  if (_internal_has_group_list_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_list_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupListResponse* Group::release_group_list_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_list_response)
  if (_internal_has_group_list_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListResponse* temp = _impl_.message_.group_list_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_list_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupListResponse& Group::_internal_group_list_response() const {
  return _internal_has_group_list_response()
      ? *_impl_.message_.group_list_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupListResponse&>(::qaul::rpc::group::_GroupListResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupListResponse& Group::group_list_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_list_response)
  return _internal_group_list_response();
}
inline ::qaul::rpc::group::GroupListResponse* Group::unsafe_arena_release_group_list_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_list_response)
  if (_internal_has_group_list_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListResponse* temp = _impl_.message_.group_list_response_;
    _impl_.message_.group_list_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_list_response(::qaul::rpc::group::GroupListResponse* group_list_response) {
  clear_message();
  if (group_list_response) {
    set_has_group_list_response();
    _impl_.message_.group_list_response_ = group_list_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_list_response)
}
inline ::qaul::rpc::group::GroupListResponse* Group::_internal_mutable_group_list_response() {
  if (!_internal_has_group_list_response()) {
    clear_message();
    set_has_group_list_response();
    _impl_.message_.group_list_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupListResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_list_response_;
}
inline ::qaul::rpc::group::GroupListResponse* Group::mutable_group_list_response() {
  ::qaul::rpc::group::GroupListResponse* _msg = _internal_mutable_group_list_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_list_response)
  return _msg;
}

// .qaul.rpc.group.GroupInvitedRequest group_invited_request = 15;
inline bool Group::_internal_has_group_invited_request() const {
  return message_case() == kGroupInvitedRequest;
}
inline bool Group::has_group_invited_request() const {
  return _internal_has_group_invited_request();
}
inline void Group::set_has_group_invited_request() {
  _impl_._oneof_case_[0] = kGroupInvitedRequest;
}
inline void Group::clear_group_invited_request() {
  if (_internal_has_group_invited_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_invited_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInvitedRequest* Group::release_group_invited_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_invited_request)
  if (_internal_has_group_invited_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInvitedRequest* temp = _impl_.message_.group_invited_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_invited_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInvitedRequest& Group::_internal_group_invited_request() const {
  return _internal_has_group_invited_request()
      ? *_impl_.message_.group_invited_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupInvitedRequest&>(::qaul::rpc::group::_GroupInvitedRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupInvitedRequest& Group::group_invited_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_invited_request)
  return _internal_group_invited_request();
}
inline ::qaul::rpc::group::GroupInvitedRequest* Group::unsafe_arena_release_group_invited_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_invited_request)
  if (_internal_has_group_invited_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInvitedRequest* temp = _impl_.message_.group_invited_request_;
    _impl_.message_.group_invited_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_invited_request(::qaul::rpc::group::GroupInvitedRequest* group_invited_request) {
  clear_message();
  if (group_invited_request) {
    set_has_group_invited_request();
    _impl_.message_.group_invited_request_ = group_invited_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_invited_request)
}
inline ::qaul::rpc::group::GroupInvitedRequest* Group::_internal_mutable_group_invited_request() {
  if (!_internal_has_group_invited_request()) {
    clear_message();
    set_has_group_invited_request();
    _impl_.message_.group_invited_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInvitedRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_invited_request_;
}
inline ::qaul::rpc::group::GroupInvitedRequest* Group::mutable_group_invited_request() {
  ::qaul::rpc::group::GroupInvitedRequest* _msg = _internal_mutable_group_invited_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_invited_request)
  return _msg;
}

// .qaul.rpc.group.GroupInvitedResponse group_invited_response = 16;
inline bool Group::_internal_has_group_invited_response() const {
  return message_case() == kGroupInvitedResponse;
}
inline bool Group::has_group_invited_response() const {
  return _internal_has_group_invited_response();
}
inline void Group::set_has_group_invited_response() {
  _impl_._oneof_case_[0] = kGroupInvitedResponse;
}
inline void Group::clear_group_invited_response() {
  if (_internal_has_group_invited_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_invited_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInvitedResponse* Group::release_group_invited_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_invited_response)
  if (_internal_has_group_invited_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInvitedResponse* temp = _impl_.message_.group_invited_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_invited_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInvitedResponse& Group::_internal_group_invited_response() const {
  return _internal_has_group_invited_response()
      ? *_impl_.message_.group_invited_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupInvitedResponse&>(::qaul::rpc::group::_GroupInvitedResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupInvitedResponse& Group::group_invited_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_invited_response)
  return _internal_group_invited_response();
}
inline ::qaul::rpc::group::GroupInvitedResponse* Group::unsafe_arena_release_group_invited_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_invited_response)
  if (_internal_has_group_invited_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInvitedResponse* temp = _impl_.message_.group_invited_response_;
    _impl_.message_.group_invited_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_invited_response(::qaul::rpc::group::GroupInvitedResponse* group_invited_response) {
  clear_message();
  if (group_invited_response) {
    set_has_group_invited_response();
    _impl_.message_.group_invited_response_ = group_invited_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_invited_response)
}
inline ::qaul::rpc::group::GroupInvitedResponse* Group::_internal_mutable_group_invited_response() {
  if (!_internal_has_group_invited_response()) {
    clear_message();
    set_has_group_invited_response();
    _impl_.message_.group_invited_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInvitedResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_invited_response_;
}
inline ::qaul::rpc::group::GroupInvitedResponse* Group::mutable_group_invited_response() {
  ::qaul::rpc::group::GroupInvitedResponse* _msg = _internal_mutable_group_invited_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_invited_response)
  return _msg;
}

inline bool Group::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Group::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Group::MessageCase Group::message_case() const {
  return Group::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GroupResult

// bool status = 1;
inline void GroupResult::clear_status() {
  _impl_.status_ = false;
}
inline bool GroupResult::_internal_status() const {
  return _impl_.status_;
}
inline bool GroupResult::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupResult.status)
  return _internal_status();
}
inline void GroupResult::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void GroupResult::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupResult.status)
}

// string message = 2;
inline void GroupResult::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GroupResult::message() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupResult.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupResult::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupResult.message)
}
inline std::string* GroupResult::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupResult.message)
  return _s;
}
inline const std::string& GroupResult::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GroupResult::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupResult::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupResult::release_message() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupResult.message)
  return _impl_.message_.Release();
}
inline void GroupResult::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupResult.message)
}

// -------------------------------------------------------------------

// GroupCreateRequest

// string group_name = 1;
inline void GroupCreateRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupCreateRequest::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupCreateRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupCreateRequest.group_name)
}
inline std::string* GroupCreateRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupCreateRequest.group_name)
  return _s;
}
inline const std::string& GroupCreateRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupCreateRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupCreateRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupCreateRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupCreateRequest.group_name)
}

// -------------------------------------------------------------------

// GroupCreateResponse

// bytes group_id = 1;
inline void GroupCreateResponse::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupCreateResponse::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupCreateResponse.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateResponse::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupCreateResponse.group_id)
}
inline std::string* GroupCreateResponse::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupCreateResponse.group_id)
  return _s;
}
inline const std::string& GroupCreateResponse::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupCreateResponse::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateResponse::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupCreateResponse.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupCreateResponse::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupCreateResponse.group_id)
}

// .qaul.rpc.group.GroupResult result = 2;
inline bool GroupCreateResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool GroupCreateResponse::has_result() const {
  return _internal_has_result();
}
inline void GroupCreateResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::qaul::rpc::group::GroupResult& GroupCreateResponse::_internal_result() const {
  const ::qaul::rpc::group::GroupResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::rpc::group::GroupResult&>(
      ::qaul::rpc::group::_GroupResult_default_instance_);
}
inline const ::qaul::rpc::group::GroupResult& GroupCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupCreateResponse.result)
  return _internal_result();
}
inline void GroupCreateResponse::unsafe_arena_set_allocated_result(
    ::qaul::rpc::group::GroupResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.GroupCreateResponse.result)
}
inline ::qaul::rpc::group::GroupResult* GroupCreateResponse::release_result() {
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupCreateResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupCreateResponse.result)
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupCreateResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::rpc::group::GroupResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::qaul::rpc::group::GroupResult* GroupCreateResponse::mutable_result() {
  ::qaul::rpc::group::GroupResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupCreateResponse.result)
  return _msg;
}
inline void GroupCreateResponse::set_allocated_result(::qaul::rpc::group::GroupResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupCreateResponse.result)
}

// -------------------------------------------------------------------

// GroupRenameRequest

// bytes group_id = 1;
inline void GroupRenameRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupRenameRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRenameRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRenameRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRenameRequest.group_id)
}
inline std::string* GroupRenameRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRenameRequest.group_id)
  return _s;
}
inline const std::string& GroupRenameRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupRenameRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRenameRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupRenameRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRenameRequest.group_id)
}

// string group_name = 2;
inline void GroupRenameRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupRenameRequest::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRenameRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRenameRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRenameRequest.group_name)
}
inline std::string* GroupRenameRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRenameRequest.group_name)
  return _s;
}
inline const std::string& GroupRenameRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupRenameRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRenameRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupRenameRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRenameRequest.group_name)
}

// -------------------------------------------------------------------

// GroupRenameResponse

// bytes group_id = 1;
inline void GroupRenameResponse::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupRenameResponse::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRenameResponse.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRenameResponse::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRenameResponse.group_id)
}
inline std::string* GroupRenameResponse::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRenameResponse.group_id)
  return _s;
}
inline const std::string& GroupRenameResponse::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupRenameResponse::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRenameResponse::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRenameResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRenameResponse.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupRenameResponse::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRenameResponse.group_id)
}

// string group_name = 2;
inline void GroupRenameResponse::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupRenameResponse::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRenameResponse.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRenameResponse::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRenameResponse.group_name)
}
inline std::string* GroupRenameResponse::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRenameResponse.group_name)
  return _s;
}
inline const std::string& GroupRenameResponse::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupRenameResponse::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRenameResponse::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRenameResponse::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRenameResponse.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupRenameResponse::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRenameResponse.group_name)
}

// .qaul.rpc.group.GroupResult result = 3;
inline bool GroupRenameResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool GroupRenameResponse::has_result() const {
  return _internal_has_result();
}
inline void GroupRenameResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::qaul::rpc::group::GroupResult& GroupRenameResponse::_internal_result() const {
  const ::qaul::rpc::group::GroupResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::rpc::group::GroupResult&>(
      ::qaul::rpc::group::_GroupResult_default_instance_);
}
inline const ::qaul::rpc::group::GroupResult& GroupRenameResponse::result() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRenameResponse.result)
  return _internal_result();
}
inline void GroupRenameResponse::unsafe_arena_set_allocated_result(
    ::qaul::rpc::group::GroupResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.GroupRenameResponse.result)
}
inline ::qaul::rpc::group::GroupResult* GroupRenameResponse::release_result() {
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupRenameResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRenameResponse.result)
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupRenameResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::rpc::group::GroupResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::qaul::rpc::group::GroupResult* GroupRenameResponse::mutable_result() {
  ::qaul::rpc::group::GroupResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRenameResponse.result)
  return _msg;
}
inline void GroupRenameResponse::set_allocated_result(::qaul::rpc::group::GroupResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRenameResponse.result)
}

// -------------------------------------------------------------------

// GroupInviteMemberRequest

// bytes group_id = 1;
inline void GroupInviteMemberRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupInviteMemberRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInviteMemberRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInviteMemberRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInviteMemberRequest.group_id)
}
inline std::string* GroupInviteMemberRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInviteMemberRequest.group_id)
  return _s;
}
inline const std::string& GroupInviteMemberRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupInviteMemberRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInviteMemberRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupInviteMemberRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInviteMemberRequest.group_id)
}

// bytes user_id = 2;
inline void GroupInviteMemberRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupInviteMemberRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInviteMemberRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInviteMemberRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInviteMemberRequest.user_id)
}
inline std::string* GroupInviteMemberRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInviteMemberRequest.user_id)
  return _s;
}
inline const std::string& GroupInviteMemberRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupInviteMemberRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInviteMemberRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupInviteMemberRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInviteMemberRequest.user_id)
}

// -------------------------------------------------------------------

// GroupInviteMemberResponse

// bytes group_id = 1;
inline void GroupInviteMemberResponse::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupInviteMemberResponse::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInviteMemberResponse.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInviteMemberResponse::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInviteMemberResponse.group_id)
}
inline std::string* GroupInviteMemberResponse::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInviteMemberResponse.group_id)
  return _s;
}
inline const std::string& GroupInviteMemberResponse::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupInviteMemberResponse::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInviteMemberResponse::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInviteMemberResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInviteMemberResponse.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupInviteMemberResponse::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInviteMemberResponse.group_id)
}

// bytes user_id = 2;
inline void GroupInviteMemberResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupInviteMemberResponse::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInviteMemberResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInviteMemberResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInviteMemberResponse.user_id)
}
inline std::string* GroupInviteMemberResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInviteMemberResponse.user_id)
  return _s;
}
inline const std::string& GroupInviteMemberResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupInviteMemberResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInviteMemberResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInviteMemberResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInviteMemberResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupInviteMemberResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInviteMemberResponse.user_id)
}

// .qaul.rpc.group.GroupResult result = 3;
inline bool GroupInviteMemberResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool GroupInviteMemberResponse::has_result() const {
  return _internal_has_result();
}
inline void GroupInviteMemberResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::qaul::rpc::group::GroupResult& GroupInviteMemberResponse::_internal_result() const {
  const ::qaul::rpc::group::GroupResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::rpc::group::GroupResult&>(
      ::qaul::rpc::group::_GroupResult_default_instance_);
}
inline const ::qaul::rpc::group::GroupResult& GroupInviteMemberResponse::result() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInviteMemberResponse.result)
  return _internal_result();
}
inline void GroupInviteMemberResponse::unsafe_arena_set_allocated_result(
    ::qaul::rpc::group::GroupResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.GroupInviteMemberResponse.result)
}
inline ::qaul::rpc::group::GroupResult* GroupInviteMemberResponse::release_result() {
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupInviteMemberResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInviteMemberResponse.result)
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupInviteMemberResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::rpc::group::GroupResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::qaul::rpc::group::GroupResult* GroupInviteMemberResponse::mutable_result() {
  ::qaul::rpc::group::GroupResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInviteMemberResponse.result)
  return _msg;
}
inline void GroupInviteMemberResponse::set_allocated_result(::qaul::rpc::group::GroupResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInviteMemberResponse.result)
}

// -------------------------------------------------------------------

// GroupReplyInviteRequest

// bytes group_id = 1;
inline void GroupReplyInviteRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupReplyInviteRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupReplyInviteRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupReplyInviteRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupReplyInviteRequest.group_id)
}
inline std::string* GroupReplyInviteRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupReplyInviteRequest.group_id)
  return _s;
}
inline const std::string& GroupReplyInviteRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupReplyInviteRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupReplyInviteRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupReplyInviteRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupReplyInviteRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupReplyInviteRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupReplyInviteRequest.group_id)
}

// bool accept = 3;
inline void GroupReplyInviteRequest::clear_accept() {
  _impl_.accept_ = false;
}
inline bool GroupReplyInviteRequest::_internal_accept() const {
  return _impl_.accept_;
}
inline bool GroupReplyInviteRequest::accept() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupReplyInviteRequest.accept)
  return _internal_accept();
}
inline void GroupReplyInviteRequest::_internal_set_accept(bool value) {
  
  _impl_.accept_ = value;
}
inline void GroupReplyInviteRequest::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupReplyInviteRequest.accept)
}

// -------------------------------------------------------------------

// GroupReplyInviteResponse

// bytes group_id = 1;
inline void GroupReplyInviteResponse::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupReplyInviteResponse::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupReplyInviteResponse.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupReplyInviteResponse::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupReplyInviteResponse.group_id)
}
inline std::string* GroupReplyInviteResponse::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupReplyInviteResponse.group_id)
  return _s;
}
inline const std::string& GroupReplyInviteResponse::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupReplyInviteResponse::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupReplyInviteResponse::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupReplyInviteResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupReplyInviteResponse.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupReplyInviteResponse::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupReplyInviteResponse.group_id)
}

// .qaul.rpc.group.GroupResult result = 3;
inline bool GroupReplyInviteResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool GroupReplyInviteResponse::has_result() const {
  return _internal_has_result();
}
inline void GroupReplyInviteResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::qaul::rpc::group::GroupResult& GroupReplyInviteResponse::_internal_result() const {
  const ::qaul::rpc::group::GroupResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::rpc::group::GroupResult&>(
      ::qaul::rpc::group::_GroupResult_default_instance_);
}
inline const ::qaul::rpc::group::GroupResult& GroupReplyInviteResponse::result() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupReplyInviteResponse.result)
  return _internal_result();
}
inline void GroupReplyInviteResponse::unsafe_arena_set_allocated_result(
    ::qaul::rpc::group::GroupResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.GroupReplyInviteResponse.result)
}
inline ::qaul::rpc::group::GroupResult* GroupReplyInviteResponse::release_result() {
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupReplyInviteResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupReplyInviteResponse.result)
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupReplyInviteResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::rpc::group::GroupResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::qaul::rpc::group::GroupResult* GroupReplyInviteResponse::mutable_result() {
  ::qaul::rpc::group::GroupResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupReplyInviteResponse.result)
  return _msg;
}
inline void GroupReplyInviteResponse::set_allocated_result(::qaul::rpc::group::GroupResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupReplyInviteResponse.result)
}

// -------------------------------------------------------------------

// GroupRemoveMemberRequest

// bytes group_id = 1;
inline void GroupRemoveMemberRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupRemoveMemberRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveMemberRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
}
inline std::string* GroupRemoveMemberRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
  return _s;
}
inline const std::string& GroupRemoveMemberRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupRemoveMemberRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupRemoveMemberRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
}

// bytes user_id = 2;
inline void GroupRemoveMemberRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupRemoveMemberRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveMemberRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
}
inline std::string* GroupRemoveMemberRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
  return _s;
}
inline const std::string& GroupRemoveMemberRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupRemoveMemberRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupRemoveMemberRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
}

// -------------------------------------------------------------------

// GroupRemoveMemberResponse

// bytes group_id = 1;
inline void GroupRemoveMemberResponse::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupRemoveMemberResponse::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRemoveMemberResponse.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveMemberResponse::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRemoveMemberResponse.group_id)
}
inline std::string* GroupRemoveMemberResponse::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRemoveMemberResponse.group_id)
  return _s;
}
inline const std::string& GroupRemoveMemberResponse::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupRemoveMemberResponse::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberResponse::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRemoveMemberResponse.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupRemoveMemberResponse::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRemoveMemberResponse.group_id)
}

// bytes user_id = 2;
inline void GroupRemoveMemberResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupRemoveMemberResponse::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRemoveMemberResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveMemberResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRemoveMemberResponse.user_id)
}
inline std::string* GroupRemoveMemberResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRemoveMemberResponse.user_id)
  return _s;
}
inline const std::string& GroupRemoveMemberResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupRemoveMemberResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRemoveMemberResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupRemoveMemberResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRemoveMemberResponse.user_id)
}

// .qaul.rpc.group.GroupResult result = 3;
inline bool GroupRemoveMemberResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool GroupRemoveMemberResponse::has_result() const {
  return _internal_has_result();
}
inline void GroupRemoveMemberResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::qaul::rpc::group::GroupResult& GroupRemoveMemberResponse::_internal_result() const {
  const ::qaul::rpc::group::GroupResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::rpc::group::GroupResult&>(
      ::qaul::rpc::group::_GroupResult_default_instance_);
}
inline const ::qaul::rpc::group::GroupResult& GroupRemoveMemberResponse::result() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRemoveMemberResponse.result)
  return _internal_result();
}
inline void GroupRemoveMemberResponse::unsafe_arena_set_allocated_result(
    ::qaul::rpc::group::GroupResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.GroupRemoveMemberResponse.result)
}
inline ::qaul::rpc::group::GroupResult* GroupRemoveMemberResponse::release_result() {
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupRemoveMemberResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRemoveMemberResponse.result)
  
  ::qaul::rpc::group::GroupResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::qaul::rpc::group::GroupResult* GroupRemoveMemberResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::rpc::group::GroupResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::qaul::rpc::group::GroupResult* GroupRemoveMemberResponse::mutable_result() {
  ::qaul::rpc::group::GroupResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRemoveMemberResponse.result)
  return _msg;
}
inline void GroupRemoveMemberResponse::set_allocated_result(::qaul::rpc::group::GroupResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRemoveMemberResponse.result)
}

// -------------------------------------------------------------------

// GroupInfoRequest

// bytes group_id = 1;
inline void GroupInfoRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupInfoRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfoRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfoRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfoRequest.group_id)
}
inline std::string* GroupInfoRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfoRequest.group_id)
  return _s;
}
inline const std::string& GroupInfoRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupInfoRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfoRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfoRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfoRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupInfoRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfoRequest.group_id)
}

// -------------------------------------------------------------------

// GroupMember

// bytes user_id = 1;
inline void GroupMember::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupMember::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMember::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.user_id)
}
inline std::string* GroupMember::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupMember.user_id)
  return _s;
}
inline const std::string& GroupMember::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupMember::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMember::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMember::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupMember.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupMember::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupMember.user_id)
}

// .qaul.rpc.group.GroupMemberRole role = 2;
inline void GroupMember::clear_role() {
  _impl_.role_ = 0;
}
inline ::qaul::rpc::group::GroupMemberRole GroupMember::_internal_role() const {
  return static_cast< ::qaul::rpc::group::GroupMemberRole >(_impl_.role_);
}
inline ::qaul::rpc::group::GroupMemberRole GroupMember::role() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.role)
  return _internal_role();
}
inline void GroupMember::_internal_set_role(::qaul::rpc::group::GroupMemberRole value) {
  
  _impl_.role_ = value;
}
inline void GroupMember::set_role(::qaul::rpc::group::GroupMemberRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.role)
}

// uint64 joined_at = 3;
inline void GroupMember::clear_joined_at() {
  _impl_.joined_at_ = uint64_t{0u};
}
inline uint64_t GroupMember::_internal_joined_at() const {
  return _impl_.joined_at_;
}
inline uint64_t GroupMember::joined_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.joined_at)
  return _internal_joined_at();
}
inline void GroupMember::_internal_set_joined_at(uint64_t value) {
  
  _impl_.joined_at_ = value;
}
inline void GroupMember::set_joined_at(uint64_t value) {
  _internal_set_joined_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.joined_at)
}

// .qaul.rpc.group.GroupMemberState state = 4;
inline void GroupMember::clear_state() {
  _impl_.state_ = 0;
}
inline ::qaul::rpc::group::GroupMemberState GroupMember::_internal_state() const {
  return static_cast< ::qaul::rpc::group::GroupMemberState >(_impl_.state_);
}
inline ::qaul::rpc::group::GroupMemberState GroupMember::state() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.state)
  return _internal_state();
}
inline void GroupMember::_internal_set_state(::qaul::rpc::group::GroupMemberState value) {
  
  _impl_.state_ = value;
}
inline void GroupMember::set_state(::qaul::rpc::group::GroupMemberState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.state)
}

// uint32 last_message_index = 5;
inline void GroupMember::clear_last_message_index() {
  _impl_.last_message_index_ = 0u;
}
inline uint32_t GroupMember::_internal_last_message_index() const {
  return _impl_.last_message_index_;
}
inline uint32_t GroupMember::last_message_index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.last_message_index)
  return _internal_last_message_index();
}
inline void GroupMember::_internal_set_last_message_index(uint32_t value) {
  
  _impl_.last_message_index_ = value;
}
inline void GroupMember::set_last_message_index(uint32_t value) {
  _internal_set_last_message_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.last_message_index)
}

// -------------------------------------------------------------------

// GroupInfo

// bytes group_id = 1;
inline void GroupInfo::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupInfo::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.group_id)
}
inline std::string* GroupInfo::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfo.group_id)
  return _s;
}
inline const std::string& GroupInfo::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupInfo::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfo.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupInfo::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfo.group_id)
}

// string group_name = 2;
inline void GroupInfo::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupInfo::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.group_name)
}
inline std::string* GroupInfo::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfo.group_name)
  return _s;
}
inline const std::string& GroupInfo::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupInfo::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfo.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupInfo::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfo.group_name)
}

// uint64 created_at = 3;
inline void GroupInfo::clear_created_at() {
  _impl_.created_at_ = uint64_t{0u};
}
inline uint64_t GroupInfo::_internal_created_at() const {
  return _impl_.created_at_;
}
inline uint64_t GroupInfo::created_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.created_at)
  return _internal_created_at();
}
inline void GroupInfo::_internal_set_created_at(uint64_t value) {
  
  _impl_.created_at_ = value;
}
inline void GroupInfo::set_created_at(uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.created_at)
}

// .qaul.rpc.group.GroupStatus status = 4;
inline void GroupInfo::clear_status() {
  _impl_.status_ = 0;
}
inline ::qaul::rpc::group::GroupStatus GroupInfo::_internal_status() const {
  return static_cast< ::qaul::rpc::group::GroupStatus >(_impl_.status_);
}
inline ::qaul::rpc::group::GroupStatus GroupInfo::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.status)
  return _internal_status();
}
inline void GroupInfo::_internal_set_status(::qaul::rpc::group::GroupStatus value) {
  
  _impl_.status_ = value;
}
inline void GroupInfo::set_status(::qaul::rpc::group::GroupStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.status)
}

// uint32 revision = 5;
inline void GroupInfo::clear_revision() {
  _impl_.revision_ = 0u;
}
inline uint32_t GroupInfo::_internal_revision() const {
  return _impl_.revision_;
}
inline uint32_t GroupInfo::revision() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.revision)
  return _internal_revision();
}
inline void GroupInfo::_internal_set_revision(uint32_t value) {
  
  _impl_.revision_ = value;
}
inline void GroupInfo::set_revision(uint32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.revision)
}

// bool is_direct_chat = 6;
inline void GroupInfo::clear_is_direct_chat() {
  _impl_.is_direct_chat_ = false;
}
inline bool GroupInfo::_internal_is_direct_chat() const {
  return _impl_.is_direct_chat_;
}
inline bool GroupInfo::is_direct_chat() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.is_direct_chat)
  return _internal_is_direct_chat();
}
inline void GroupInfo::_internal_set_is_direct_chat(bool value) {
  
  _impl_.is_direct_chat_ = value;
}
inline void GroupInfo::set_is_direct_chat(bool value) {
  _internal_set_is_direct_chat(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.is_direct_chat)
}

// repeated .qaul.rpc.group.GroupMember members = 7;
inline int GroupInfo::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupInfo::members_size() const {
  return _internal_members_size();
}
inline void GroupInfo::clear_members() {
  _impl_.members_.Clear();
}
inline ::qaul::rpc::group::GroupMember* GroupInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfo.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >*
GroupInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.group.GroupInfo.members)
  return &_impl_.members_;
}
inline const ::qaul::rpc::group::GroupMember& GroupInfo::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::qaul::rpc::group::GroupMember& GroupInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.members)
  return _internal_members(index);
}
inline ::qaul::rpc::group::GroupMember* GroupInfo::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::qaul::rpc::group::GroupMember* GroupInfo::add_members() {
  ::qaul::rpc::group::GroupMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:qaul.rpc.group.GroupInfo.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >&
GroupInfo::members() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.group.GroupInfo.members)
  return _impl_.members_;
}

// uint32 unread_messages = 8;
inline void GroupInfo::clear_unread_messages() {
  _impl_.unread_messages_ = 0u;
}
inline uint32_t GroupInfo::_internal_unread_messages() const {
  return _impl_.unread_messages_;
}
inline uint32_t GroupInfo::unread_messages() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.unread_messages)
  return _internal_unread_messages();
}
inline void GroupInfo::_internal_set_unread_messages(uint32_t value) {
  
  _impl_.unread_messages_ = value;
}
inline void GroupInfo::set_unread_messages(uint32_t value) {
  _internal_set_unread_messages(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.unread_messages)
}

// uint64 last_message_at = 9;
inline void GroupInfo::clear_last_message_at() {
  _impl_.last_message_at_ = uint64_t{0u};
}
inline uint64_t GroupInfo::_internal_last_message_at() const {
  return _impl_.last_message_at_;
}
inline uint64_t GroupInfo::last_message_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.last_message_at)
  return _internal_last_message_at();
}
inline void GroupInfo::_internal_set_last_message_at(uint64_t value) {
  
  _impl_.last_message_at_ = value;
}
inline void GroupInfo::set_last_message_at(uint64_t value) {
  _internal_set_last_message_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.last_message_at)
}

// bytes last_message = 10;
inline void GroupInfo::clear_last_message() {
  _impl_.last_message_.ClearToEmpty();
}
inline const std::string& GroupInfo::last_message() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.last_message)
  return _internal_last_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_last_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.last_message)
}
inline std::string* GroupInfo::mutable_last_message() {
  std::string* _s = _internal_mutable_last_message();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfo.last_message)
  return _s;
}
inline const std::string& GroupInfo::_internal_last_message() const {
  return _impl_.last_message_.Get();
}
inline void GroupInfo::_internal_set_last_message(const std::string& value) {
  
  _impl_.last_message_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_last_message() {
  
  return _impl_.last_message_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_last_message() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfo.last_message)
  return _impl_.last_message_.Release();
}
inline void GroupInfo::set_allocated_last_message(std::string* last_message) {
  if (last_message != nullptr) {
    
  } else {
    
  }
  _impl_.last_message_.SetAllocated(last_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_message_.IsDefault()) {
    _impl_.last_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfo.last_message)
}

// bytes last_message_sender_id = 11;
inline void GroupInfo::clear_last_message_sender_id() {
  _impl_.last_message_sender_id_.ClearToEmpty();
}
inline const std::string& GroupInfo::last_message_sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfo.last_message_sender_id)
  return _internal_last_message_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_last_message_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_message_sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfo.last_message_sender_id)
}
inline std::string* GroupInfo::mutable_last_message_sender_id() {
  std::string* _s = _internal_mutable_last_message_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfo.last_message_sender_id)
  return _s;
}
inline const std::string& GroupInfo::_internal_last_message_sender_id() const {
  return _impl_.last_message_sender_id_.Get();
}
inline void GroupInfo::_internal_set_last_message_sender_id(const std::string& value) {
  
  _impl_.last_message_sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_last_message_sender_id() {
  
  return _impl_.last_message_sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_last_message_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfo.last_message_sender_id)
  return _impl_.last_message_sender_id_.Release();
}
inline void GroupInfo::set_allocated_last_message_sender_id(std::string* last_message_sender_id) {
  if (last_message_sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.last_message_sender_id_.SetAllocated(last_message_sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_message_sender_id_.IsDefault()) {
    _impl_.last_message_sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfo.last_message_sender_id)
}

// -------------------------------------------------------------------

// GroupListRequest

// -------------------------------------------------------------------

// GroupListResponse

// repeated .qaul.rpc.group.GroupInfo groups = 1;
inline int GroupListResponse::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int GroupListResponse::groups_size() const {
  return _internal_groups_size();
}
inline void GroupListResponse::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::qaul::rpc::group::GroupInfo* GroupListResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupListResponse.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfo >*
GroupListResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.group.GroupListResponse.groups)
  return &_impl_.groups_;
}
inline const ::qaul::rpc::group::GroupInfo& GroupListResponse::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::qaul::rpc::group::GroupInfo& GroupListResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupListResponse.groups)
  return _internal_groups(index);
}
inline ::qaul::rpc::group::GroupInfo* GroupListResponse::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::qaul::rpc::group::GroupInfo* GroupListResponse::add_groups() {
  ::qaul::rpc::group::GroupInfo* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:qaul.rpc.group.GroupListResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfo >&
GroupListResponse::groups() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.group.GroupListResponse.groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// GroupInvited

// bytes sender_id = 1;
inline void GroupInvited::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& GroupInvited::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInvited.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInvited::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInvited.sender_id)
}
inline std::string* GroupInvited::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInvited.sender_id)
  return _s;
}
inline const std::string& GroupInvited::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void GroupInvited::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInvited::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInvited::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInvited.sender_id)
  return _impl_.sender_id_.Release();
}
inline void GroupInvited::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInvited.sender_id)
}

// uint64 received_at = 2;
inline void GroupInvited::clear_received_at() {
  _impl_.received_at_ = uint64_t{0u};
}
inline uint64_t GroupInvited::_internal_received_at() const {
  return _impl_.received_at_;
}
inline uint64_t GroupInvited::received_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInvited.received_at)
  return _internal_received_at();
}
inline void GroupInvited::_internal_set_received_at(uint64_t value) {
  
  _impl_.received_at_ = value;
}
inline void GroupInvited::set_received_at(uint64_t value) {
  _internal_set_received_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInvited.received_at)
}

// .qaul.rpc.group.GroupInfo group = 3;
inline bool GroupInvited::_internal_has_group() const {
  return this != internal_default_instance() && _impl_.group_ != nullptr;
}
inline bool GroupInvited::has_group() const {
  return _internal_has_group();
}
inline void GroupInvited::clear_group() {
  if (GetArenaForAllocation() == nullptr && _impl_.group_ != nullptr) {
    delete _impl_.group_;
  }
  _impl_.group_ = nullptr;
}
inline const ::qaul::rpc::group::GroupInfo& GroupInvited::_internal_group() const {
  const ::qaul::rpc::group::GroupInfo* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::rpc::group::GroupInfo&>(
      ::qaul::rpc::group::_GroupInfo_default_instance_);
}
inline const ::qaul::rpc::group::GroupInfo& GroupInvited::group() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInvited.group)
  return _internal_group();
}
inline void GroupInvited::unsafe_arena_set_allocated_group(
    ::qaul::rpc::group::GroupInfo* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.GroupInvited.group)
}
inline ::qaul::rpc::group::GroupInfo* GroupInvited::release_group() {
  
  ::qaul::rpc::group::GroupInfo* temp = _impl_.group_;
  _impl_.group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::rpc::group::GroupInfo* GroupInvited::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInvited.group)
  
  ::qaul::rpc::group::GroupInfo* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::qaul::rpc::group::GroupInfo* GroupInvited::_internal_mutable_group() {
  
  if (_impl_.group_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::rpc::group::GroupInfo>(GetArenaForAllocation());
    _impl_.group_ = p;
  }
  return _impl_.group_;
}
inline ::qaul::rpc::group::GroupInfo* GroupInvited::mutable_group() {
  ::qaul::rpc::group::GroupInfo* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInvited.group)
  return _msg;
}
inline void GroupInvited::set_allocated_group(::qaul::rpc::group::GroupInfo* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.group_ = group;
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInvited.group)
}

// -------------------------------------------------------------------

// GroupInvitedRequest

// -------------------------------------------------------------------

// GroupInvitedResponse

// repeated .qaul.rpc.group.GroupInvited invited = 1;
inline int GroupInvitedResponse::_internal_invited_size() const {
  return _impl_.invited_.size();
}
inline int GroupInvitedResponse::invited_size() const {
  return _internal_invited_size();
}
inline void GroupInvitedResponse::clear_invited() {
  _impl_.invited_.Clear();
}
inline ::qaul::rpc::group::GroupInvited* GroupInvitedResponse::mutable_invited(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInvitedResponse.invited)
  return _impl_.invited_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInvited >*
GroupInvitedResponse::mutable_invited() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.group.GroupInvitedResponse.invited)
  return &_impl_.invited_;
}
inline const ::qaul::rpc::group::GroupInvited& GroupInvitedResponse::_internal_invited(int index) const {
  return _impl_.invited_.Get(index);
}
inline const ::qaul::rpc::group::GroupInvited& GroupInvitedResponse::invited(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInvitedResponse.invited)
  return _internal_invited(index);
}
inline ::qaul::rpc::group::GroupInvited* GroupInvitedResponse::_internal_add_invited() {
  return _impl_.invited_.Add();
}
inline ::qaul::rpc::group::GroupInvited* GroupInvitedResponse::add_invited() {
  ::qaul::rpc::group::GroupInvited* _add = _internal_add_invited();
  // @@protoc_insertion_point(field_add:qaul.rpc.group.GroupInvitedResponse.invited)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInvited >&
GroupInvitedResponse::invited() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.group.GroupInvitedResponse.invited)
  return _impl_.invited_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace group
}  // namespace rpc
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::rpc::group::GroupMemberState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::group::GroupMemberState>() {
  return ::qaul::rpc::group::GroupMemberState_descriptor();
}
template <> struct is_proto_enum< ::qaul::rpc::group::GroupMemberRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::group::GroupMemberRole>() {
  return ::qaul::rpc::group::GroupMemberRole_descriptor();
}
template <> struct is_proto_enum< ::qaul::rpc::group::GroupStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::group::GroupStatus>() {
  return ::qaul::rpc::group::GroupStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5frpc_2eproto
