// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/dtn/dtn_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fdtn_2fdtn_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fdtn_2fdtn_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fdtn_2fdtn_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fdtn_2fdtn_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fdtn_2fdtn_5frpc_2eproto;
namespace qaul {
namespace rpc {
namespace dtn {
class DTN;
struct DTNDefaultTypeInternal;
extern DTNDefaultTypeInternal _DTN_default_instance_;
class DtnAddUserRequest;
struct DtnAddUserRequestDefaultTypeInternal;
extern DtnAddUserRequestDefaultTypeInternal _DtnAddUserRequest_default_instance_;
class DtnAddUserResponse;
struct DtnAddUserResponseDefaultTypeInternal;
extern DtnAddUserResponseDefaultTypeInternal _DtnAddUserResponse_default_instance_;
class DtnConfigRequest;
struct DtnConfigRequestDefaultTypeInternal;
extern DtnConfigRequestDefaultTypeInternal _DtnConfigRequest_default_instance_;
class DtnConfigResponse;
struct DtnConfigResponseDefaultTypeInternal;
extern DtnConfigResponseDefaultTypeInternal _DtnConfigResponse_default_instance_;
class DtnRemoveUserRequest;
struct DtnRemoveUserRequestDefaultTypeInternal;
extern DtnRemoveUserRequestDefaultTypeInternal _DtnRemoveUserRequest_default_instance_;
class DtnRemoveUserResponse;
struct DtnRemoveUserResponseDefaultTypeInternal;
extern DtnRemoveUserResponseDefaultTypeInternal _DtnRemoveUserResponse_default_instance_;
class DtnSetTotalSizeRequest;
struct DtnSetTotalSizeRequestDefaultTypeInternal;
extern DtnSetTotalSizeRequestDefaultTypeInternal _DtnSetTotalSizeRequest_default_instance_;
class DtnSetTotalSizeResponse;
struct DtnSetTotalSizeResponseDefaultTypeInternal;
extern DtnSetTotalSizeResponseDefaultTypeInternal _DtnSetTotalSizeResponse_default_instance_;
class DtnStateRequest;
struct DtnStateRequestDefaultTypeInternal;
extern DtnStateRequestDefaultTypeInternal _DtnStateRequest_default_instance_;
class DtnStateResponse;
struct DtnStateResponseDefaultTypeInternal;
extern DtnStateResponseDefaultTypeInternal _DtnStateResponse_default_instance_;
}  // namespace dtn
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::dtn::DTN* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DTN>(Arena*);
template<> ::qaul::rpc::dtn::DtnAddUserRequest* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnAddUserRequest>(Arena*);
template<> ::qaul::rpc::dtn::DtnAddUserResponse* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnAddUserResponse>(Arena*);
template<> ::qaul::rpc::dtn::DtnConfigRequest* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnConfigRequest>(Arena*);
template<> ::qaul::rpc::dtn::DtnConfigResponse* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnConfigResponse>(Arena*);
template<> ::qaul::rpc::dtn::DtnRemoveUserRequest* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnRemoveUserRequest>(Arena*);
template<> ::qaul::rpc::dtn::DtnRemoveUserResponse* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnRemoveUserResponse>(Arena*);
template<> ::qaul::rpc::dtn::DtnSetTotalSizeRequest* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnSetTotalSizeRequest>(Arena*);
template<> ::qaul::rpc::dtn::DtnSetTotalSizeResponse* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnSetTotalSizeResponse>(Arena*);
template<> ::qaul::rpc::dtn::DtnStateRequest* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnStateRequest>(Arena*);
template<> ::qaul::rpc::dtn::DtnStateResponse* Arena::CreateMaybeMessage<::qaul::rpc::dtn::DtnStateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace dtn {

// ===================================================================

class DTN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DTN) */ {
 public:
  inline DTN() : DTN(nullptr) {}
  ~DTN() override;
  explicit PROTOBUF_CONSTEXPR DTN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DTN(const DTN& from);
  DTN(DTN&& from) noexcept
    : DTN() {
    *this = ::std::move(from);
  }

  inline DTN& operator=(const DTN& from) {
    CopyFrom(from);
    return *this;
  }
  inline DTN& operator=(DTN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DTN& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kDtnStateRequest = 1,
    kDtnStateResponse = 2,
    kDtnConfigRequest = 3,
    kDtnConfigResponse = 4,
    kDtnAddUserRequest = 5,
    kDtnAddUserResponse = 6,
    kDtnRemoveUserRequest = 7,
    kDtnRemoveUserResponse = 8,
    kDtnSetTotalSizeRequest = 9,
    kDtnSetTotalSizeResponse = 10,
    MESSAGE_NOT_SET = 0,
  };

  static inline const DTN* internal_default_instance() {
    return reinterpret_cast<const DTN*>(
               &_DTN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DTN& a, DTN& b) {
    a.Swap(&b);
  }
  inline void Swap(DTN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DTN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DTN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DTN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DTN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DTN& from) {
    DTN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DTN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DTN";
  }
  protected:
  explicit DTN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDtnStateRequestFieldNumber = 1,
    kDtnStateResponseFieldNumber = 2,
    kDtnConfigRequestFieldNumber = 3,
    kDtnConfigResponseFieldNumber = 4,
    kDtnAddUserRequestFieldNumber = 5,
    kDtnAddUserResponseFieldNumber = 6,
    kDtnRemoveUserRequestFieldNumber = 7,
    kDtnRemoveUserResponseFieldNumber = 8,
    kDtnSetTotalSizeRequestFieldNumber = 9,
    kDtnSetTotalSizeResponseFieldNumber = 10,
  };
  // .qaul.rpc.dtn.DtnStateRequest dtn_state_request = 1;
  bool has_dtn_state_request() const;
  private:
  bool _internal_has_dtn_state_request() const;
  public:
  void clear_dtn_state_request();
  const ::qaul::rpc::dtn::DtnStateRequest& dtn_state_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnStateRequest* release_dtn_state_request();
  ::qaul::rpc::dtn::DtnStateRequest* mutable_dtn_state_request();
  void set_allocated_dtn_state_request(::qaul::rpc::dtn::DtnStateRequest* dtn_state_request);
  private:
  const ::qaul::rpc::dtn::DtnStateRequest& _internal_dtn_state_request() const;
  ::qaul::rpc::dtn::DtnStateRequest* _internal_mutable_dtn_state_request();
  public:
  void unsafe_arena_set_allocated_dtn_state_request(
      ::qaul::rpc::dtn::DtnStateRequest* dtn_state_request);
  ::qaul::rpc::dtn::DtnStateRequest* unsafe_arena_release_dtn_state_request();

  // .qaul.rpc.dtn.DtnStateResponse dtn_state_response = 2;
  bool has_dtn_state_response() const;
  private:
  bool _internal_has_dtn_state_response() const;
  public:
  void clear_dtn_state_response();
  const ::qaul::rpc::dtn::DtnStateResponse& dtn_state_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnStateResponse* release_dtn_state_response();
  ::qaul::rpc::dtn::DtnStateResponse* mutable_dtn_state_response();
  void set_allocated_dtn_state_response(::qaul::rpc::dtn::DtnStateResponse* dtn_state_response);
  private:
  const ::qaul::rpc::dtn::DtnStateResponse& _internal_dtn_state_response() const;
  ::qaul::rpc::dtn::DtnStateResponse* _internal_mutable_dtn_state_response();
  public:
  void unsafe_arena_set_allocated_dtn_state_response(
      ::qaul::rpc::dtn::DtnStateResponse* dtn_state_response);
  ::qaul::rpc::dtn::DtnStateResponse* unsafe_arena_release_dtn_state_response();

  // .qaul.rpc.dtn.DtnConfigRequest dtn_config_request = 3;
  bool has_dtn_config_request() const;
  private:
  bool _internal_has_dtn_config_request() const;
  public:
  void clear_dtn_config_request();
  const ::qaul::rpc::dtn::DtnConfigRequest& dtn_config_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnConfigRequest* release_dtn_config_request();
  ::qaul::rpc::dtn::DtnConfigRequest* mutable_dtn_config_request();
  void set_allocated_dtn_config_request(::qaul::rpc::dtn::DtnConfigRequest* dtn_config_request);
  private:
  const ::qaul::rpc::dtn::DtnConfigRequest& _internal_dtn_config_request() const;
  ::qaul::rpc::dtn::DtnConfigRequest* _internal_mutable_dtn_config_request();
  public:
  void unsafe_arena_set_allocated_dtn_config_request(
      ::qaul::rpc::dtn::DtnConfigRequest* dtn_config_request);
  ::qaul::rpc::dtn::DtnConfigRequest* unsafe_arena_release_dtn_config_request();

  // .qaul.rpc.dtn.DtnConfigResponse dtn_config_response = 4;
  bool has_dtn_config_response() const;
  private:
  bool _internal_has_dtn_config_response() const;
  public:
  void clear_dtn_config_response();
  const ::qaul::rpc::dtn::DtnConfigResponse& dtn_config_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnConfigResponse* release_dtn_config_response();
  ::qaul::rpc::dtn::DtnConfigResponse* mutable_dtn_config_response();
  void set_allocated_dtn_config_response(::qaul::rpc::dtn::DtnConfigResponse* dtn_config_response);
  private:
  const ::qaul::rpc::dtn::DtnConfigResponse& _internal_dtn_config_response() const;
  ::qaul::rpc::dtn::DtnConfigResponse* _internal_mutable_dtn_config_response();
  public:
  void unsafe_arena_set_allocated_dtn_config_response(
      ::qaul::rpc::dtn::DtnConfigResponse* dtn_config_response);
  ::qaul::rpc::dtn::DtnConfigResponse* unsafe_arena_release_dtn_config_response();

  // .qaul.rpc.dtn.DtnAddUserRequest dtn_add_user_request = 5;
  bool has_dtn_add_user_request() const;
  private:
  bool _internal_has_dtn_add_user_request() const;
  public:
  void clear_dtn_add_user_request();
  const ::qaul::rpc::dtn::DtnAddUserRequest& dtn_add_user_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnAddUserRequest* release_dtn_add_user_request();
  ::qaul::rpc::dtn::DtnAddUserRequest* mutable_dtn_add_user_request();
  void set_allocated_dtn_add_user_request(::qaul::rpc::dtn::DtnAddUserRequest* dtn_add_user_request);
  private:
  const ::qaul::rpc::dtn::DtnAddUserRequest& _internal_dtn_add_user_request() const;
  ::qaul::rpc::dtn::DtnAddUserRequest* _internal_mutable_dtn_add_user_request();
  public:
  void unsafe_arena_set_allocated_dtn_add_user_request(
      ::qaul::rpc::dtn::DtnAddUserRequest* dtn_add_user_request);
  ::qaul::rpc::dtn::DtnAddUserRequest* unsafe_arena_release_dtn_add_user_request();

  // .qaul.rpc.dtn.DtnAddUserResponse dtn_add_user_response = 6;
  bool has_dtn_add_user_response() const;
  private:
  bool _internal_has_dtn_add_user_response() const;
  public:
  void clear_dtn_add_user_response();
  const ::qaul::rpc::dtn::DtnAddUserResponse& dtn_add_user_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnAddUserResponse* release_dtn_add_user_response();
  ::qaul::rpc::dtn::DtnAddUserResponse* mutable_dtn_add_user_response();
  void set_allocated_dtn_add_user_response(::qaul::rpc::dtn::DtnAddUserResponse* dtn_add_user_response);
  private:
  const ::qaul::rpc::dtn::DtnAddUserResponse& _internal_dtn_add_user_response() const;
  ::qaul::rpc::dtn::DtnAddUserResponse* _internal_mutable_dtn_add_user_response();
  public:
  void unsafe_arena_set_allocated_dtn_add_user_response(
      ::qaul::rpc::dtn::DtnAddUserResponse* dtn_add_user_response);
  ::qaul::rpc::dtn::DtnAddUserResponse* unsafe_arena_release_dtn_add_user_response();

  // .qaul.rpc.dtn.DtnRemoveUserRequest dtn_remove_user_request = 7;
  bool has_dtn_remove_user_request() const;
  private:
  bool _internal_has_dtn_remove_user_request() const;
  public:
  void clear_dtn_remove_user_request();
  const ::qaul::rpc::dtn::DtnRemoveUserRequest& dtn_remove_user_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnRemoveUserRequest* release_dtn_remove_user_request();
  ::qaul::rpc::dtn::DtnRemoveUserRequest* mutable_dtn_remove_user_request();
  void set_allocated_dtn_remove_user_request(::qaul::rpc::dtn::DtnRemoveUserRequest* dtn_remove_user_request);
  private:
  const ::qaul::rpc::dtn::DtnRemoveUserRequest& _internal_dtn_remove_user_request() const;
  ::qaul::rpc::dtn::DtnRemoveUserRequest* _internal_mutable_dtn_remove_user_request();
  public:
  void unsafe_arena_set_allocated_dtn_remove_user_request(
      ::qaul::rpc::dtn::DtnRemoveUserRequest* dtn_remove_user_request);
  ::qaul::rpc::dtn::DtnRemoveUserRequest* unsafe_arena_release_dtn_remove_user_request();

  // .qaul.rpc.dtn.DtnRemoveUserResponse dtn_remove_user_response = 8;
  bool has_dtn_remove_user_response() const;
  private:
  bool _internal_has_dtn_remove_user_response() const;
  public:
  void clear_dtn_remove_user_response();
  const ::qaul::rpc::dtn::DtnRemoveUserResponse& dtn_remove_user_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnRemoveUserResponse* release_dtn_remove_user_response();
  ::qaul::rpc::dtn::DtnRemoveUserResponse* mutable_dtn_remove_user_response();
  void set_allocated_dtn_remove_user_response(::qaul::rpc::dtn::DtnRemoveUserResponse* dtn_remove_user_response);
  private:
  const ::qaul::rpc::dtn::DtnRemoveUserResponse& _internal_dtn_remove_user_response() const;
  ::qaul::rpc::dtn::DtnRemoveUserResponse* _internal_mutable_dtn_remove_user_response();
  public:
  void unsafe_arena_set_allocated_dtn_remove_user_response(
      ::qaul::rpc::dtn::DtnRemoveUserResponse* dtn_remove_user_response);
  ::qaul::rpc::dtn::DtnRemoveUserResponse* unsafe_arena_release_dtn_remove_user_response();

  // .qaul.rpc.dtn.DtnSetTotalSizeRequest dtn_set_total_size_request = 9;
  bool has_dtn_set_total_size_request() const;
  private:
  bool _internal_has_dtn_set_total_size_request() const;
  public:
  void clear_dtn_set_total_size_request();
  const ::qaul::rpc::dtn::DtnSetTotalSizeRequest& dtn_set_total_size_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnSetTotalSizeRequest* release_dtn_set_total_size_request();
  ::qaul::rpc::dtn::DtnSetTotalSizeRequest* mutable_dtn_set_total_size_request();
  void set_allocated_dtn_set_total_size_request(::qaul::rpc::dtn::DtnSetTotalSizeRequest* dtn_set_total_size_request);
  private:
  const ::qaul::rpc::dtn::DtnSetTotalSizeRequest& _internal_dtn_set_total_size_request() const;
  ::qaul::rpc::dtn::DtnSetTotalSizeRequest* _internal_mutable_dtn_set_total_size_request();
  public:
  void unsafe_arena_set_allocated_dtn_set_total_size_request(
      ::qaul::rpc::dtn::DtnSetTotalSizeRequest* dtn_set_total_size_request);
  ::qaul::rpc::dtn::DtnSetTotalSizeRequest* unsafe_arena_release_dtn_set_total_size_request();

  // .qaul.rpc.dtn.DtnSetTotalSizeResponse dtn_set_total_size_response = 10;
  bool has_dtn_set_total_size_response() const;
  private:
  bool _internal_has_dtn_set_total_size_response() const;
  public:
  void clear_dtn_set_total_size_response();
  const ::qaul::rpc::dtn::DtnSetTotalSizeResponse& dtn_set_total_size_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::dtn::DtnSetTotalSizeResponse* release_dtn_set_total_size_response();
  ::qaul::rpc::dtn::DtnSetTotalSizeResponse* mutable_dtn_set_total_size_response();
  void set_allocated_dtn_set_total_size_response(::qaul::rpc::dtn::DtnSetTotalSizeResponse* dtn_set_total_size_response);
  private:
  const ::qaul::rpc::dtn::DtnSetTotalSizeResponse& _internal_dtn_set_total_size_response() const;
  ::qaul::rpc::dtn::DtnSetTotalSizeResponse* _internal_mutable_dtn_set_total_size_response();
  public:
  void unsafe_arena_set_allocated_dtn_set_total_size_response(
      ::qaul::rpc::dtn::DtnSetTotalSizeResponse* dtn_set_total_size_response);
  ::qaul::rpc::dtn::DtnSetTotalSizeResponse* unsafe_arena_release_dtn_set_total_size_response();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DTN)
 private:
  class _Internal;
  void set_has_dtn_state_request();
  void set_has_dtn_state_response();
  void set_has_dtn_config_request();
  void set_has_dtn_config_response();
  void set_has_dtn_add_user_request();
  void set_has_dtn_add_user_response();
  void set_has_dtn_remove_user_request();
  void set_has_dtn_remove_user_response();
  void set_has_dtn_set_total_size_request();
  void set_has_dtn_set_total_size_response();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::dtn::DtnStateRequest* dtn_state_request_;
      ::qaul::rpc::dtn::DtnStateResponse* dtn_state_response_;
      ::qaul::rpc::dtn::DtnConfigRequest* dtn_config_request_;
      ::qaul::rpc::dtn::DtnConfigResponse* dtn_config_response_;
      ::qaul::rpc::dtn::DtnAddUserRequest* dtn_add_user_request_;
      ::qaul::rpc::dtn::DtnAddUserResponse* dtn_add_user_response_;
      ::qaul::rpc::dtn::DtnRemoveUserRequest* dtn_remove_user_request_;
      ::qaul::rpc::dtn::DtnRemoveUserResponse* dtn_remove_user_response_;
      ::qaul::rpc::dtn::DtnSetTotalSizeRequest* dtn_set_total_size_request_;
      ::qaul::rpc::dtn::DtnSetTotalSizeResponse* dtn_set_total_size_response_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnStateRequest) */ {
 public:
  inline DtnStateRequest() : DtnStateRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DtnStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnStateRequest(const DtnStateRequest& from);
  DtnStateRequest(DtnStateRequest&& from) noexcept
    : DtnStateRequest() {
    *this = ::std::move(from);
  }

  inline DtnStateRequest& operator=(const DtnStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnStateRequest& operator=(DtnStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnStateRequest* internal_default_instance() {
    return reinterpret_cast<const DtnStateRequest*>(
               &_DtnStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DtnStateRequest& a, DtnStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DtnStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DtnStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnStateRequest";
  }
  protected:
  explicit DtnStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnStateResponse) */ {
 public:
  inline DtnStateResponse() : DtnStateResponse(nullptr) {}
  ~DtnStateResponse() override;
  explicit PROTOBUF_CONSTEXPR DtnStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnStateResponse(const DtnStateResponse& from);
  DtnStateResponse(DtnStateResponse&& from) noexcept
    : DtnStateResponse() {
    *this = ::std::move(from);
  }

  inline DtnStateResponse& operator=(const DtnStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnStateResponse& operator=(DtnStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnStateResponse* internal_default_instance() {
    return reinterpret_cast<const DtnStateResponse*>(
               &_DtnStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DtnStateResponse& a, DtnStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnStateResponse& from) {
    DtnStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnStateResponse";
  }
  protected:
  explicit DtnStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsedSizeFieldNumber = 1,
    kDtnMessageCountFieldNumber = 2,
    kUnconfirmedCountFieldNumber = 3,
  };
  // uint64 used_size = 1;
  void clear_used_size();
  uint64_t used_size() const;
  void set_used_size(uint64_t value);
  private:
  uint64_t _internal_used_size() const;
  void _internal_set_used_size(uint64_t value);
  public:

  // uint32 dtn_message_count = 2;
  void clear_dtn_message_count();
  uint32_t dtn_message_count() const;
  void set_dtn_message_count(uint32_t value);
  private:
  uint32_t _internal_dtn_message_count() const;
  void _internal_set_dtn_message_count(uint32_t value);
  public:

  // uint32 unconfirmed_count = 3;
  void clear_unconfirmed_count();
  uint32_t unconfirmed_count() const;
  void set_unconfirmed_count(uint32_t value);
  private:
  uint32_t _internal_unconfirmed_count() const;
  void _internal_set_unconfirmed_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t used_size_;
    uint32_t dtn_message_count_;
    uint32_t unconfirmed_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnConfigRequest) */ {
 public:
  inline DtnConfigRequest() : DtnConfigRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DtnConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnConfigRequest(const DtnConfigRequest& from);
  DtnConfigRequest(DtnConfigRequest&& from) noexcept
    : DtnConfigRequest() {
    *this = ::std::move(from);
  }

  inline DtnConfigRequest& operator=(const DtnConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnConfigRequest& operator=(DtnConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DtnConfigRequest*>(
               &_DtnConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DtnConfigRequest& a, DtnConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DtnConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DtnConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnConfigRequest";
  }
  protected:
  explicit DtnConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnConfigResponse) */ {
 public:
  inline DtnConfigResponse() : DtnConfigResponse(nullptr) {}
  ~DtnConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR DtnConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnConfigResponse(const DtnConfigResponse& from);
  DtnConfigResponse(DtnConfigResponse&& from) noexcept
    : DtnConfigResponse() {
    *this = ::std::move(from);
  }

  inline DtnConfigResponse& operator=(const DtnConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnConfigResponse& operator=(DtnConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnConfigResponse* internal_default_instance() {
    return reinterpret_cast<const DtnConfigResponse*>(
               &_DtnConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DtnConfigResponse& a, DtnConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnConfigResponse& from) {
    DtnConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnConfigResponse";
  }
  protected:
  explicit DtnConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kTotalSizeFieldNumber = 1,
  };
  // repeated bytes users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  const std::string& users(int index) const;
  std::string* mutable_users(int index);
  void set_users(int index, const std::string& value);
  void set_users(int index, std::string&& value);
  void set_users(int index, const char* value);
  void set_users(int index, const void* value, size_t size);
  std::string* add_users();
  void add_users(const std::string& value);
  void add_users(std::string&& value);
  void add_users(const char* value);
  void add_users(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_users();
  private:
  const std::string& _internal_users(int index) const;
  std::string* _internal_add_users();
  public:

  // uint32 total_size = 1;
  void clear_total_size();
  uint32_t total_size() const;
  void set_total_size(uint32_t value);
  private:
  uint32_t _internal_total_size() const;
  void _internal_set_total_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> users_;
    uint32_t total_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnAddUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnAddUserRequest) */ {
 public:
  inline DtnAddUserRequest() : DtnAddUserRequest(nullptr) {}
  ~DtnAddUserRequest() override;
  explicit PROTOBUF_CONSTEXPR DtnAddUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnAddUserRequest(const DtnAddUserRequest& from);
  DtnAddUserRequest(DtnAddUserRequest&& from) noexcept
    : DtnAddUserRequest() {
    *this = ::std::move(from);
  }

  inline DtnAddUserRequest& operator=(const DtnAddUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnAddUserRequest& operator=(DtnAddUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnAddUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnAddUserRequest* internal_default_instance() {
    return reinterpret_cast<const DtnAddUserRequest*>(
               &_DtnAddUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DtnAddUserRequest& a, DtnAddUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnAddUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnAddUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnAddUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnAddUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnAddUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnAddUserRequest& from) {
    DtnAddUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnAddUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnAddUserRequest";
  }
  protected:
  explicit DtnAddUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnAddUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnAddUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnAddUserResponse) */ {
 public:
  inline DtnAddUserResponse() : DtnAddUserResponse(nullptr) {}
  ~DtnAddUserResponse() override;
  explicit PROTOBUF_CONSTEXPR DtnAddUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnAddUserResponse(const DtnAddUserResponse& from);
  DtnAddUserResponse(DtnAddUserResponse&& from) noexcept
    : DtnAddUserResponse() {
    *this = ::std::move(from);
  }

  inline DtnAddUserResponse& operator=(const DtnAddUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnAddUserResponse& operator=(DtnAddUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnAddUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnAddUserResponse* internal_default_instance() {
    return reinterpret_cast<const DtnAddUserResponse*>(
               &_DtnAddUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DtnAddUserResponse& a, DtnAddUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnAddUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnAddUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnAddUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnAddUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnAddUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnAddUserResponse& from) {
    DtnAddUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnAddUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnAddUserResponse";
  }
  protected:
  explicit DtnAddUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnAddUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnRemoveUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnRemoveUserRequest) */ {
 public:
  inline DtnRemoveUserRequest() : DtnRemoveUserRequest(nullptr) {}
  ~DtnRemoveUserRequest() override;
  explicit PROTOBUF_CONSTEXPR DtnRemoveUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnRemoveUserRequest(const DtnRemoveUserRequest& from);
  DtnRemoveUserRequest(DtnRemoveUserRequest&& from) noexcept
    : DtnRemoveUserRequest() {
    *this = ::std::move(from);
  }

  inline DtnRemoveUserRequest& operator=(const DtnRemoveUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnRemoveUserRequest& operator=(DtnRemoveUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnRemoveUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnRemoveUserRequest* internal_default_instance() {
    return reinterpret_cast<const DtnRemoveUserRequest*>(
               &_DtnRemoveUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DtnRemoveUserRequest& a, DtnRemoveUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnRemoveUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnRemoveUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnRemoveUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnRemoveUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnRemoveUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnRemoveUserRequest& from) {
    DtnRemoveUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnRemoveUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnRemoveUserRequest";
  }
  protected:
  explicit DtnRemoveUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnRemoveUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnRemoveUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnRemoveUserResponse) */ {
 public:
  inline DtnRemoveUserResponse() : DtnRemoveUserResponse(nullptr) {}
  ~DtnRemoveUserResponse() override;
  explicit PROTOBUF_CONSTEXPR DtnRemoveUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnRemoveUserResponse(const DtnRemoveUserResponse& from);
  DtnRemoveUserResponse(DtnRemoveUserResponse&& from) noexcept
    : DtnRemoveUserResponse() {
    *this = ::std::move(from);
  }

  inline DtnRemoveUserResponse& operator=(const DtnRemoveUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnRemoveUserResponse& operator=(DtnRemoveUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnRemoveUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnRemoveUserResponse* internal_default_instance() {
    return reinterpret_cast<const DtnRemoveUserResponse*>(
               &_DtnRemoveUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DtnRemoveUserResponse& a, DtnRemoveUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnRemoveUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnRemoveUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnRemoveUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnRemoveUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnRemoveUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnRemoveUserResponse& from) {
    DtnRemoveUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnRemoveUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnRemoveUserResponse";
  }
  protected:
  explicit DtnRemoveUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnRemoveUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnSetTotalSizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnSetTotalSizeRequest) */ {
 public:
  inline DtnSetTotalSizeRequest() : DtnSetTotalSizeRequest(nullptr) {}
  ~DtnSetTotalSizeRequest() override;
  explicit PROTOBUF_CONSTEXPR DtnSetTotalSizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnSetTotalSizeRequest(const DtnSetTotalSizeRequest& from);
  DtnSetTotalSizeRequest(DtnSetTotalSizeRequest&& from) noexcept
    : DtnSetTotalSizeRequest() {
    *this = ::std::move(from);
  }

  inline DtnSetTotalSizeRequest& operator=(const DtnSetTotalSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnSetTotalSizeRequest& operator=(DtnSetTotalSizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnSetTotalSizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnSetTotalSizeRequest* internal_default_instance() {
    return reinterpret_cast<const DtnSetTotalSizeRequest*>(
               &_DtnSetTotalSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DtnSetTotalSizeRequest& a, DtnSetTotalSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnSetTotalSizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnSetTotalSizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnSetTotalSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnSetTotalSizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnSetTotalSizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnSetTotalSizeRequest& from) {
    DtnSetTotalSizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnSetTotalSizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnSetTotalSizeRequest";
  }
  protected:
  explicit DtnSetTotalSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalSizeFieldNumber = 1,
  };
  // uint32 total_size = 1;
  void clear_total_size();
  uint32_t total_size() const;
  void set_total_size(uint32_t value);
  private:
  uint32_t _internal_total_size() const;
  void _internal_set_total_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnSetTotalSizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t total_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DtnSetTotalSizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.dtn.DtnSetTotalSizeResponse) */ {
 public:
  inline DtnSetTotalSizeResponse() : DtnSetTotalSizeResponse(nullptr) {}
  ~DtnSetTotalSizeResponse() override;
  explicit PROTOBUF_CONSTEXPR DtnSetTotalSizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtnSetTotalSizeResponse(const DtnSetTotalSizeResponse& from);
  DtnSetTotalSizeResponse(DtnSetTotalSizeResponse&& from) noexcept
    : DtnSetTotalSizeResponse() {
    *this = ::std::move(from);
  }

  inline DtnSetTotalSizeResponse& operator=(const DtnSetTotalSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtnSetTotalSizeResponse& operator=(DtnSetTotalSizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtnSetTotalSizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtnSetTotalSizeResponse* internal_default_instance() {
    return reinterpret_cast<const DtnSetTotalSizeResponse*>(
               &_DtnSetTotalSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DtnSetTotalSizeResponse& a, DtnSetTotalSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DtnSetTotalSizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtnSetTotalSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtnSetTotalSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtnSetTotalSizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtnSetTotalSizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtnSetTotalSizeResponse& from) {
    DtnSetTotalSizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtnSetTotalSizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.dtn.DtnSetTotalSizeResponse";
  }
  protected:
  explicit DtnSetTotalSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.dtn.DtnSetTotalSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fdtn_2fdtn_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DTN

// .qaul.rpc.dtn.DtnStateRequest dtn_state_request = 1;
inline bool DTN::_internal_has_dtn_state_request() const {
  return message_case() == kDtnStateRequest;
}
inline bool DTN::has_dtn_state_request() const {
  return _internal_has_dtn_state_request();
}
inline void DTN::set_has_dtn_state_request() {
  _impl_._oneof_case_[0] = kDtnStateRequest;
}
inline void DTN::clear_dtn_state_request() {
  if (_internal_has_dtn_state_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_state_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnStateRequest* DTN::release_dtn_state_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_state_request)
  if (_internal_has_dtn_state_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnStateRequest* temp = _impl_.message_.dtn_state_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_state_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnStateRequest& DTN::_internal_dtn_state_request() const {
  return _internal_has_dtn_state_request()
      ? *_impl_.message_.dtn_state_request_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnStateRequest&>(::qaul::rpc::dtn::_DtnStateRequest_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnStateRequest& DTN::dtn_state_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_state_request)
  return _internal_dtn_state_request();
}
inline ::qaul::rpc::dtn::DtnStateRequest* DTN::unsafe_arena_release_dtn_state_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_state_request)
  if (_internal_has_dtn_state_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnStateRequest* temp = _impl_.message_.dtn_state_request_;
    _impl_.message_.dtn_state_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_state_request(::qaul::rpc::dtn::DtnStateRequest* dtn_state_request) {
  clear_message();
  if (dtn_state_request) {
    set_has_dtn_state_request();
    _impl_.message_.dtn_state_request_ = dtn_state_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_state_request)
}
inline ::qaul::rpc::dtn::DtnStateRequest* DTN::_internal_mutable_dtn_state_request() {
  if (!_internal_has_dtn_state_request()) {
    clear_message();
    set_has_dtn_state_request();
    _impl_.message_.dtn_state_request_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnStateRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_state_request_;
}
inline ::qaul::rpc::dtn::DtnStateRequest* DTN::mutable_dtn_state_request() {
  ::qaul::rpc::dtn::DtnStateRequest* _msg = _internal_mutable_dtn_state_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_state_request)
  return _msg;
}

// .qaul.rpc.dtn.DtnStateResponse dtn_state_response = 2;
inline bool DTN::_internal_has_dtn_state_response() const {
  return message_case() == kDtnStateResponse;
}
inline bool DTN::has_dtn_state_response() const {
  return _internal_has_dtn_state_response();
}
inline void DTN::set_has_dtn_state_response() {
  _impl_._oneof_case_[0] = kDtnStateResponse;
}
inline void DTN::clear_dtn_state_response() {
  if (_internal_has_dtn_state_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_state_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnStateResponse* DTN::release_dtn_state_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_state_response)
  if (_internal_has_dtn_state_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnStateResponse* temp = _impl_.message_.dtn_state_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_state_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnStateResponse& DTN::_internal_dtn_state_response() const {
  return _internal_has_dtn_state_response()
      ? *_impl_.message_.dtn_state_response_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnStateResponse&>(::qaul::rpc::dtn::_DtnStateResponse_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnStateResponse& DTN::dtn_state_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_state_response)
  return _internal_dtn_state_response();
}
inline ::qaul::rpc::dtn::DtnStateResponse* DTN::unsafe_arena_release_dtn_state_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_state_response)
  if (_internal_has_dtn_state_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnStateResponse* temp = _impl_.message_.dtn_state_response_;
    _impl_.message_.dtn_state_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_state_response(::qaul::rpc::dtn::DtnStateResponse* dtn_state_response) {
  clear_message();
  if (dtn_state_response) {
    set_has_dtn_state_response();
    _impl_.message_.dtn_state_response_ = dtn_state_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_state_response)
}
inline ::qaul::rpc::dtn::DtnStateResponse* DTN::_internal_mutable_dtn_state_response() {
  if (!_internal_has_dtn_state_response()) {
    clear_message();
    set_has_dtn_state_response();
    _impl_.message_.dtn_state_response_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnStateResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_state_response_;
}
inline ::qaul::rpc::dtn::DtnStateResponse* DTN::mutable_dtn_state_response() {
  ::qaul::rpc::dtn::DtnStateResponse* _msg = _internal_mutable_dtn_state_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_state_response)
  return _msg;
}

// .qaul.rpc.dtn.DtnConfigRequest dtn_config_request = 3;
inline bool DTN::_internal_has_dtn_config_request() const {
  return message_case() == kDtnConfigRequest;
}
inline bool DTN::has_dtn_config_request() const {
  return _internal_has_dtn_config_request();
}
inline void DTN::set_has_dtn_config_request() {
  _impl_._oneof_case_[0] = kDtnConfigRequest;
}
inline void DTN::clear_dtn_config_request() {
  if (_internal_has_dtn_config_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_config_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnConfigRequest* DTN::release_dtn_config_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_config_request)
  if (_internal_has_dtn_config_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnConfigRequest* temp = _impl_.message_.dtn_config_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_config_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnConfigRequest& DTN::_internal_dtn_config_request() const {
  return _internal_has_dtn_config_request()
      ? *_impl_.message_.dtn_config_request_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnConfigRequest&>(::qaul::rpc::dtn::_DtnConfigRequest_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnConfigRequest& DTN::dtn_config_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_config_request)
  return _internal_dtn_config_request();
}
inline ::qaul::rpc::dtn::DtnConfigRequest* DTN::unsafe_arena_release_dtn_config_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_config_request)
  if (_internal_has_dtn_config_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnConfigRequest* temp = _impl_.message_.dtn_config_request_;
    _impl_.message_.dtn_config_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_config_request(::qaul::rpc::dtn::DtnConfigRequest* dtn_config_request) {
  clear_message();
  if (dtn_config_request) {
    set_has_dtn_config_request();
    _impl_.message_.dtn_config_request_ = dtn_config_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_config_request)
}
inline ::qaul::rpc::dtn::DtnConfigRequest* DTN::_internal_mutable_dtn_config_request() {
  if (!_internal_has_dtn_config_request()) {
    clear_message();
    set_has_dtn_config_request();
    _impl_.message_.dtn_config_request_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnConfigRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_config_request_;
}
inline ::qaul::rpc::dtn::DtnConfigRequest* DTN::mutable_dtn_config_request() {
  ::qaul::rpc::dtn::DtnConfigRequest* _msg = _internal_mutable_dtn_config_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_config_request)
  return _msg;
}

// .qaul.rpc.dtn.DtnConfigResponse dtn_config_response = 4;
inline bool DTN::_internal_has_dtn_config_response() const {
  return message_case() == kDtnConfigResponse;
}
inline bool DTN::has_dtn_config_response() const {
  return _internal_has_dtn_config_response();
}
inline void DTN::set_has_dtn_config_response() {
  _impl_._oneof_case_[0] = kDtnConfigResponse;
}
inline void DTN::clear_dtn_config_response() {
  if (_internal_has_dtn_config_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_config_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnConfigResponse* DTN::release_dtn_config_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_config_response)
  if (_internal_has_dtn_config_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnConfigResponse* temp = _impl_.message_.dtn_config_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_config_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnConfigResponse& DTN::_internal_dtn_config_response() const {
  return _internal_has_dtn_config_response()
      ? *_impl_.message_.dtn_config_response_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnConfigResponse&>(::qaul::rpc::dtn::_DtnConfigResponse_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnConfigResponse& DTN::dtn_config_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_config_response)
  return _internal_dtn_config_response();
}
inline ::qaul::rpc::dtn::DtnConfigResponse* DTN::unsafe_arena_release_dtn_config_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_config_response)
  if (_internal_has_dtn_config_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnConfigResponse* temp = _impl_.message_.dtn_config_response_;
    _impl_.message_.dtn_config_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_config_response(::qaul::rpc::dtn::DtnConfigResponse* dtn_config_response) {
  clear_message();
  if (dtn_config_response) {
    set_has_dtn_config_response();
    _impl_.message_.dtn_config_response_ = dtn_config_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_config_response)
}
inline ::qaul::rpc::dtn::DtnConfigResponse* DTN::_internal_mutable_dtn_config_response() {
  if (!_internal_has_dtn_config_response()) {
    clear_message();
    set_has_dtn_config_response();
    _impl_.message_.dtn_config_response_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnConfigResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_config_response_;
}
inline ::qaul::rpc::dtn::DtnConfigResponse* DTN::mutable_dtn_config_response() {
  ::qaul::rpc::dtn::DtnConfigResponse* _msg = _internal_mutable_dtn_config_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_config_response)
  return _msg;
}

// .qaul.rpc.dtn.DtnAddUserRequest dtn_add_user_request = 5;
inline bool DTN::_internal_has_dtn_add_user_request() const {
  return message_case() == kDtnAddUserRequest;
}
inline bool DTN::has_dtn_add_user_request() const {
  return _internal_has_dtn_add_user_request();
}
inline void DTN::set_has_dtn_add_user_request() {
  _impl_._oneof_case_[0] = kDtnAddUserRequest;
}
inline void DTN::clear_dtn_add_user_request() {
  if (_internal_has_dtn_add_user_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_add_user_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnAddUserRequest* DTN::release_dtn_add_user_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_add_user_request)
  if (_internal_has_dtn_add_user_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnAddUserRequest* temp = _impl_.message_.dtn_add_user_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_add_user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnAddUserRequest& DTN::_internal_dtn_add_user_request() const {
  return _internal_has_dtn_add_user_request()
      ? *_impl_.message_.dtn_add_user_request_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnAddUserRequest&>(::qaul::rpc::dtn::_DtnAddUserRequest_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnAddUserRequest& DTN::dtn_add_user_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_add_user_request)
  return _internal_dtn_add_user_request();
}
inline ::qaul::rpc::dtn::DtnAddUserRequest* DTN::unsafe_arena_release_dtn_add_user_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_add_user_request)
  if (_internal_has_dtn_add_user_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnAddUserRequest* temp = _impl_.message_.dtn_add_user_request_;
    _impl_.message_.dtn_add_user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_add_user_request(::qaul::rpc::dtn::DtnAddUserRequest* dtn_add_user_request) {
  clear_message();
  if (dtn_add_user_request) {
    set_has_dtn_add_user_request();
    _impl_.message_.dtn_add_user_request_ = dtn_add_user_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_add_user_request)
}
inline ::qaul::rpc::dtn::DtnAddUserRequest* DTN::_internal_mutable_dtn_add_user_request() {
  if (!_internal_has_dtn_add_user_request()) {
    clear_message();
    set_has_dtn_add_user_request();
    _impl_.message_.dtn_add_user_request_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnAddUserRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_add_user_request_;
}
inline ::qaul::rpc::dtn::DtnAddUserRequest* DTN::mutable_dtn_add_user_request() {
  ::qaul::rpc::dtn::DtnAddUserRequest* _msg = _internal_mutable_dtn_add_user_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_add_user_request)
  return _msg;
}

// .qaul.rpc.dtn.DtnAddUserResponse dtn_add_user_response = 6;
inline bool DTN::_internal_has_dtn_add_user_response() const {
  return message_case() == kDtnAddUserResponse;
}
inline bool DTN::has_dtn_add_user_response() const {
  return _internal_has_dtn_add_user_response();
}
inline void DTN::set_has_dtn_add_user_response() {
  _impl_._oneof_case_[0] = kDtnAddUserResponse;
}
inline void DTN::clear_dtn_add_user_response() {
  if (_internal_has_dtn_add_user_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_add_user_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnAddUserResponse* DTN::release_dtn_add_user_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_add_user_response)
  if (_internal_has_dtn_add_user_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnAddUserResponse* temp = _impl_.message_.dtn_add_user_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_add_user_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnAddUserResponse& DTN::_internal_dtn_add_user_response() const {
  return _internal_has_dtn_add_user_response()
      ? *_impl_.message_.dtn_add_user_response_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnAddUserResponse&>(::qaul::rpc::dtn::_DtnAddUserResponse_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnAddUserResponse& DTN::dtn_add_user_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_add_user_response)
  return _internal_dtn_add_user_response();
}
inline ::qaul::rpc::dtn::DtnAddUserResponse* DTN::unsafe_arena_release_dtn_add_user_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_add_user_response)
  if (_internal_has_dtn_add_user_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnAddUserResponse* temp = _impl_.message_.dtn_add_user_response_;
    _impl_.message_.dtn_add_user_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_add_user_response(::qaul::rpc::dtn::DtnAddUserResponse* dtn_add_user_response) {
  clear_message();
  if (dtn_add_user_response) {
    set_has_dtn_add_user_response();
    _impl_.message_.dtn_add_user_response_ = dtn_add_user_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_add_user_response)
}
inline ::qaul::rpc::dtn::DtnAddUserResponse* DTN::_internal_mutable_dtn_add_user_response() {
  if (!_internal_has_dtn_add_user_response()) {
    clear_message();
    set_has_dtn_add_user_response();
    _impl_.message_.dtn_add_user_response_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnAddUserResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_add_user_response_;
}
inline ::qaul::rpc::dtn::DtnAddUserResponse* DTN::mutable_dtn_add_user_response() {
  ::qaul::rpc::dtn::DtnAddUserResponse* _msg = _internal_mutable_dtn_add_user_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_add_user_response)
  return _msg;
}

// .qaul.rpc.dtn.DtnRemoveUserRequest dtn_remove_user_request = 7;
inline bool DTN::_internal_has_dtn_remove_user_request() const {
  return message_case() == kDtnRemoveUserRequest;
}
inline bool DTN::has_dtn_remove_user_request() const {
  return _internal_has_dtn_remove_user_request();
}
inline void DTN::set_has_dtn_remove_user_request() {
  _impl_._oneof_case_[0] = kDtnRemoveUserRequest;
}
inline void DTN::clear_dtn_remove_user_request() {
  if (_internal_has_dtn_remove_user_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_remove_user_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnRemoveUserRequest* DTN::release_dtn_remove_user_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_remove_user_request)
  if (_internal_has_dtn_remove_user_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnRemoveUserRequest* temp = _impl_.message_.dtn_remove_user_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_remove_user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnRemoveUserRequest& DTN::_internal_dtn_remove_user_request() const {
  return _internal_has_dtn_remove_user_request()
      ? *_impl_.message_.dtn_remove_user_request_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnRemoveUserRequest&>(::qaul::rpc::dtn::_DtnRemoveUserRequest_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnRemoveUserRequest& DTN::dtn_remove_user_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_remove_user_request)
  return _internal_dtn_remove_user_request();
}
inline ::qaul::rpc::dtn::DtnRemoveUserRequest* DTN::unsafe_arena_release_dtn_remove_user_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_remove_user_request)
  if (_internal_has_dtn_remove_user_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnRemoveUserRequest* temp = _impl_.message_.dtn_remove_user_request_;
    _impl_.message_.dtn_remove_user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_remove_user_request(::qaul::rpc::dtn::DtnRemoveUserRequest* dtn_remove_user_request) {
  clear_message();
  if (dtn_remove_user_request) {
    set_has_dtn_remove_user_request();
    _impl_.message_.dtn_remove_user_request_ = dtn_remove_user_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_remove_user_request)
}
inline ::qaul::rpc::dtn::DtnRemoveUserRequest* DTN::_internal_mutable_dtn_remove_user_request() {
  if (!_internal_has_dtn_remove_user_request()) {
    clear_message();
    set_has_dtn_remove_user_request();
    _impl_.message_.dtn_remove_user_request_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnRemoveUserRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_remove_user_request_;
}
inline ::qaul::rpc::dtn::DtnRemoveUserRequest* DTN::mutable_dtn_remove_user_request() {
  ::qaul::rpc::dtn::DtnRemoveUserRequest* _msg = _internal_mutable_dtn_remove_user_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_remove_user_request)
  return _msg;
}

// .qaul.rpc.dtn.DtnRemoveUserResponse dtn_remove_user_response = 8;
inline bool DTN::_internal_has_dtn_remove_user_response() const {
  return message_case() == kDtnRemoveUserResponse;
}
inline bool DTN::has_dtn_remove_user_response() const {
  return _internal_has_dtn_remove_user_response();
}
inline void DTN::set_has_dtn_remove_user_response() {
  _impl_._oneof_case_[0] = kDtnRemoveUserResponse;
}
inline void DTN::clear_dtn_remove_user_response() {
  if (_internal_has_dtn_remove_user_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_remove_user_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnRemoveUserResponse* DTN::release_dtn_remove_user_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_remove_user_response)
  if (_internal_has_dtn_remove_user_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnRemoveUserResponse* temp = _impl_.message_.dtn_remove_user_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_remove_user_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnRemoveUserResponse& DTN::_internal_dtn_remove_user_response() const {
  return _internal_has_dtn_remove_user_response()
      ? *_impl_.message_.dtn_remove_user_response_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnRemoveUserResponse&>(::qaul::rpc::dtn::_DtnRemoveUserResponse_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnRemoveUserResponse& DTN::dtn_remove_user_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_remove_user_response)
  return _internal_dtn_remove_user_response();
}
inline ::qaul::rpc::dtn::DtnRemoveUserResponse* DTN::unsafe_arena_release_dtn_remove_user_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_remove_user_response)
  if (_internal_has_dtn_remove_user_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnRemoveUserResponse* temp = _impl_.message_.dtn_remove_user_response_;
    _impl_.message_.dtn_remove_user_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_remove_user_response(::qaul::rpc::dtn::DtnRemoveUserResponse* dtn_remove_user_response) {
  clear_message();
  if (dtn_remove_user_response) {
    set_has_dtn_remove_user_response();
    _impl_.message_.dtn_remove_user_response_ = dtn_remove_user_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_remove_user_response)
}
inline ::qaul::rpc::dtn::DtnRemoveUserResponse* DTN::_internal_mutable_dtn_remove_user_response() {
  if (!_internal_has_dtn_remove_user_response()) {
    clear_message();
    set_has_dtn_remove_user_response();
    _impl_.message_.dtn_remove_user_response_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnRemoveUserResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_remove_user_response_;
}
inline ::qaul::rpc::dtn::DtnRemoveUserResponse* DTN::mutable_dtn_remove_user_response() {
  ::qaul::rpc::dtn::DtnRemoveUserResponse* _msg = _internal_mutable_dtn_remove_user_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_remove_user_response)
  return _msg;
}

// .qaul.rpc.dtn.DtnSetTotalSizeRequest dtn_set_total_size_request = 9;
inline bool DTN::_internal_has_dtn_set_total_size_request() const {
  return message_case() == kDtnSetTotalSizeRequest;
}
inline bool DTN::has_dtn_set_total_size_request() const {
  return _internal_has_dtn_set_total_size_request();
}
inline void DTN::set_has_dtn_set_total_size_request() {
  _impl_._oneof_case_[0] = kDtnSetTotalSizeRequest;
}
inline void DTN::clear_dtn_set_total_size_request() {
  if (_internal_has_dtn_set_total_size_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_set_total_size_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeRequest* DTN::release_dtn_set_total_size_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_set_total_size_request)
  if (_internal_has_dtn_set_total_size_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnSetTotalSizeRequest* temp = _impl_.message_.dtn_set_total_size_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_set_total_size_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnSetTotalSizeRequest& DTN::_internal_dtn_set_total_size_request() const {
  return _internal_has_dtn_set_total_size_request()
      ? *_impl_.message_.dtn_set_total_size_request_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnSetTotalSizeRequest&>(::qaul::rpc::dtn::_DtnSetTotalSizeRequest_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnSetTotalSizeRequest& DTN::dtn_set_total_size_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_set_total_size_request)
  return _internal_dtn_set_total_size_request();
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeRequest* DTN::unsafe_arena_release_dtn_set_total_size_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_set_total_size_request)
  if (_internal_has_dtn_set_total_size_request()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnSetTotalSizeRequest* temp = _impl_.message_.dtn_set_total_size_request_;
    _impl_.message_.dtn_set_total_size_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_set_total_size_request(::qaul::rpc::dtn::DtnSetTotalSizeRequest* dtn_set_total_size_request) {
  clear_message();
  if (dtn_set_total_size_request) {
    set_has_dtn_set_total_size_request();
    _impl_.message_.dtn_set_total_size_request_ = dtn_set_total_size_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_set_total_size_request)
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeRequest* DTN::_internal_mutable_dtn_set_total_size_request() {
  if (!_internal_has_dtn_set_total_size_request()) {
    clear_message();
    set_has_dtn_set_total_size_request();
    _impl_.message_.dtn_set_total_size_request_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnSetTotalSizeRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_set_total_size_request_;
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeRequest* DTN::mutable_dtn_set_total_size_request() {
  ::qaul::rpc::dtn::DtnSetTotalSizeRequest* _msg = _internal_mutable_dtn_set_total_size_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_set_total_size_request)
  return _msg;
}

// .qaul.rpc.dtn.DtnSetTotalSizeResponse dtn_set_total_size_response = 10;
inline bool DTN::_internal_has_dtn_set_total_size_response() const {
  return message_case() == kDtnSetTotalSizeResponse;
}
inline bool DTN::has_dtn_set_total_size_response() const {
  return _internal_has_dtn_set_total_size_response();
}
inline void DTN::set_has_dtn_set_total_size_response() {
  _impl_._oneof_case_[0] = kDtnSetTotalSizeResponse;
}
inline void DTN::clear_dtn_set_total_size_response() {
  if (_internal_has_dtn_set_total_size_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.dtn_set_total_size_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeResponse* DTN::release_dtn_set_total_size_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DTN.dtn_set_total_size_response)
  if (_internal_has_dtn_set_total_size_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnSetTotalSizeResponse* temp = _impl_.message_.dtn_set_total_size_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.dtn_set_total_size_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::dtn::DtnSetTotalSizeResponse& DTN::_internal_dtn_set_total_size_response() const {
  return _internal_has_dtn_set_total_size_response()
      ? *_impl_.message_.dtn_set_total_size_response_
      : reinterpret_cast< ::qaul::rpc::dtn::DtnSetTotalSizeResponse&>(::qaul::rpc::dtn::_DtnSetTotalSizeResponse_default_instance_);
}
inline const ::qaul::rpc::dtn::DtnSetTotalSizeResponse& DTN::dtn_set_total_size_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DTN.dtn_set_total_size_response)
  return _internal_dtn_set_total_size_response();
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeResponse* DTN::unsafe_arena_release_dtn_set_total_size_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.dtn.DTN.dtn_set_total_size_response)
  if (_internal_has_dtn_set_total_size_response()) {
    clear_has_message();
    ::qaul::rpc::dtn::DtnSetTotalSizeResponse* temp = _impl_.message_.dtn_set_total_size_response_;
    _impl_.message_.dtn_set_total_size_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DTN::unsafe_arena_set_allocated_dtn_set_total_size_response(::qaul::rpc::dtn::DtnSetTotalSizeResponse* dtn_set_total_size_response) {
  clear_message();
  if (dtn_set_total_size_response) {
    set_has_dtn_set_total_size_response();
    _impl_.message_.dtn_set_total_size_response_ = dtn_set_total_size_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.dtn.DTN.dtn_set_total_size_response)
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeResponse* DTN::_internal_mutable_dtn_set_total_size_response() {
  if (!_internal_has_dtn_set_total_size_response()) {
    clear_message();
    set_has_dtn_set_total_size_response();
    _impl_.message_.dtn_set_total_size_response_ = CreateMaybeMessage< ::qaul::rpc::dtn::DtnSetTotalSizeResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.dtn_set_total_size_response_;
}
inline ::qaul::rpc::dtn::DtnSetTotalSizeResponse* DTN::mutable_dtn_set_total_size_response() {
  ::qaul::rpc::dtn::DtnSetTotalSizeResponse* _msg = _internal_mutable_dtn_set_total_size_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DTN.dtn_set_total_size_response)
  return _msg;
}

inline bool DTN::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void DTN::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline DTN::MessageCase DTN::message_case() const {
  return DTN::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DtnStateRequest

// -------------------------------------------------------------------

// DtnStateResponse

// uint64 used_size = 1;
inline void DtnStateResponse::clear_used_size() {
  _impl_.used_size_ = uint64_t{0u};
}
inline uint64_t DtnStateResponse::_internal_used_size() const {
  return _impl_.used_size_;
}
inline uint64_t DtnStateResponse::used_size() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnStateResponse.used_size)
  return _internal_used_size();
}
inline void DtnStateResponse::_internal_set_used_size(uint64_t value) {
  
  _impl_.used_size_ = value;
}
inline void DtnStateResponse::set_used_size(uint64_t value) {
  _internal_set_used_size(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnStateResponse.used_size)
}

// uint32 dtn_message_count = 2;
inline void DtnStateResponse::clear_dtn_message_count() {
  _impl_.dtn_message_count_ = 0u;
}
inline uint32_t DtnStateResponse::_internal_dtn_message_count() const {
  return _impl_.dtn_message_count_;
}
inline uint32_t DtnStateResponse::dtn_message_count() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnStateResponse.dtn_message_count)
  return _internal_dtn_message_count();
}
inline void DtnStateResponse::_internal_set_dtn_message_count(uint32_t value) {
  
  _impl_.dtn_message_count_ = value;
}
inline void DtnStateResponse::set_dtn_message_count(uint32_t value) {
  _internal_set_dtn_message_count(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnStateResponse.dtn_message_count)
}

// uint32 unconfirmed_count = 3;
inline void DtnStateResponse::clear_unconfirmed_count() {
  _impl_.unconfirmed_count_ = 0u;
}
inline uint32_t DtnStateResponse::_internal_unconfirmed_count() const {
  return _impl_.unconfirmed_count_;
}
inline uint32_t DtnStateResponse::unconfirmed_count() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnStateResponse.unconfirmed_count)
  return _internal_unconfirmed_count();
}
inline void DtnStateResponse::_internal_set_unconfirmed_count(uint32_t value) {
  
  _impl_.unconfirmed_count_ = value;
}
inline void DtnStateResponse::set_unconfirmed_count(uint32_t value) {
  _internal_set_unconfirmed_count(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnStateResponse.unconfirmed_count)
}

// -------------------------------------------------------------------

// DtnConfigRequest

// -------------------------------------------------------------------

// DtnConfigResponse

// uint32 total_size = 1;
inline void DtnConfigResponse::clear_total_size() {
  _impl_.total_size_ = 0u;
}
inline uint32_t DtnConfigResponse::_internal_total_size() const {
  return _impl_.total_size_;
}
inline uint32_t DtnConfigResponse::total_size() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnConfigResponse.total_size)
  return _internal_total_size();
}
inline void DtnConfigResponse::_internal_set_total_size(uint32_t value) {
  
  _impl_.total_size_ = value;
}
inline void DtnConfigResponse::set_total_size(uint32_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnConfigResponse.total_size)
}

// repeated bytes users = 2;
inline int DtnConfigResponse::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int DtnConfigResponse::users_size() const {
  return _internal_users_size();
}
inline void DtnConfigResponse::clear_users() {
  _impl_.users_.Clear();
}
inline std::string* DtnConfigResponse::add_users() {
  std::string* _s = _internal_add_users();
  // @@protoc_insertion_point(field_add_mutable:qaul.rpc.dtn.DtnConfigResponse.users)
  return _s;
}
inline const std::string& DtnConfigResponse::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const std::string& DtnConfigResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnConfigResponse.users)
  return _internal_users(index);
}
inline std::string* DtnConfigResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DtnConfigResponse.users)
  return _impl_.users_.Mutable(index);
}
inline void DtnConfigResponse::set_users(int index, const std::string& value) {
  _impl_.users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline void DtnConfigResponse::set_users(int index, std::string&& value) {
  _impl_.users_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline void DtnConfigResponse::set_users(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline void DtnConfigResponse::set_users(int index, const void* value, size_t size) {
  _impl_.users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline std::string* DtnConfigResponse::_internal_add_users() {
  return _impl_.users_.Add();
}
inline void DtnConfigResponse::add_users(const std::string& value) {
  _impl_.users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline void DtnConfigResponse::add_users(std::string&& value) {
  _impl_.users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline void DtnConfigResponse::add_users(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline void DtnConfigResponse::add_users(const void* value, size_t size) {
  _impl_.users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:qaul.rpc.dtn.DtnConfigResponse.users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DtnConfigResponse::users() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.dtn.DtnConfigResponse.users)
  return _impl_.users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DtnConfigResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.dtn.DtnConfigResponse.users)
  return &_impl_.users_;
}

// -------------------------------------------------------------------

// DtnAddUserRequest

// bytes user_id = 1;
inline void DtnAddUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& DtnAddUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnAddUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DtnAddUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnAddUserRequest.user_id)
}
inline std::string* DtnAddUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DtnAddUserRequest.user_id)
  return _s;
}
inline const std::string& DtnAddUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void DtnAddUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DtnAddUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DtnAddUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DtnAddUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void DtnAddUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.dtn.DtnAddUserRequest.user_id)
}

// -------------------------------------------------------------------

// DtnAddUserResponse

// bool status = 1;
inline void DtnAddUserResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool DtnAddUserResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool DtnAddUserResponse::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnAddUserResponse.status)
  return _internal_status();
}
inline void DtnAddUserResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void DtnAddUserResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnAddUserResponse.status)
}

// string message = 2;
inline void DtnAddUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DtnAddUserResponse::message() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnAddUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DtnAddUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnAddUserResponse.message)
}
inline std::string* DtnAddUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DtnAddUserResponse.message)
  return _s;
}
inline const std::string& DtnAddUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DtnAddUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DtnAddUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DtnAddUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DtnAddUserResponse.message)
  return _impl_.message_.Release();
}
inline void DtnAddUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.dtn.DtnAddUserResponse.message)
}

// -------------------------------------------------------------------

// DtnRemoveUserRequest

// bytes user_id = 1;
inline void DtnRemoveUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& DtnRemoveUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnRemoveUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DtnRemoveUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnRemoveUserRequest.user_id)
}
inline std::string* DtnRemoveUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DtnRemoveUserRequest.user_id)
  return _s;
}
inline const std::string& DtnRemoveUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void DtnRemoveUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DtnRemoveUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DtnRemoveUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DtnRemoveUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void DtnRemoveUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.dtn.DtnRemoveUserRequest.user_id)
}

// -------------------------------------------------------------------

// DtnRemoveUserResponse

// bool status = 1;
inline void DtnRemoveUserResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool DtnRemoveUserResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool DtnRemoveUserResponse::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnRemoveUserResponse.status)
  return _internal_status();
}
inline void DtnRemoveUserResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void DtnRemoveUserResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnRemoveUserResponse.status)
}

// string message = 2;
inline void DtnRemoveUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DtnRemoveUserResponse::message() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnRemoveUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DtnRemoveUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnRemoveUserResponse.message)
}
inline std::string* DtnRemoveUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DtnRemoveUserResponse.message)
  return _s;
}
inline const std::string& DtnRemoveUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DtnRemoveUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DtnRemoveUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DtnRemoveUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DtnRemoveUserResponse.message)
  return _impl_.message_.Release();
}
inline void DtnRemoveUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.dtn.DtnRemoveUserResponse.message)
}

// -------------------------------------------------------------------

// DtnSetTotalSizeRequest

// uint32 total_size = 1;
inline void DtnSetTotalSizeRequest::clear_total_size() {
  _impl_.total_size_ = 0u;
}
inline uint32_t DtnSetTotalSizeRequest::_internal_total_size() const {
  return _impl_.total_size_;
}
inline uint32_t DtnSetTotalSizeRequest::total_size() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnSetTotalSizeRequest.total_size)
  return _internal_total_size();
}
inline void DtnSetTotalSizeRequest::_internal_set_total_size(uint32_t value) {
  
  _impl_.total_size_ = value;
}
inline void DtnSetTotalSizeRequest::set_total_size(uint32_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnSetTotalSizeRequest.total_size)
}

// -------------------------------------------------------------------

// DtnSetTotalSizeResponse

// bool status = 1;
inline void DtnSetTotalSizeResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool DtnSetTotalSizeResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool DtnSetTotalSizeResponse::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnSetTotalSizeResponse.status)
  return _internal_status();
}
inline void DtnSetTotalSizeResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void DtnSetTotalSizeResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnSetTotalSizeResponse.status)
}

// string message = 2;
inline void DtnSetTotalSizeResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DtnSetTotalSizeResponse::message() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.dtn.DtnSetTotalSizeResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DtnSetTotalSizeResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.dtn.DtnSetTotalSizeResponse.message)
}
inline std::string* DtnSetTotalSizeResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.dtn.DtnSetTotalSizeResponse.message)
  return _s;
}
inline const std::string& DtnSetTotalSizeResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DtnSetTotalSizeResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DtnSetTotalSizeResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DtnSetTotalSizeResponse::release_message() {
  // @@protoc_insertion_point(field_release:qaul.rpc.dtn.DtnSetTotalSizeResponse.message)
  return _impl_.message_.Release();
}
inline void DtnSetTotalSizeResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.dtn.DtnSetTotalSizeResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dtn
}  // namespace rpc
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fdtn_2fdtn_5frpc_2eproto
