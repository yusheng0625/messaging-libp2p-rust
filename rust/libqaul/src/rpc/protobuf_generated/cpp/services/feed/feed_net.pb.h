// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/feed/feed_net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2ffeed_2ffeed_5fnet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2ffeed_2ffeed_5fnet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2ffeed_2ffeed_5fnet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2ffeed_2ffeed_5fnet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto;
namespace qaul {
namespace net {
namespace feed {
class FeedContainer;
struct FeedContainerDefaultTypeInternal;
extern FeedContainerDefaultTypeInternal _FeedContainer_default_instance_;
class FeedMessageContent;
struct FeedMessageContentDefaultTypeInternal;
extern FeedMessageContentDefaultTypeInternal _FeedMessageContent_default_instance_;
}  // namespace feed
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::net::feed::FeedContainer* Arena::CreateMaybeMessage<::qaul::net::feed::FeedContainer>(Arena*);
template<> ::qaul::net::feed::FeedMessageContent* Arena::CreateMaybeMessage<::qaul::net::feed::FeedMessageContent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace net {
namespace feed {

// ===================================================================

class FeedContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.feed.FeedContainer) */ {
 public:
  inline FeedContainer() : FeedContainer(nullptr) {}
  ~FeedContainer() override;
  explicit PROTOBUF_CONSTEXPR FeedContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedContainer(const FeedContainer& from);
  FeedContainer(FeedContainer&& from) noexcept
    : FeedContainer() {
    *this = ::std::move(from);
  }

  inline FeedContainer& operator=(const FeedContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedContainer& operator=(FeedContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedContainer* internal_default_instance() {
    return reinterpret_cast<const FeedContainer*>(
               &_FeedContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeedContainer& a, FeedContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedContainer& from) {
    FeedContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.feed.FeedContainer";
  }
  protected:
  explicit FeedContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.feed.FeedContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffeed_2ffeed_5fnet_2eproto;
};
// -------------------------------------------------------------------

class FeedMessageContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.feed.FeedMessageContent) */ {
 public:
  inline FeedMessageContent() : FeedMessageContent(nullptr) {}
  ~FeedMessageContent() override;
  explicit PROTOBUF_CONSTEXPR FeedMessageContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedMessageContent(const FeedMessageContent& from);
  FeedMessageContent(FeedMessageContent&& from) noexcept
    : FeedMessageContent() {
    *this = ::std::move(from);
  }

  inline FeedMessageContent& operator=(const FeedMessageContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedMessageContent& operator=(FeedMessageContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedMessageContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedMessageContent* internal_default_instance() {
    return reinterpret_cast<const FeedMessageContent*>(
               &_FeedMessageContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeedMessageContent& a, FeedMessageContent& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedMessageContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedMessageContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedMessageContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedMessageContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedMessageContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedMessageContent& from) {
    FeedMessageContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedMessageContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.feed.FeedMessageContent";
  }
  protected:
  explicit FeedMessageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kContentFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // bytes sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 time = 3;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.feed.FeedMessageContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffeed_2ffeed_5fnet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeedContainer

// bytes signature = 1;
inline void FeedContainer::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& FeedContainer::signature() const {
  // @@protoc_insertion_point(field_get:qaul.net.feed.FeedContainer.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedContainer::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.feed.FeedContainer.signature)
}
inline std::string* FeedContainer::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:qaul.net.feed.FeedContainer.signature)
  return _s;
}
inline const std::string& FeedContainer::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void FeedContainer::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedContainer::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedContainer::release_signature() {
  // @@protoc_insertion_point(field_release:qaul.net.feed.FeedContainer.signature)
  return _impl_.signature_.Release();
}
inline void FeedContainer::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.feed.FeedContainer.signature)
}

// bytes message = 2;
inline void FeedContainer::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& FeedContainer::message() const {
  // @@protoc_insertion_point(field_get:qaul.net.feed.FeedContainer.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedContainer::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.feed.FeedContainer.message)
}
inline std::string* FeedContainer::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.feed.FeedContainer.message)
  return _s;
}
inline const std::string& FeedContainer::_internal_message() const {
  return _impl_.message_.Get();
}
inline void FeedContainer::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedContainer::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedContainer::release_message() {
  // @@protoc_insertion_point(field_release:qaul.net.feed.FeedContainer.message)
  return _impl_.message_.Release();
}
inline void FeedContainer::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.feed.FeedContainer.message)
}

// -------------------------------------------------------------------

// FeedMessageContent

// bytes sender = 1;
inline void FeedMessageContent::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& FeedMessageContent::sender() const {
  // @@protoc_insertion_point(field_get:qaul.net.feed.FeedMessageContent.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessageContent::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.feed.FeedMessageContent.sender)
}
inline std::string* FeedMessageContent::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:qaul.net.feed.FeedMessageContent.sender)
  return _s;
}
inline const std::string& FeedMessageContent::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void FeedMessageContent::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessageContent::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessageContent::release_sender() {
  // @@protoc_insertion_point(field_release:qaul.net.feed.FeedMessageContent.sender)
  return _impl_.sender_.Release();
}
inline void FeedMessageContent::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.feed.FeedMessageContent.sender)
}

// string content = 2;
inline void FeedMessageContent::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FeedMessageContent::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.feed.FeedMessageContent.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessageContent::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.feed.FeedMessageContent.content)
}
inline std::string* FeedMessageContent::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.feed.FeedMessageContent.content)
  return _s;
}
inline const std::string& FeedMessageContent::_internal_content() const {
  return _impl_.content_.Get();
}
inline void FeedMessageContent::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessageContent::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessageContent::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.feed.FeedMessageContent.content)
  return _impl_.content_.Release();
}
inline void FeedMessageContent::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.feed.FeedMessageContent.content)
}

// uint64 time = 3;
inline void FeedMessageContent::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t FeedMessageContent::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t FeedMessageContent::time() const {
  // @@protoc_insertion_point(field_get:qaul.net.feed.FeedMessageContent.time)
  return _internal_time();
}
inline void FeedMessageContent::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void FeedMessageContent::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:qaul.net.feed.FeedMessageContent.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feed
}  // namespace net
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2ffeed_2ffeed_5fnet_2eproto
