// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/feed/feed.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2ffeed_2ffeed_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2ffeed_2ffeed_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2ffeed_2ffeed_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2ffeed_2ffeed_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2ffeed_2ffeed_2eproto;
namespace qaul {
namespace rpc {
namespace feed {
class Feed;
struct FeedDefaultTypeInternal;
extern FeedDefaultTypeInternal _Feed_default_instance_;
class FeedMessage;
struct FeedMessageDefaultTypeInternal;
extern FeedMessageDefaultTypeInternal _FeedMessage_default_instance_;
class FeedMessageList;
struct FeedMessageListDefaultTypeInternal;
extern FeedMessageListDefaultTypeInternal _FeedMessageList_default_instance_;
class FeedMessageRequest;
struct FeedMessageRequestDefaultTypeInternal;
extern FeedMessageRequestDefaultTypeInternal _FeedMessageRequest_default_instance_;
class SendMessage;
struct SendMessageDefaultTypeInternal;
extern SendMessageDefaultTypeInternal _SendMessage_default_instance_;
}  // namespace feed
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::feed::Feed* Arena::CreateMaybeMessage<::qaul::rpc::feed::Feed>(Arena*);
template<> ::qaul::rpc::feed::FeedMessage* Arena::CreateMaybeMessage<::qaul::rpc::feed::FeedMessage>(Arena*);
template<> ::qaul::rpc::feed::FeedMessageList* Arena::CreateMaybeMessage<::qaul::rpc::feed::FeedMessageList>(Arena*);
template<> ::qaul::rpc::feed::FeedMessageRequest* Arena::CreateMaybeMessage<::qaul::rpc::feed::FeedMessageRequest>(Arena*);
template<> ::qaul::rpc::feed::SendMessage* Arena::CreateMaybeMessage<::qaul::rpc::feed::SendMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace feed {

// ===================================================================

class Feed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.feed.Feed) */ {
 public:
  inline Feed() : Feed(nullptr) {}
  ~Feed() override;
  explicit PROTOBUF_CONSTEXPR Feed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feed(const Feed& from);
  Feed(Feed&& from) noexcept
    : Feed() {
    *this = ::std::move(from);
  }

  inline Feed& operator=(const Feed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feed& operator=(Feed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feed& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kReceived = 1,
    kSend = 2,
    kRequest = 3,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Feed* internal_default_instance() {
    return reinterpret_cast<const Feed*>(
               &_Feed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Feed& a, Feed& b) {
    a.Swap(&b);
  }
  inline void Swap(Feed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Feed& from) {
    Feed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.feed.Feed";
  }
  protected:
  explicit Feed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedFieldNumber = 1,
    kSendFieldNumber = 2,
    kRequestFieldNumber = 3,
  };
  // .qaul.rpc.feed.FeedMessageList received = 1;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  const ::qaul::rpc::feed::FeedMessageList& received() const;
  PROTOBUF_NODISCARD ::qaul::rpc::feed::FeedMessageList* release_received();
  ::qaul::rpc::feed::FeedMessageList* mutable_received();
  void set_allocated_received(::qaul::rpc::feed::FeedMessageList* received);
  private:
  const ::qaul::rpc::feed::FeedMessageList& _internal_received() const;
  ::qaul::rpc::feed::FeedMessageList* _internal_mutable_received();
  public:
  void unsafe_arena_set_allocated_received(
      ::qaul::rpc::feed::FeedMessageList* received);
  ::qaul::rpc::feed::FeedMessageList* unsafe_arena_release_received();

  // .qaul.rpc.feed.SendMessage send = 2;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  const ::qaul::rpc::feed::SendMessage& send() const;
  PROTOBUF_NODISCARD ::qaul::rpc::feed::SendMessage* release_send();
  ::qaul::rpc::feed::SendMessage* mutable_send();
  void set_allocated_send(::qaul::rpc::feed::SendMessage* send);
  private:
  const ::qaul::rpc::feed::SendMessage& _internal_send() const;
  ::qaul::rpc::feed::SendMessage* _internal_mutable_send();
  public:
  void unsafe_arena_set_allocated_send(
      ::qaul::rpc::feed::SendMessage* send);
  ::qaul::rpc::feed::SendMessage* unsafe_arena_release_send();

  // .qaul.rpc.feed.FeedMessageRequest request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::qaul::rpc::feed::FeedMessageRequest& request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::feed::FeedMessageRequest* release_request();
  ::qaul::rpc::feed::FeedMessageRequest* mutable_request();
  void set_allocated_request(::qaul::rpc::feed::FeedMessageRequest* request);
  private:
  const ::qaul::rpc::feed::FeedMessageRequest& _internal_request() const;
  ::qaul::rpc::feed::FeedMessageRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::qaul::rpc::feed::FeedMessageRequest* request);
  ::qaul::rpc::feed::FeedMessageRequest* unsafe_arena_release_request();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.feed.Feed)
 private:
  class _Internal;
  void set_has_received();
  void set_has_send();
  void set_has_request();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::feed::FeedMessageList* received_;
      ::qaul::rpc::feed::SendMessage* send_;
      ::qaul::rpc::feed::FeedMessageRequest* request_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffeed_2ffeed_2eproto;
};
// -------------------------------------------------------------------

class FeedMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.feed.FeedMessageRequest) */ {
 public:
  inline FeedMessageRequest() : FeedMessageRequest(nullptr) {}
  ~FeedMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR FeedMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedMessageRequest(const FeedMessageRequest& from);
  FeedMessageRequest(FeedMessageRequest&& from) noexcept
    : FeedMessageRequest() {
    *this = ::std::move(from);
  }

  inline FeedMessageRequest& operator=(const FeedMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedMessageRequest& operator=(FeedMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedMessageRequest* internal_default_instance() {
    return reinterpret_cast<const FeedMessageRequest*>(
               &_FeedMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeedMessageRequest& a, FeedMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedMessageRequest& from) {
    FeedMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.feed.FeedMessageRequest";
  }
  protected:
  explicit FeedMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastReceivedFieldNumber = 1,
    kLastIndexFieldNumber = 2,
  };
  // bytes last_received = 1;
  void clear_last_received();
  const std::string& last_received() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_received(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_received();
  PROTOBUF_NODISCARD std::string* release_last_received();
  void set_allocated_last_received(std::string* last_received);
  private:
  const std::string& _internal_last_received() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_received(const std::string& value);
  std::string* _internal_mutable_last_received();
  public:

  // uint64 last_index = 2;
  void clear_last_index();
  uint64_t last_index() const;
  void set_last_index(uint64_t value);
  private:
  uint64_t _internal_last_index() const;
  void _internal_set_last_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.feed.FeedMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_received_;
    uint64_t last_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffeed_2ffeed_2eproto;
};
// -------------------------------------------------------------------

class FeedMessageList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.feed.FeedMessageList) */ {
 public:
  inline FeedMessageList() : FeedMessageList(nullptr) {}
  ~FeedMessageList() override;
  explicit PROTOBUF_CONSTEXPR FeedMessageList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedMessageList(const FeedMessageList& from);
  FeedMessageList(FeedMessageList&& from) noexcept
    : FeedMessageList() {
    *this = ::std::move(from);
  }

  inline FeedMessageList& operator=(const FeedMessageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedMessageList& operator=(FeedMessageList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedMessageList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedMessageList* internal_default_instance() {
    return reinterpret_cast<const FeedMessageList*>(
               &_FeedMessageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeedMessageList& a, FeedMessageList& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedMessageList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedMessageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedMessageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedMessageList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedMessageList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedMessageList& from) {
    FeedMessageList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedMessageList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.feed.FeedMessageList";
  }
  protected:
  explicit FeedMessageList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedMessageFieldNumber = 1,
  };
  // repeated .qaul.rpc.feed.FeedMessage feed_message = 1;
  int feed_message_size() const;
  private:
  int _internal_feed_message_size() const;
  public:
  void clear_feed_message();
  ::qaul::rpc::feed::FeedMessage* mutable_feed_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::feed::FeedMessage >*
      mutable_feed_message();
  private:
  const ::qaul::rpc::feed::FeedMessage& _internal_feed_message(int index) const;
  ::qaul::rpc::feed::FeedMessage* _internal_add_feed_message();
  public:
  const ::qaul::rpc::feed::FeedMessage& feed_message(int index) const;
  ::qaul::rpc::feed::FeedMessage* add_feed_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::feed::FeedMessage >&
      feed_message() const;

  // @@protoc_insertion_point(class_scope:qaul.rpc.feed.FeedMessageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::feed::FeedMessage > feed_message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffeed_2ffeed_2eproto;
};
// -------------------------------------------------------------------

class FeedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.feed.FeedMessage) */ {
 public:
  inline FeedMessage() : FeedMessage(nullptr) {}
  ~FeedMessage() override;
  explicit PROTOBUF_CONSTEXPR FeedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedMessage(const FeedMessage& from);
  FeedMessage(FeedMessage&& from) noexcept
    : FeedMessage() {
    *this = ::std::move(from);
  }

  inline FeedMessage& operator=(const FeedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedMessage& operator=(FeedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedMessage* internal_default_instance() {
    return reinterpret_cast<const FeedMessage*>(
               &_FeedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FeedMessage& a, FeedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedMessage& from) {
    FeedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.feed.FeedMessage";
  }
  protected:
  explicit FeedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kSenderIdBase58FieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kMessageIdBase58FieldNumber = 4,
    kTimeSentFieldNumber = 5,
    kTimeReceivedFieldNumber = 6,
    kContentFieldNumber = 7,
    kIndexFieldNumber = 8,
    kTimestampSentFieldNumber = 9,
    kTimestampReceivedFieldNumber = 10,
  };
  // bytes sender_id = 1;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string sender_id_base58 = 2;
  void clear_sender_id_base58();
  const std::string& sender_id_base58() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id_base58(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id_base58();
  PROTOBUF_NODISCARD std::string* release_sender_id_base58();
  void set_allocated_sender_id_base58(std::string* sender_id_base58);
  private:
  const std::string& _internal_sender_id_base58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id_base58(const std::string& value);
  std::string* _internal_mutable_sender_id_base58();
  public:

  // bytes message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string message_id_base58 = 4;
  void clear_message_id_base58();
  const std::string& message_id_base58() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id_base58(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id_base58();
  PROTOBUF_NODISCARD std::string* release_message_id_base58();
  void set_allocated_message_id_base58(std::string* message_id_base58);
  private:
  const std::string& _internal_message_id_base58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id_base58(const std::string& value);
  std::string* _internal_mutable_message_id_base58();
  public:

  // string time_sent = 5;
  void clear_time_sent();
  const std::string& time_sent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_sent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_sent();
  PROTOBUF_NODISCARD std::string* release_time_sent();
  void set_allocated_time_sent(std::string* time_sent);
  private:
  const std::string& _internal_time_sent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_sent(const std::string& value);
  std::string* _internal_mutable_time_sent();
  public:

  // string time_received = 6;
  void clear_time_received();
  const std::string& time_received() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_received(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_received();
  PROTOBUF_NODISCARD std::string* release_time_received();
  void set_allocated_time_received(std::string* time_received);
  private:
  const std::string& _internal_time_received() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_received(const std::string& value);
  std::string* _internal_mutable_time_received();
  public:

  // string content = 7;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 index = 8;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint64 timestamp_sent = 9;
  void clear_timestamp_sent();
  uint64_t timestamp_sent() const;
  void set_timestamp_sent(uint64_t value);
  private:
  uint64_t _internal_timestamp_sent() const;
  void _internal_set_timestamp_sent(uint64_t value);
  public:

  // uint64 timestamp_received = 10;
  void clear_timestamp_received();
  uint64_t timestamp_received() const;
  void set_timestamp_received(uint64_t value);
  private:
  uint64_t _internal_timestamp_received() const;
  void _internal_set_timestamp_received(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.feed.FeedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_base58_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_base58_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_sent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_received_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t index_;
    uint64_t timestamp_sent_;
    uint64_t timestamp_received_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffeed_2ffeed_2eproto;
};
// -------------------------------------------------------------------

class SendMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.feed.SendMessage) */ {
 public:
  inline SendMessage() : SendMessage(nullptr) {}
  ~SendMessage() override;
  explicit PROTOBUF_CONSTEXPR SendMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessage(const SendMessage& from);
  SendMessage(SendMessage&& from) noexcept
    : SendMessage() {
    *this = ::std::move(from);
  }

  inline SendMessage& operator=(const SendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessage& operator=(SendMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessage* internal_default_instance() {
    return reinterpret_cast<const SendMessage*>(
               &_SendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendMessage& a, SendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessage& from) {
    SendMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.feed.SendMessage";
  }
  protected:
  explicit SendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.feed.SendMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffeed_2ffeed_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Feed

// .qaul.rpc.feed.FeedMessageList received = 1;
inline bool Feed::_internal_has_received() const {
  return message_case() == kReceived;
}
inline bool Feed::has_received() const {
  return _internal_has_received();
}
inline void Feed::set_has_received() {
  _impl_._oneof_case_[0] = kReceived;
}
inline void Feed::clear_received() {
  if (_internal_has_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.received_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::feed::FeedMessageList* Feed::release_received() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.Feed.received)
  if (_internal_has_received()) {
    clear_has_message();
    ::qaul::rpc::feed::FeedMessageList* temp = _impl_.message_.received_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::feed::FeedMessageList& Feed::_internal_received() const {
  return _internal_has_received()
      ? *_impl_.message_.received_
      : reinterpret_cast< ::qaul::rpc::feed::FeedMessageList&>(::qaul::rpc::feed::_FeedMessageList_default_instance_);
}
inline const ::qaul::rpc::feed::FeedMessageList& Feed::received() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.Feed.received)
  return _internal_received();
}
inline ::qaul::rpc::feed::FeedMessageList* Feed::unsafe_arena_release_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.feed.Feed.received)
  if (_internal_has_received()) {
    clear_has_message();
    ::qaul::rpc::feed::FeedMessageList* temp = _impl_.message_.received_;
    _impl_.message_.received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feed::unsafe_arena_set_allocated_received(::qaul::rpc::feed::FeedMessageList* received) {
  clear_message();
  if (received) {
    set_has_received();
    _impl_.message_.received_ = received;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.feed.Feed.received)
}
inline ::qaul::rpc::feed::FeedMessageList* Feed::_internal_mutable_received() {
  if (!_internal_has_received()) {
    clear_message();
    set_has_received();
    _impl_.message_.received_ = CreateMaybeMessage< ::qaul::rpc::feed::FeedMessageList >(GetArenaForAllocation());
  }
  return _impl_.message_.received_;
}
inline ::qaul::rpc::feed::FeedMessageList* Feed::mutable_received() {
  ::qaul::rpc::feed::FeedMessageList* _msg = _internal_mutable_received();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.Feed.received)
  return _msg;
}

// .qaul.rpc.feed.SendMessage send = 2;
inline bool Feed::_internal_has_send() const {
  return message_case() == kSend;
}
inline bool Feed::has_send() const {
  return _internal_has_send();
}
inline void Feed::set_has_send() {
  _impl_._oneof_case_[0] = kSend;
}
inline void Feed::clear_send() {
  if (_internal_has_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::feed::SendMessage* Feed::release_send() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.Feed.send)
  if (_internal_has_send()) {
    clear_has_message();
    ::qaul::rpc::feed::SendMessage* temp = _impl_.message_.send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::feed::SendMessage& Feed::_internal_send() const {
  return _internal_has_send()
      ? *_impl_.message_.send_
      : reinterpret_cast< ::qaul::rpc::feed::SendMessage&>(::qaul::rpc::feed::_SendMessage_default_instance_);
}
inline const ::qaul::rpc::feed::SendMessage& Feed::send() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.Feed.send)
  return _internal_send();
}
inline ::qaul::rpc::feed::SendMessage* Feed::unsafe_arena_release_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.feed.Feed.send)
  if (_internal_has_send()) {
    clear_has_message();
    ::qaul::rpc::feed::SendMessage* temp = _impl_.message_.send_;
    _impl_.message_.send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feed::unsafe_arena_set_allocated_send(::qaul::rpc::feed::SendMessage* send) {
  clear_message();
  if (send) {
    set_has_send();
    _impl_.message_.send_ = send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.feed.Feed.send)
}
inline ::qaul::rpc::feed::SendMessage* Feed::_internal_mutable_send() {
  if (!_internal_has_send()) {
    clear_message();
    set_has_send();
    _impl_.message_.send_ = CreateMaybeMessage< ::qaul::rpc::feed::SendMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.send_;
}
inline ::qaul::rpc::feed::SendMessage* Feed::mutable_send() {
  ::qaul::rpc::feed::SendMessage* _msg = _internal_mutable_send();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.Feed.send)
  return _msg;
}

// .qaul.rpc.feed.FeedMessageRequest request = 3;
inline bool Feed::_internal_has_request() const {
  return message_case() == kRequest;
}
inline bool Feed::has_request() const {
  return _internal_has_request();
}
inline void Feed::set_has_request() {
  _impl_._oneof_case_[0] = kRequest;
}
inline void Feed::clear_request() {
  if (_internal_has_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::feed::FeedMessageRequest* Feed::release_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.Feed.request)
  if (_internal_has_request()) {
    clear_has_message();
    ::qaul::rpc::feed::FeedMessageRequest* temp = _impl_.message_.request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::feed::FeedMessageRequest& Feed::_internal_request() const {
  return _internal_has_request()
      ? *_impl_.message_.request_
      : reinterpret_cast< ::qaul::rpc::feed::FeedMessageRequest&>(::qaul::rpc::feed::_FeedMessageRequest_default_instance_);
}
inline const ::qaul::rpc::feed::FeedMessageRequest& Feed::request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.Feed.request)
  return _internal_request();
}
inline ::qaul::rpc::feed::FeedMessageRequest* Feed::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.feed.Feed.request)
  if (_internal_has_request()) {
    clear_has_message();
    ::qaul::rpc::feed::FeedMessageRequest* temp = _impl_.message_.request_;
    _impl_.message_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feed::unsafe_arena_set_allocated_request(::qaul::rpc::feed::FeedMessageRequest* request) {
  clear_message();
  if (request) {
    set_has_request();
    _impl_.message_.request_ = request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.feed.Feed.request)
}
inline ::qaul::rpc::feed::FeedMessageRequest* Feed::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_message();
    set_has_request();
    _impl_.message_.request_ = CreateMaybeMessage< ::qaul::rpc::feed::FeedMessageRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.request_;
}
inline ::qaul::rpc::feed::FeedMessageRequest* Feed::mutable_request() {
  ::qaul::rpc::feed::FeedMessageRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.Feed.request)
  return _msg;
}

inline bool Feed::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Feed::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Feed::MessageCase Feed::message_case() const {
  return Feed::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FeedMessageRequest

// bytes last_received = 1;
inline void FeedMessageRequest::clear_last_received() {
  _impl_.last_received_.ClearToEmpty();
}
inline const std::string& FeedMessageRequest::last_received() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessageRequest.last_received)
  return _internal_last_received();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessageRequest::set_last_received(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_received_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessageRequest.last_received)
}
inline std::string* FeedMessageRequest::mutable_last_received() {
  std::string* _s = _internal_mutable_last_received();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessageRequest.last_received)
  return _s;
}
inline const std::string& FeedMessageRequest::_internal_last_received() const {
  return _impl_.last_received_.Get();
}
inline void FeedMessageRequest::_internal_set_last_received(const std::string& value) {
  
  _impl_.last_received_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessageRequest::_internal_mutable_last_received() {
  
  return _impl_.last_received_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessageRequest::release_last_received() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessageRequest.last_received)
  return _impl_.last_received_.Release();
}
inline void FeedMessageRequest::set_allocated_last_received(std::string* last_received) {
  if (last_received != nullptr) {
    
  } else {
    
  }
  _impl_.last_received_.SetAllocated(last_received, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_received_.IsDefault()) {
    _impl_.last_received_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessageRequest.last_received)
}

// uint64 last_index = 2;
inline void FeedMessageRequest::clear_last_index() {
  _impl_.last_index_ = uint64_t{0u};
}
inline uint64_t FeedMessageRequest::_internal_last_index() const {
  return _impl_.last_index_;
}
inline uint64_t FeedMessageRequest::last_index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessageRequest.last_index)
  return _internal_last_index();
}
inline void FeedMessageRequest::_internal_set_last_index(uint64_t value) {
  
  _impl_.last_index_ = value;
}
inline void FeedMessageRequest::set_last_index(uint64_t value) {
  _internal_set_last_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessageRequest.last_index)
}

// -------------------------------------------------------------------

// FeedMessageList

// repeated .qaul.rpc.feed.FeedMessage feed_message = 1;
inline int FeedMessageList::_internal_feed_message_size() const {
  return _impl_.feed_message_.size();
}
inline int FeedMessageList::feed_message_size() const {
  return _internal_feed_message_size();
}
inline void FeedMessageList::clear_feed_message() {
  _impl_.feed_message_.Clear();
}
inline ::qaul::rpc::feed::FeedMessage* FeedMessageList::mutable_feed_message(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessageList.feed_message)
  return _impl_.feed_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::feed::FeedMessage >*
FeedMessageList::mutable_feed_message() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.feed.FeedMessageList.feed_message)
  return &_impl_.feed_message_;
}
inline const ::qaul::rpc::feed::FeedMessage& FeedMessageList::_internal_feed_message(int index) const {
  return _impl_.feed_message_.Get(index);
}
inline const ::qaul::rpc::feed::FeedMessage& FeedMessageList::feed_message(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessageList.feed_message)
  return _internal_feed_message(index);
}
inline ::qaul::rpc::feed::FeedMessage* FeedMessageList::_internal_add_feed_message() {
  return _impl_.feed_message_.Add();
}
inline ::qaul::rpc::feed::FeedMessage* FeedMessageList::add_feed_message() {
  ::qaul::rpc::feed::FeedMessage* _add = _internal_add_feed_message();
  // @@protoc_insertion_point(field_add:qaul.rpc.feed.FeedMessageList.feed_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::feed::FeedMessage >&
FeedMessageList::feed_message() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.feed.FeedMessageList.feed_message)
  return _impl_.feed_message_;
}

// -------------------------------------------------------------------

// FeedMessage

// bytes sender_id = 1;
inline void FeedMessage::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& FeedMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessage::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.sender_id)
}
inline std::string* FeedMessage::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessage.sender_id)
  return _s;
}
inline const std::string& FeedMessage::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void FeedMessage::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessage::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessage::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessage.sender_id)
  return _impl_.sender_id_.Release();
}
inline void FeedMessage::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessage.sender_id)
}

// string sender_id_base58 = 2;
inline void FeedMessage::clear_sender_id_base58() {
  _impl_.sender_id_base58_.ClearToEmpty();
}
inline const std::string& FeedMessage::sender_id_base58() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.sender_id_base58)
  return _internal_sender_id_base58();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessage::set_sender_id_base58(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_base58_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.sender_id_base58)
}
inline std::string* FeedMessage::mutable_sender_id_base58() {
  std::string* _s = _internal_mutable_sender_id_base58();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessage.sender_id_base58)
  return _s;
}
inline const std::string& FeedMessage::_internal_sender_id_base58() const {
  return _impl_.sender_id_base58_.Get();
}
inline void FeedMessage::_internal_set_sender_id_base58(const std::string& value) {
  
  _impl_.sender_id_base58_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessage::_internal_mutable_sender_id_base58() {
  
  return _impl_.sender_id_base58_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessage::release_sender_id_base58() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessage.sender_id_base58)
  return _impl_.sender_id_base58_.Release();
}
inline void FeedMessage::set_allocated_sender_id_base58(std::string* sender_id_base58) {
  if (sender_id_base58 != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_base58_.SetAllocated(sender_id_base58, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_base58_.IsDefault()) {
    _impl_.sender_id_base58_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessage.sender_id_base58)
}

// bytes message_id = 3;
inline void FeedMessage::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& FeedMessage::message_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessage::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.message_id)
}
inline std::string* FeedMessage::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessage.message_id)
  return _s;
}
inline const std::string& FeedMessage::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void FeedMessage::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessage::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessage.message_id)
  return _impl_.message_id_.Release();
}
inline void FeedMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessage.message_id)
}

// string message_id_base58 = 4;
inline void FeedMessage::clear_message_id_base58() {
  _impl_.message_id_base58_.ClearToEmpty();
}
inline const std::string& FeedMessage::message_id_base58() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.message_id_base58)
  return _internal_message_id_base58();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessage::set_message_id_base58(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_base58_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.message_id_base58)
}
inline std::string* FeedMessage::mutable_message_id_base58() {
  std::string* _s = _internal_mutable_message_id_base58();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessage.message_id_base58)
  return _s;
}
inline const std::string& FeedMessage::_internal_message_id_base58() const {
  return _impl_.message_id_base58_.Get();
}
inline void FeedMessage::_internal_set_message_id_base58(const std::string& value) {
  
  _impl_.message_id_base58_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessage::_internal_mutable_message_id_base58() {
  
  return _impl_.message_id_base58_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessage::release_message_id_base58() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessage.message_id_base58)
  return _impl_.message_id_base58_.Release();
}
inline void FeedMessage::set_allocated_message_id_base58(std::string* message_id_base58) {
  if (message_id_base58 != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_base58_.SetAllocated(message_id_base58, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_base58_.IsDefault()) {
    _impl_.message_id_base58_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessage.message_id_base58)
}

// string time_sent = 5;
inline void FeedMessage::clear_time_sent() {
  _impl_.time_sent_.ClearToEmpty();
}
inline const std::string& FeedMessage::time_sent() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.time_sent)
  return _internal_time_sent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessage::set_time_sent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_sent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.time_sent)
}
inline std::string* FeedMessage::mutable_time_sent() {
  std::string* _s = _internal_mutable_time_sent();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessage.time_sent)
  return _s;
}
inline const std::string& FeedMessage::_internal_time_sent() const {
  return _impl_.time_sent_.Get();
}
inline void FeedMessage::_internal_set_time_sent(const std::string& value) {
  
  _impl_.time_sent_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessage::_internal_mutable_time_sent() {
  
  return _impl_.time_sent_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessage::release_time_sent() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessage.time_sent)
  return _impl_.time_sent_.Release();
}
inline void FeedMessage::set_allocated_time_sent(std::string* time_sent) {
  if (time_sent != nullptr) {
    
  } else {
    
  }
  _impl_.time_sent_.SetAllocated(time_sent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_sent_.IsDefault()) {
    _impl_.time_sent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessage.time_sent)
}

// uint64 timestamp_sent = 9;
inline void FeedMessage::clear_timestamp_sent() {
  _impl_.timestamp_sent_ = uint64_t{0u};
}
inline uint64_t FeedMessage::_internal_timestamp_sent() const {
  return _impl_.timestamp_sent_;
}
inline uint64_t FeedMessage::timestamp_sent() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.timestamp_sent)
  return _internal_timestamp_sent();
}
inline void FeedMessage::_internal_set_timestamp_sent(uint64_t value) {
  
  _impl_.timestamp_sent_ = value;
}
inline void FeedMessage::set_timestamp_sent(uint64_t value) {
  _internal_set_timestamp_sent(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.timestamp_sent)
}

// string time_received = 6;
inline void FeedMessage::clear_time_received() {
  _impl_.time_received_.ClearToEmpty();
}
inline const std::string& FeedMessage::time_received() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.time_received)
  return _internal_time_received();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessage::set_time_received(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_received_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.time_received)
}
inline std::string* FeedMessage::mutable_time_received() {
  std::string* _s = _internal_mutable_time_received();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessage.time_received)
  return _s;
}
inline const std::string& FeedMessage::_internal_time_received() const {
  return _impl_.time_received_.Get();
}
inline void FeedMessage::_internal_set_time_received(const std::string& value) {
  
  _impl_.time_received_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessage::_internal_mutable_time_received() {
  
  return _impl_.time_received_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessage::release_time_received() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessage.time_received)
  return _impl_.time_received_.Release();
}
inline void FeedMessage::set_allocated_time_received(std::string* time_received) {
  if (time_received != nullptr) {
    
  } else {
    
  }
  _impl_.time_received_.SetAllocated(time_received, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_received_.IsDefault()) {
    _impl_.time_received_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessage.time_received)
}

// uint64 timestamp_received = 10;
inline void FeedMessage::clear_timestamp_received() {
  _impl_.timestamp_received_ = uint64_t{0u};
}
inline uint64_t FeedMessage::_internal_timestamp_received() const {
  return _impl_.timestamp_received_;
}
inline uint64_t FeedMessage::timestamp_received() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.timestamp_received)
  return _internal_timestamp_received();
}
inline void FeedMessage::_internal_set_timestamp_received(uint64_t value) {
  
  _impl_.timestamp_received_ = value;
}
inline void FeedMessage::set_timestamp_received(uint64_t value) {
  _internal_set_timestamp_received(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.timestamp_received)
}

// string content = 7;
inline void FeedMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FeedMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeedMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.content)
}
inline std::string* FeedMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.FeedMessage.content)
  return _s;
}
inline const std::string& FeedMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void FeedMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* FeedMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.FeedMessage.content)
  return _impl_.content_.Release();
}
inline void FeedMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.FeedMessage.content)
}

// uint64 index = 8;
inline void FeedMessage::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t FeedMessage::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t FeedMessage::index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.FeedMessage.index)
  return _internal_index();
}
inline void FeedMessage::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void FeedMessage::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.FeedMessage.index)
}

// -------------------------------------------------------------------

// SendMessage

// string content = 1;
inline void SendMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SendMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.feed.SendMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.feed.SendMessage.content)
}
inline std::string* SendMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.feed.SendMessage.content)
  return _s;
}
inline const std::string& SendMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void SendMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* SendMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* SendMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.feed.SendMessage.content)
  return _impl_.content_.Release();
}
inline void SendMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.feed.SendMessage.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feed
}  // namespace rpc
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2ffeed_2ffeed_2eproto
