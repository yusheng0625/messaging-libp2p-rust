// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/user_accounts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fuser_5faccounts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fuser_5faccounts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fuser_5faccounts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fuser_5faccounts_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fuser_5faccounts_2eproto;
namespace qaul {
namespace rpc {
namespace user_accounts {
class CreateUserAccount;
struct CreateUserAccountDefaultTypeInternal;
extern CreateUserAccountDefaultTypeInternal _CreateUserAccount_default_instance_;
class DefaultUserAccount;
struct DefaultUserAccountDefaultTypeInternal;
extern DefaultUserAccountDefaultTypeInternal _DefaultUserAccount_default_instance_;
class MyUserAccount;
struct MyUserAccountDefaultTypeInternal;
extern MyUserAccountDefaultTypeInternal _MyUserAccount_default_instance_;
class UserAccounts;
struct UserAccountsDefaultTypeInternal;
extern UserAccountsDefaultTypeInternal _UserAccounts_default_instance_;
}  // namespace user_accounts
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::user_accounts::CreateUserAccount* Arena::CreateMaybeMessage<::qaul::rpc::user_accounts::CreateUserAccount>(Arena*);
template<> ::qaul::rpc::user_accounts::DefaultUserAccount* Arena::CreateMaybeMessage<::qaul::rpc::user_accounts::DefaultUserAccount>(Arena*);
template<> ::qaul::rpc::user_accounts::MyUserAccount* Arena::CreateMaybeMessage<::qaul::rpc::user_accounts::MyUserAccount>(Arena*);
template<> ::qaul::rpc::user_accounts::UserAccounts* Arena::CreateMaybeMessage<::qaul::rpc::user_accounts::UserAccounts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace user_accounts {

// ===================================================================

class UserAccounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.user_accounts.UserAccounts) */ {
 public:
  inline UserAccounts() : UserAccounts(nullptr) {}
  ~UserAccounts() override;
  explicit PROTOBUF_CONSTEXPR UserAccounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserAccounts(const UserAccounts& from);
  UserAccounts(UserAccounts&& from) noexcept
    : UserAccounts() {
    *this = ::std::move(from);
  }

  inline UserAccounts& operator=(const UserAccounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAccounts& operator=(UserAccounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAccounts& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kGetDefaultUserAccount = 1,
    kCreateUserAccount = 2,
    kDefaultUserAccount = 3,
    kMyUserAccount = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const UserAccounts* internal_default_instance() {
    return reinterpret_cast<const UserAccounts*>(
               &_UserAccounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserAccounts& a, UserAccounts& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAccounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAccounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserAccounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserAccounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserAccounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserAccounts& from) {
    UserAccounts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAccounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.user_accounts.UserAccounts";
  }
  protected:
  explicit UserAccounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetDefaultUserAccountFieldNumber = 1,
    kCreateUserAccountFieldNumber = 2,
    kDefaultUserAccountFieldNumber = 3,
    kMyUserAccountFieldNumber = 4,
  };
  // bool get_default_user_account = 1;
  bool has_get_default_user_account() const;
  private:
  bool _internal_has_get_default_user_account() const;
  public:
  void clear_get_default_user_account();
  bool get_default_user_account() const;
  void set_get_default_user_account(bool value);
  private:
  bool _internal_get_default_user_account() const;
  void _internal_set_get_default_user_account(bool value);
  public:

  // .qaul.rpc.user_accounts.CreateUserAccount create_user_account = 2;
  bool has_create_user_account() const;
  private:
  bool _internal_has_create_user_account() const;
  public:
  void clear_create_user_account();
  const ::qaul::rpc::user_accounts::CreateUserAccount& create_user_account() const;
  PROTOBUF_NODISCARD ::qaul::rpc::user_accounts::CreateUserAccount* release_create_user_account();
  ::qaul::rpc::user_accounts::CreateUserAccount* mutable_create_user_account();
  void set_allocated_create_user_account(::qaul::rpc::user_accounts::CreateUserAccount* create_user_account);
  private:
  const ::qaul::rpc::user_accounts::CreateUserAccount& _internal_create_user_account() const;
  ::qaul::rpc::user_accounts::CreateUserAccount* _internal_mutable_create_user_account();
  public:
  void unsafe_arena_set_allocated_create_user_account(
      ::qaul::rpc::user_accounts::CreateUserAccount* create_user_account);
  ::qaul::rpc::user_accounts::CreateUserAccount* unsafe_arena_release_create_user_account();

  // .qaul.rpc.user_accounts.DefaultUserAccount default_user_account = 3;
  bool has_default_user_account() const;
  private:
  bool _internal_has_default_user_account() const;
  public:
  void clear_default_user_account();
  const ::qaul::rpc::user_accounts::DefaultUserAccount& default_user_account() const;
  PROTOBUF_NODISCARD ::qaul::rpc::user_accounts::DefaultUserAccount* release_default_user_account();
  ::qaul::rpc::user_accounts::DefaultUserAccount* mutable_default_user_account();
  void set_allocated_default_user_account(::qaul::rpc::user_accounts::DefaultUserAccount* default_user_account);
  private:
  const ::qaul::rpc::user_accounts::DefaultUserAccount& _internal_default_user_account() const;
  ::qaul::rpc::user_accounts::DefaultUserAccount* _internal_mutable_default_user_account();
  public:
  void unsafe_arena_set_allocated_default_user_account(
      ::qaul::rpc::user_accounts::DefaultUserAccount* default_user_account);
  ::qaul::rpc::user_accounts::DefaultUserAccount* unsafe_arena_release_default_user_account();

  // .qaul.rpc.user_accounts.MyUserAccount my_user_account = 4;
  bool has_my_user_account() const;
  private:
  bool _internal_has_my_user_account() const;
  public:
  void clear_my_user_account();
  const ::qaul::rpc::user_accounts::MyUserAccount& my_user_account() const;
  PROTOBUF_NODISCARD ::qaul::rpc::user_accounts::MyUserAccount* release_my_user_account();
  ::qaul::rpc::user_accounts::MyUserAccount* mutable_my_user_account();
  void set_allocated_my_user_account(::qaul::rpc::user_accounts::MyUserAccount* my_user_account);
  private:
  const ::qaul::rpc::user_accounts::MyUserAccount& _internal_my_user_account() const;
  ::qaul::rpc::user_accounts::MyUserAccount* _internal_mutable_my_user_account();
  public:
  void unsafe_arena_set_allocated_my_user_account(
      ::qaul::rpc::user_accounts::MyUserAccount* my_user_account);
  ::qaul::rpc::user_accounts::MyUserAccount* unsafe_arena_release_my_user_account();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.user_accounts.UserAccounts)
 private:
  class _Internal;
  void set_has_get_default_user_account();
  void set_has_create_user_account();
  void set_has_default_user_account();
  void set_has_my_user_account();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool get_default_user_account_;
      ::qaul::rpc::user_accounts::CreateUserAccount* create_user_account_;
      ::qaul::rpc::user_accounts::DefaultUserAccount* default_user_account_;
      ::qaul::rpc::user_accounts::MyUserAccount* my_user_account_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2fuser_5faccounts_2eproto;
};
// -------------------------------------------------------------------

class CreateUserAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.user_accounts.CreateUserAccount) */ {
 public:
  inline CreateUserAccount() : CreateUserAccount(nullptr) {}
  ~CreateUserAccount() override;
  explicit PROTOBUF_CONSTEXPR CreateUserAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserAccount(const CreateUserAccount& from);
  CreateUserAccount(CreateUserAccount&& from) noexcept
    : CreateUserAccount() {
    *this = ::std::move(from);
  }

  inline CreateUserAccount& operator=(const CreateUserAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserAccount& operator=(CreateUserAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserAccount* internal_default_instance() {
    return reinterpret_cast<const CreateUserAccount*>(
               &_CreateUserAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateUserAccount& a, CreateUserAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUserAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUserAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateUserAccount& from) {
    CreateUserAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.user_accounts.CreateUserAccount";
  }
  protected:
  explicit CreateUserAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.user_accounts.CreateUserAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2fuser_5faccounts_2eproto;
};
// -------------------------------------------------------------------

class DefaultUserAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.user_accounts.DefaultUserAccount) */ {
 public:
  inline DefaultUserAccount() : DefaultUserAccount(nullptr) {}
  ~DefaultUserAccount() override;
  explicit PROTOBUF_CONSTEXPR DefaultUserAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DefaultUserAccount(const DefaultUserAccount& from);
  DefaultUserAccount(DefaultUserAccount&& from) noexcept
    : DefaultUserAccount() {
    *this = ::std::move(from);
  }

  inline DefaultUserAccount& operator=(const DefaultUserAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultUserAccount& operator=(DefaultUserAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultUserAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultUserAccount* internal_default_instance() {
    return reinterpret_cast<const DefaultUserAccount*>(
               &_DefaultUserAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DefaultUserAccount& a, DefaultUserAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultUserAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultUserAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultUserAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DefaultUserAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DefaultUserAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DefaultUserAccount& from) {
    DefaultUserAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultUserAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.user_accounts.DefaultUserAccount";
  }
  protected:
  explicit DefaultUserAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyUserAccountFieldNumber = 2,
    kUserAccountExistsFieldNumber = 1,
  };
  // .qaul.rpc.user_accounts.MyUserAccount my_user_account = 2;
  bool has_my_user_account() const;
  private:
  bool _internal_has_my_user_account() const;
  public:
  void clear_my_user_account();
  const ::qaul::rpc::user_accounts::MyUserAccount& my_user_account() const;
  PROTOBUF_NODISCARD ::qaul::rpc::user_accounts::MyUserAccount* release_my_user_account();
  ::qaul::rpc::user_accounts::MyUserAccount* mutable_my_user_account();
  void set_allocated_my_user_account(::qaul::rpc::user_accounts::MyUserAccount* my_user_account);
  private:
  const ::qaul::rpc::user_accounts::MyUserAccount& _internal_my_user_account() const;
  ::qaul::rpc::user_accounts::MyUserAccount* _internal_mutable_my_user_account();
  public:
  void unsafe_arena_set_allocated_my_user_account(
      ::qaul::rpc::user_accounts::MyUserAccount* my_user_account);
  ::qaul::rpc::user_accounts::MyUserAccount* unsafe_arena_release_my_user_account();

  // bool user_account_exists = 1;
  void clear_user_account_exists();
  bool user_account_exists() const;
  void set_user_account_exists(bool value);
  private:
  bool _internal_user_account_exists() const;
  void _internal_set_user_account_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.user_accounts.DefaultUserAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::qaul::rpc::user_accounts::MyUserAccount* my_user_account_;
    bool user_account_exists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2fuser_5faccounts_2eproto;
};
// -------------------------------------------------------------------

class MyUserAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.user_accounts.MyUserAccount) */ {
 public:
  inline MyUserAccount() : MyUserAccount(nullptr) {}
  ~MyUserAccount() override;
  explicit PROTOBUF_CONSTEXPR MyUserAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyUserAccount(const MyUserAccount& from);
  MyUserAccount(MyUserAccount&& from) noexcept
    : MyUserAccount() {
    *this = ::std::move(from);
  }

  inline MyUserAccount& operator=(const MyUserAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyUserAccount& operator=(MyUserAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyUserAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyUserAccount* internal_default_instance() {
    return reinterpret_cast<const MyUserAccount*>(
               &_MyUserAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MyUserAccount& a, MyUserAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(MyUserAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyUserAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyUserAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyUserAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MyUserAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MyUserAccount& from) {
    MyUserAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyUserAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.user_accounts.MyUserAccount";
  }
  protected:
  explicit MyUserAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kIdBase58FieldNumber = 3,
    kKeyFieldNumber = 4,
    kKeyTypeFieldNumber = 5,
    kKeyBase58FieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string id_base58 = 3;
  void clear_id_base58();
  const std::string& id_base58() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_base58(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_base58();
  PROTOBUF_NODISCARD std::string* release_id_base58();
  void set_allocated_id_base58(std::string* id_base58);
  private:
  const std::string& _internal_id_base58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_base58(const std::string& value);
  std::string* _internal_mutable_id_base58();
  public:

  // bytes key = 4;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string key_type = 5;
  void clear_key_type();
  const std::string& key_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_type();
  PROTOBUF_NODISCARD std::string* release_key_type();
  void set_allocated_key_type(std::string* key_type);
  private:
  const std::string& _internal_key_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_type(const std::string& value);
  std::string* _internal_mutable_key_type();
  public:

  // string key_base58 = 6;
  void clear_key_base58();
  const std::string& key_base58() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_base58(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_base58();
  PROTOBUF_NODISCARD std::string* release_key_base58();
  void set_allocated_key_base58(std::string* key_base58);
  private:
  const std::string& _internal_key_base58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_base58(const std::string& value);
  std::string* _internal_mutable_key_base58();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.user_accounts.MyUserAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_base58_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_base58_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2fuser_5faccounts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserAccounts

// bool get_default_user_account = 1;
inline bool UserAccounts::_internal_has_get_default_user_account() const {
  return message_case() == kGetDefaultUserAccount;
}
inline bool UserAccounts::has_get_default_user_account() const {
  return _internal_has_get_default_user_account();
}
inline void UserAccounts::set_has_get_default_user_account() {
  _impl_._oneof_case_[0] = kGetDefaultUserAccount;
}
inline void UserAccounts::clear_get_default_user_account() {
  if (_internal_has_get_default_user_account()) {
    _impl_.message_.get_default_user_account_ = false;
    clear_has_message();
  }
}
inline bool UserAccounts::_internal_get_default_user_account() const {
  if (_internal_has_get_default_user_account()) {
    return _impl_.message_.get_default_user_account_;
  }
  return false;
}
inline void UserAccounts::_internal_set_get_default_user_account(bool value) {
  if (!_internal_has_get_default_user_account()) {
    clear_message();
    set_has_get_default_user_account();
  }
  _impl_.message_.get_default_user_account_ = value;
}
inline bool UserAccounts::get_default_user_account() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.UserAccounts.get_default_user_account)
  return _internal_get_default_user_account();
}
inline void UserAccounts::set_get_default_user_account(bool value) {
  _internal_set_get_default_user_account(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.UserAccounts.get_default_user_account)
}

// .qaul.rpc.user_accounts.CreateUserAccount create_user_account = 2;
inline bool UserAccounts::_internal_has_create_user_account() const {
  return message_case() == kCreateUserAccount;
}
inline bool UserAccounts::has_create_user_account() const {
  return _internal_has_create_user_account();
}
inline void UserAccounts::set_has_create_user_account() {
  _impl_._oneof_case_[0] = kCreateUserAccount;
}
inline void UserAccounts::clear_create_user_account() {
  if (_internal_has_create_user_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.create_user_account_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::user_accounts::CreateUserAccount* UserAccounts::release_create_user_account() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.UserAccounts.create_user_account)
  if (_internal_has_create_user_account()) {
    clear_has_message();
    ::qaul::rpc::user_accounts::CreateUserAccount* temp = _impl_.message_.create_user_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.create_user_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::user_accounts::CreateUserAccount& UserAccounts::_internal_create_user_account() const {
  return _internal_has_create_user_account()
      ? *_impl_.message_.create_user_account_
      : reinterpret_cast< ::qaul::rpc::user_accounts::CreateUserAccount&>(::qaul::rpc::user_accounts::_CreateUserAccount_default_instance_);
}
inline const ::qaul::rpc::user_accounts::CreateUserAccount& UserAccounts::create_user_account() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.UserAccounts.create_user_account)
  return _internal_create_user_account();
}
inline ::qaul::rpc::user_accounts::CreateUserAccount* UserAccounts::unsafe_arena_release_create_user_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.user_accounts.UserAccounts.create_user_account)
  if (_internal_has_create_user_account()) {
    clear_has_message();
    ::qaul::rpc::user_accounts::CreateUserAccount* temp = _impl_.message_.create_user_account_;
    _impl_.message_.create_user_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserAccounts::unsafe_arena_set_allocated_create_user_account(::qaul::rpc::user_accounts::CreateUserAccount* create_user_account) {
  clear_message();
  if (create_user_account) {
    set_has_create_user_account();
    _impl_.message_.create_user_account_ = create_user_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.user_accounts.UserAccounts.create_user_account)
}
inline ::qaul::rpc::user_accounts::CreateUserAccount* UserAccounts::_internal_mutable_create_user_account() {
  if (!_internal_has_create_user_account()) {
    clear_message();
    set_has_create_user_account();
    _impl_.message_.create_user_account_ = CreateMaybeMessage< ::qaul::rpc::user_accounts::CreateUserAccount >(GetArenaForAllocation());
  }
  return _impl_.message_.create_user_account_;
}
inline ::qaul::rpc::user_accounts::CreateUserAccount* UserAccounts::mutable_create_user_account() {
  ::qaul::rpc::user_accounts::CreateUserAccount* _msg = _internal_mutable_create_user_account();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.UserAccounts.create_user_account)
  return _msg;
}

// .qaul.rpc.user_accounts.DefaultUserAccount default_user_account = 3;
inline bool UserAccounts::_internal_has_default_user_account() const {
  return message_case() == kDefaultUserAccount;
}
inline bool UserAccounts::has_default_user_account() const {
  return _internal_has_default_user_account();
}
inline void UserAccounts::set_has_default_user_account() {
  _impl_._oneof_case_[0] = kDefaultUserAccount;
}
inline void UserAccounts::clear_default_user_account() {
  if (_internal_has_default_user_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.default_user_account_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::user_accounts::DefaultUserAccount* UserAccounts::release_default_user_account() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.UserAccounts.default_user_account)
  if (_internal_has_default_user_account()) {
    clear_has_message();
    ::qaul::rpc::user_accounts::DefaultUserAccount* temp = _impl_.message_.default_user_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.default_user_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::user_accounts::DefaultUserAccount& UserAccounts::_internal_default_user_account() const {
  return _internal_has_default_user_account()
      ? *_impl_.message_.default_user_account_
      : reinterpret_cast< ::qaul::rpc::user_accounts::DefaultUserAccount&>(::qaul::rpc::user_accounts::_DefaultUserAccount_default_instance_);
}
inline const ::qaul::rpc::user_accounts::DefaultUserAccount& UserAccounts::default_user_account() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.UserAccounts.default_user_account)
  return _internal_default_user_account();
}
inline ::qaul::rpc::user_accounts::DefaultUserAccount* UserAccounts::unsafe_arena_release_default_user_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.user_accounts.UserAccounts.default_user_account)
  if (_internal_has_default_user_account()) {
    clear_has_message();
    ::qaul::rpc::user_accounts::DefaultUserAccount* temp = _impl_.message_.default_user_account_;
    _impl_.message_.default_user_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserAccounts::unsafe_arena_set_allocated_default_user_account(::qaul::rpc::user_accounts::DefaultUserAccount* default_user_account) {
  clear_message();
  if (default_user_account) {
    set_has_default_user_account();
    _impl_.message_.default_user_account_ = default_user_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.user_accounts.UserAccounts.default_user_account)
}
inline ::qaul::rpc::user_accounts::DefaultUserAccount* UserAccounts::_internal_mutable_default_user_account() {
  if (!_internal_has_default_user_account()) {
    clear_message();
    set_has_default_user_account();
    _impl_.message_.default_user_account_ = CreateMaybeMessage< ::qaul::rpc::user_accounts::DefaultUserAccount >(GetArenaForAllocation());
  }
  return _impl_.message_.default_user_account_;
}
inline ::qaul::rpc::user_accounts::DefaultUserAccount* UserAccounts::mutable_default_user_account() {
  ::qaul::rpc::user_accounts::DefaultUserAccount* _msg = _internal_mutable_default_user_account();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.UserAccounts.default_user_account)
  return _msg;
}

// .qaul.rpc.user_accounts.MyUserAccount my_user_account = 4;
inline bool UserAccounts::_internal_has_my_user_account() const {
  return message_case() == kMyUserAccount;
}
inline bool UserAccounts::has_my_user_account() const {
  return _internal_has_my_user_account();
}
inline void UserAccounts::set_has_my_user_account() {
  _impl_._oneof_case_[0] = kMyUserAccount;
}
inline void UserAccounts::clear_my_user_account() {
  if (_internal_has_my_user_account()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.my_user_account_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::user_accounts::MyUserAccount* UserAccounts::release_my_user_account() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.UserAccounts.my_user_account)
  if (_internal_has_my_user_account()) {
    clear_has_message();
    ::qaul::rpc::user_accounts::MyUserAccount* temp = _impl_.message_.my_user_account_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.my_user_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::user_accounts::MyUserAccount& UserAccounts::_internal_my_user_account() const {
  return _internal_has_my_user_account()
      ? *_impl_.message_.my_user_account_
      : reinterpret_cast< ::qaul::rpc::user_accounts::MyUserAccount&>(::qaul::rpc::user_accounts::_MyUserAccount_default_instance_);
}
inline const ::qaul::rpc::user_accounts::MyUserAccount& UserAccounts::my_user_account() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.UserAccounts.my_user_account)
  return _internal_my_user_account();
}
inline ::qaul::rpc::user_accounts::MyUserAccount* UserAccounts::unsafe_arena_release_my_user_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.user_accounts.UserAccounts.my_user_account)
  if (_internal_has_my_user_account()) {
    clear_has_message();
    ::qaul::rpc::user_accounts::MyUserAccount* temp = _impl_.message_.my_user_account_;
    _impl_.message_.my_user_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserAccounts::unsafe_arena_set_allocated_my_user_account(::qaul::rpc::user_accounts::MyUserAccount* my_user_account) {
  clear_message();
  if (my_user_account) {
    set_has_my_user_account();
    _impl_.message_.my_user_account_ = my_user_account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.user_accounts.UserAccounts.my_user_account)
}
inline ::qaul::rpc::user_accounts::MyUserAccount* UserAccounts::_internal_mutable_my_user_account() {
  if (!_internal_has_my_user_account()) {
    clear_message();
    set_has_my_user_account();
    _impl_.message_.my_user_account_ = CreateMaybeMessage< ::qaul::rpc::user_accounts::MyUserAccount >(GetArenaForAllocation());
  }
  return _impl_.message_.my_user_account_;
}
inline ::qaul::rpc::user_accounts::MyUserAccount* UserAccounts::mutable_my_user_account() {
  ::qaul::rpc::user_accounts::MyUserAccount* _msg = _internal_mutable_my_user_account();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.UserAccounts.my_user_account)
  return _msg;
}

inline bool UserAccounts::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void UserAccounts::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline UserAccounts::MessageCase UserAccounts::message_case() const {
  return UserAccounts::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateUserAccount

// string name = 1;
inline void CreateUserAccount::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateUserAccount::name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.CreateUserAccount.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserAccount::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.CreateUserAccount.name)
}
inline std::string* CreateUserAccount::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.CreateUserAccount.name)
  return _s;
}
inline const std::string& CreateUserAccount::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateUserAccount::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUserAccount::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateUserAccount::release_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.CreateUserAccount.name)
  return _impl_.name_.Release();
}
inline void CreateUserAccount::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.CreateUserAccount.name)
}

// -------------------------------------------------------------------

// DefaultUserAccount

// bool user_account_exists = 1;
inline void DefaultUserAccount::clear_user_account_exists() {
  _impl_.user_account_exists_ = false;
}
inline bool DefaultUserAccount::_internal_user_account_exists() const {
  return _impl_.user_account_exists_;
}
inline bool DefaultUserAccount::user_account_exists() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.DefaultUserAccount.user_account_exists)
  return _internal_user_account_exists();
}
inline void DefaultUserAccount::_internal_set_user_account_exists(bool value) {
  
  _impl_.user_account_exists_ = value;
}
inline void DefaultUserAccount::set_user_account_exists(bool value) {
  _internal_set_user_account_exists(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.DefaultUserAccount.user_account_exists)
}

// .qaul.rpc.user_accounts.MyUserAccount my_user_account = 2;
inline bool DefaultUserAccount::_internal_has_my_user_account() const {
  return this != internal_default_instance() && _impl_.my_user_account_ != nullptr;
}
inline bool DefaultUserAccount::has_my_user_account() const {
  return _internal_has_my_user_account();
}
inline void DefaultUserAccount::clear_my_user_account() {
  if (GetArenaForAllocation() == nullptr && _impl_.my_user_account_ != nullptr) {
    delete _impl_.my_user_account_;
  }
  _impl_.my_user_account_ = nullptr;
}
inline const ::qaul::rpc::user_accounts::MyUserAccount& DefaultUserAccount::_internal_my_user_account() const {
  const ::qaul::rpc::user_accounts::MyUserAccount* p = _impl_.my_user_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::rpc::user_accounts::MyUserAccount&>(
      ::qaul::rpc::user_accounts::_MyUserAccount_default_instance_);
}
inline const ::qaul::rpc::user_accounts::MyUserAccount& DefaultUserAccount::my_user_account() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.DefaultUserAccount.my_user_account)
  return _internal_my_user_account();
}
inline void DefaultUserAccount::unsafe_arena_set_allocated_my_user_account(
    ::qaul::rpc::user_accounts::MyUserAccount* my_user_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_user_account_);
  }
  _impl_.my_user_account_ = my_user_account;
  if (my_user_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.user_accounts.DefaultUserAccount.my_user_account)
}
inline ::qaul::rpc::user_accounts::MyUserAccount* DefaultUserAccount::release_my_user_account() {
  
  ::qaul::rpc::user_accounts::MyUserAccount* temp = _impl_.my_user_account_;
  _impl_.my_user_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::rpc::user_accounts::MyUserAccount* DefaultUserAccount::unsafe_arena_release_my_user_account() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.DefaultUserAccount.my_user_account)
  
  ::qaul::rpc::user_accounts::MyUserAccount* temp = _impl_.my_user_account_;
  _impl_.my_user_account_ = nullptr;
  return temp;
}
inline ::qaul::rpc::user_accounts::MyUserAccount* DefaultUserAccount::_internal_mutable_my_user_account() {
  
  if (_impl_.my_user_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::rpc::user_accounts::MyUserAccount>(GetArenaForAllocation());
    _impl_.my_user_account_ = p;
  }
  return _impl_.my_user_account_;
}
inline ::qaul::rpc::user_accounts::MyUserAccount* DefaultUserAccount::mutable_my_user_account() {
  ::qaul::rpc::user_accounts::MyUserAccount* _msg = _internal_mutable_my_user_account();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.DefaultUserAccount.my_user_account)
  return _msg;
}
inline void DefaultUserAccount::set_allocated_my_user_account(::qaul::rpc::user_accounts::MyUserAccount* my_user_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.my_user_account_;
  }
  if (my_user_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(my_user_account);
    if (message_arena != submessage_arena) {
      my_user_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_user_account, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.my_user_account_ = my_user_account;
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.DefaultUserAccount.my_user_account)
}

// -------------------------------------------------------------------

// MyUserAccount

// string name = 1;
inline void MyUserAccount::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MyUserAccount::name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.MyUserAccount.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyUserAccount::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.MyUserAccount.name)
}
inline std::string* MyUserAccount::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.MyUserAccount.name)
  return _s;
}
inline const std::string& MyUserAccount::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MyUserAccount::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MyUserAccount::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MyUserAccount::release_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.MyUserAccount.name)
  return _impl_.name_.Release();
}
inline void MyUserAccount::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.MyUserAccount.name)
}

// bytes id = 2;
inline void MyUserAccount::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& MyUserAccount::id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.MyUserAccount.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyUserAccount::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.MyUserAccount.id)
}
inline std::string* MyUserAccount::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.MyUserAccount.id)
  return _s;
}
inline const std::string& MyUserAccount::_internal_id() const {
  return _impl_.id_.Get();
}
inline void MyUserAccount::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* MyUserAccount::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* MyUserAccount::release_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.MyUserAccount.id)
  return _impl_.id_.Release();
}
inline void MyUserAccount::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.MyUserAccount.id)
}

// string id_base58 = 3;
inline void MyUserAccount::clear_id_base58() {
  _impl_.id_base58_.ClearToEmpty();
}
inline const std::string& MyUserAccount::id_base58() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.MyUserAccount.id_base58)
  return _internal_id_base58();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyUserAccount::set_id_base58(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_base58_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.MyUserAccount.id_base58)
}
inline std::string* MyUserAccount::mutable_id_base58() {
  std::string* _s = _internal_mutable_id_base58();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.MyUserAccount.id_base58)
  return _s;
}
inline const std::string& MyUserAccount::_internal_id_base58() const {
  return _impl_.id_base58_.Get();
}
inline void MyUserAccount::_internal_set_id_base58(const std::string& value) {
  
  _impl_.id_base58_.Set(value, GetArenaForAllocation());
}
inline std::string* MyUserAccount::_internal_mutable_id_base58() {
  
  return _impl_.id_base58_.Mutable(GetArenaForAllocation());
}
inline std::string* MyUserAccount::release_id_base58() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.MyUserAccount.id_base58)
  return _impl_.id_base58_.Release();
}
inline void MyUserAccount::set_allocated_id_base58(std::string* id_base58) {
  if (id_base58 != nullptr) {
    
  } else {
    
  }
  _impl_.id_base58_.SetAllocated(id_base58, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_base58_.IsDefault()) {
    _impl_.id_base58_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.MyUserAccount.id_base58)
}

// bytes key = 4;
inline void MyUserAccount::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& MyUserAccount::key() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.MyUserAccount.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyUserAccount::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.MyUserAccount.key)
}
inline std::string* MyUserAccount::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.MyUserAccount.key)
  return _s;
}
inline const std::string& MyUserAccount::_internal_key() const {
  return _impl_.key_.Get();
}
inline void MyUserAccount::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* MyUserAccount::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* MyUserAccount::release_key() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.MyUserAccount.key)
  return _impl_.key_.Release();
}
inline void MyUserAccount::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.MyUserAccount.key)
}

// string key_type = 5;
inline void MyUserAccount::clear_key_type() {
  _impl_.key_type_.ClearToEmpty();
}
inline const std::string& MyUserAccount::key_type() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.MyUserAccount.key_type)
  return _internal_key_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyUserAccount::set_key_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.MyUserAccount.key_type)
}
inline std::string* MyUserAccount::mutable_key_type() {
  std::string* _s = _internal_mutable_key_type();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.MyUserAccount.key_type)
  return _s;
}
inline const std::string& MyUserAccount::_internal_key_type() const {
  return _impl_.key_type_.Get();
}
inline void MyUserAccount::_internal_set_key_type(const std::string& value) {
  
  _impl_.key_type_.Set(value, GetArenaForAllocation());
}
inline std::string* MyUserAccount::_internal_mutable_key_type() {
  
  return _impl_.key_type_.Mutable(GetArenaForAllocation());
}
inline std::string* MyUserAccount::release_key_type() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.MyUserAccount.key_type)
  return _impl_.key_type_.Release();
}
inline void MyUserAccount::set_allocated_key_type(std::string* key_type) {
  if (key_type != nullptr) {
    
  } else {
    
  }
  _impl_.key_type_.SetAllocated(key_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_type_.IsDefault()) {
    _impl_.key_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.MyUserAccount.key_type)
}

// string key_base58 = 6;
inline void MyUserAccount::clear_key_base58() {
  _impl_.key_base58_.ClearToEmpty();
}
inline const std::string& MyUserAccount::key_base58() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.user_accounts.MyUserAccount.key_base58)
  return _internal_key_base58();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyUserAccount::set_key_base58(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_base58_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.user_accounts.MyUserAccount.key_base58)
}
inline std::string* MyUserAccount::mutable_key_base58() {
  std::string* _s = _internal_mutable_key_base58();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.user_accounts.MyUserAccount.key_base58)
  return _s;
}
inline const std::string& MyUserAccount::_internal_key_base58() const {
  return _impl_.key_base58_.Get();
}
inline void MyUserAccount::_internal_set_key_base58(const std::string& value) {
  
  _impl_.key_base58_.Set(value, GetArenaForAllocation());
}
inline std::string* MyUserAccount::_internal_mutable_key_base58() {
  
  return _impl_.key_base58_.Mutable(GetArenaForAllocation());
}
inline std::string* MyUserAccount::release_key_base58() {
  // @@protoc_insertion_point(field_release:qaul.rpc.user_accounts.MyUserAccount.key_base58)
  return _impl_.key_base58_.Release();
}
inline void MyUserAccount::set_allocated_key_base58(std::string* key_base58) {
  if (key_base58 != nullptr) {
    
  } else {
    
  }
  _impl_.key_base58_.SetAllocated(key_base58, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_base58_.IsDefault()) {
    _impl_.key_base58_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.user_accounts.MyUserAccount.key_base58)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_accounts
}  // namespace rpc
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fuser_5faccounts_2eproto
