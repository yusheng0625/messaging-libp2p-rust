// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: router/router.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Connection modules
enum Qaul_Rpc_Router_ConnectionModule: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case lan // = 1
  case internet // = 2
  case ble // = 3
  case local // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .lan
    case 2: self = .internet
    case 3: self = .ble
    case 4: self = .local
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .lan: return 1
    case .internet: return 2
    case .ble: return 3
    case .local: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Qaul_Rpc_Router_ConnectionModule: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Qaul_Rpc_Router_ConnectionModule] = [
    .none,
    .lan,
    .internet,
    .ble,
    .local,
  ]
}

#endif  // swift(>=4.2)

/// router rpc message container
struct Qaul_Rpc_Router_Router {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Qaul_Rpc_Router_Router.OneOf_Message? = nil

  var routingTableRequest: Qaul_Rpc_Router_RoutingTableRequest {
    get {
      if case .routingTableRequest(let v)? = message {return v}
      return Qaul_Rpc_Router_RoutingTableRequest()
    }
    set {message = .routingTableRequest(newValue)}
  }

  var routingTable: Qaul_Rpc_Router_RoutingTableList {
    get {
      if case .routingTable(let v)? = message {return v}
      return Qaul_Rpc_Router_RoutingTableList()
    }
    set {message = .routingTable(newValue)}
  }

  var connectionsRequest: Qaul_Rpc_Router_ConnectionsRequest {
    get {
      if case .connectionsRequest(let v)? = message {return v}
      return Qaul_Rpc_Router_ConnectionsRequest()
    }
    set {message = .connectionsRequest(newValue)}
  }

  var connectionsList: Qaul_Rpc_Router_ConnectionsList {
    get {
      if case .connectionsList(let v)? = message {return v}
      return Qaul_Rpc_Router_ConnectionsList()
    }
    set {message = .connectionsList(newValue)}
  }

  var neighboursRequest: Qaul_Rpc_Router_NeighboursRequest {
    get {
      if case .neighboursRequest(let v)? = message {return v}
      return Qaul_Rpc_Router_NeighboursRequest()
    }
    set {message = .neighboursRequest(newValue)}
  }

  var neighboursList: Qaul_Rpc_Router_NeighboursList {
    get {
      if case .neighboursList(let v)? = message {return v}
      return Qaul_Rpc_Router_NeighboursList()
    }
    set {message = .neighboursList(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    case routingTableRequest(Qaul_Rpc_Router_RoutingTableRequest)
    case routingTable(Qaul_Rpc_Router_RoutingTableList)
    case connectionsRequest(Qaul_Rpc_Router_ConnectionsRequest)
    case connectionsList(Qaul_Rpc_Router_ConnectionsList)
    case neighboursRequest(Qaul_Rpc_Router_NeighboursRequest)
    case neighboursList(Qaul_Rpc_Router_NeighboursList)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Router_Router.OneOf_Message, rhs: Qaul_Rpc_Router_Router.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.routingTableRequest, .routingTableRequest): return {
        guard case .routingTableRequest(let l) = lhs, case .routingTableRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.routingTable, .routingTable): return {
        guard case .routingTable(let l) = lhs, case .routingTable(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionsRequest, .connectionsRequest): return {
        guard case .connectionsRequest(let l) = lhs, case .connectionsRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionsList, .connectionsList): return {
        guard case .connectionsList(let l) = lhs, case .connectionsList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.neighboursRequest, .neighboursRequest): return {
        guard case .neighboursRequest(let l) = lhs, case .neighboursRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.neighboursList, .neighboursList): return {
        guard case .neighboursList(let l) = lhs, case .neighboursList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// UI request for routing table list
struct Qaul_Rpc_Router_RoutingTableRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Routing table list
/// This table presents the best view for each user.
/// It represents the decision the router takes
/// when sending and routing packages
struct Qaul_Rpc_Router_RoutingTableList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var routingTable: [Qaul_Rpc_Router_RoutingTableEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Routing table user entry
/// This message contains the best connection to this
/// user per module
struct Qaul_Rpc_Router_RoutingTableEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: Data = Data()

  var connections: [Qaul_Rpc_Router_RoutingTableConnection] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Routing table connection entry.
/// This message contains a connection to a specific user.
struct Qaul_Rpc_Router_RoutingTableConnection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the connection module (LAN, Internet, BLE, etc.)
  var module: Qaul_Rpc_Router_ConnectionModule = .none

  /// the round trip time for this connection
  var rtt: UInt32 = 0

  /// hop count
  var hopCount: UInt32 = 0

  /// node id via which this connection is routed
  var via: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UI request for connections list
struct Qaul_Rpc_Router_ConnectionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Connections list per module.
/// All connections per user per module.
struct Qaul_Rpc_Router_ConnectionsList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// users connected via the LAN module
  var lan: [Qaul_Rpc_Router_ConnectionsUserEntry] = []

  /// users connected via the Internet module
  var internet: [Qaul_Rpc_Router_ConnectionsUserEntry] = []

  /// users connected via the BLE module
  var ble: [Qaul_Rpc_Router_ConnectionsUserEntry] = []

  /// users connected locally (on the same node)
  var local: [Qaul_Rpc_Router_ConnectionsUserEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// connections entry for a user
struct Qaul_Rpc_Router_ConnectionsUserEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the id of the user
  var userID: Data = Data()

  /// all connections to this user via this module
  var connections: [Qaul_Rpc_Router_ConnectionEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// all connections of this user
struct Qaul_Rpc_Router_ConnectionEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// round trip time in milli seconds
  var rtt: UInt32 = 0

  /// hop count to the user.
  /// This represents the number of nodes between this node and the user.
  var hopCount: UInt32 = 0

  /// connection can be established via the node with the following id
  var via: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UI request for neighbours list
struct Qaul_Rpc_Router_NeighboursRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// neighbours list per module
struct Qaul_Rpc_Router_NeighboursList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lan: [Qaul_Rpc_Router_NeighboursEntry] = []

  var internet: [Qaul_Rpc_Router_NeighboursEntry] = []

  var ble: [Qaul_Rpc_Router_NeighboursEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// neighbours entry
struct Qaul_Rpc_Router_NeighboursEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the ID of the neighbour node
  var nodeID: Data = Data()

  /// rtt to this neighbour
  var rtt: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.router"

extension Qaul_Rpc_Router_ConnectionModule: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "LAN"),
    2: .same(proto: "INTERNET"),
    3: .same(proto: "BLE"),
    4: .same(proto: "LOCAL"),
  ]
}

extension Qaul_Rpc_Router_Router: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Router"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "routing_table_request"),
    2: .standard(proto: "routing_table"),
    3: .standard(proto: "connections_request"),
    4: .standard(proto: "connections_list"),
    5: .standard(proto: "neighbours_request"),
    6: .standard(proto: "neighbours_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Router_RoutingTableRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .routingTableRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .routingTableRequest(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Router_RoutingTableList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .routingTable(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .routingTable(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Router_ConnectionsRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .connectionsRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .connectionsRequest(v)
        }
      }()
      case 4: try {
        var v: Qaul_Rpc_Router_ConnectionsList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .connectionsList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .connectionsList(v)
        }
      }()
      case 5: try {
        var v: Qaul_Rpc_Router_NeighboursRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .neighboursRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .neighboursRequest(v)
        }
      }()
      case 6: try {
        var v: Qaul_Rpc_Router_NeighboursList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .neighboursList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .neighboursList(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .routingTableRequest?: try {
      guard case .routingTableRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .routingTable?: try {
      guard case .routingTable(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .connectionsRequest?: try {
      guard case .connectionsRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .connectionsList?: try {
      guard case .connectionsList(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .neighboursRequest?: try {
      guard case .neighboursRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .neighboursList?: try {
      guard case .neighboursList(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_Router, rhs: Qaul_Rpc_Router_Router) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_RoutingTableRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoutingTableRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_RoutingTableRequest, rhs: Qaul_Rpc_Router_RoutingTableRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_RoutingTableList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoutingTableList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "routing_table"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.routingTable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.routingTable.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routingTable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_RoutingTableList, rhs: Qaul_Rpc_Router_RoutingTableList) -> Bool {
    if lhs.routingTable != rhs.routingTable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_RoutingTableEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoutingTableEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "connections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.userID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.connections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularBytesField(value: self.userID, fieldNumber: 1)
    }
    if !self.connections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.connections, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_RoutingTableEntry, rhs: Qaul_Rpc_Router_RoutingTableEntry) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.connections != rhs.connections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_RoutingTableConnection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoutingTableConnection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "module"),
    3: .same(proto: "rtt"),
    5: .standard(proto: "hop_count"),
    4: .same(proto: "via"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularEnumField(value: &self.module) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.rtt) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.via) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.hopCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.module != .none {
      try visitor.visitSingularEnumField(value: self.module, fieldNumber: 2)
    }
    if self.rtt != 0 {
      try visitor.visitSingularUInt32Field(value: self.rtt, fieldNumber: 3)
    }
    if !self.via.isEmpty {
      try visitor.visitSingularBytesField(value: self.via, fieldNumber: 4)
    }
    if self.hopCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.hopCount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_RoutingTableConnection, rhs: Qaul_Rpc_Router_RoutingTableConnection) -> Bool {
    if lhs.module != rhs.module {return false}
    if lhs.rtt != rhs.rtt {return false}
    if lhs.hopCount != rhs.hopCount {return false}
    if lhs.via != rhs.via {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_ConnectionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_ConnectionsRequest, rhs: Qaul_Rpc_Router_ConnectionsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_ConnectionsList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionsList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lan"),
    2: .same(proto: "internet"),
    3: .same(proto: "ble"),
    4: .same(proto: "local"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.lan) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.internet) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.ble) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.local) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lan.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lan, fieldNumber: 1)
    }
    if !self.internet.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.internet, fieldNumber: 2)
    }
    if !self.ble.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ble, fieldNumber: 3)
    }
    if !self.local.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.local, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_ConnectionsList, rhs: Qaul_Rpc_Router_ConnectionsList) -> Bool {
    if lhs.lan != rhs.lan {return false}
    if lhs.internet != rhs.internet {return false}
    if lhs.ble != rhs.ble {return false}
    if lhs.local != rhs.local {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_ConnectionsUserEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionsUserEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "connections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.userID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.connections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularBytesField(value: self.userID, fieldNumber: 1)
    }
    if !self.connections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.connections, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_ConnectionsUserEntry, rhs: Qaul_Rpc_Router_ConnectionsUserEntry) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.connections != rhs.connections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_ConnectionEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rtt"),
    2: .standard(proto: "hop_count"),
    3: .same(proto: "via"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.rtt) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.hopCount) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.via) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rtt != 0 {
      try visitor.visitSingularUInt32Field(value: self.rtt, fieldNumber: 1)
    }
    if self.hopCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.hopCount, fieldNumber: 2)
    }
    if !self.via.isEmpty {
      try visitor.visitSingularBytesField(value: self.via, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_ConnectionEntry, rhs: Qaul_Rpc_Router_ConnectionEntry) -> Bool {
    if lhs.rtt != rhs.rtt {return false}
    if lhs.hopCount != rhs.hopCount {return false}
    if lhs.via != rhs.via {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_NeighboursRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NeighboursRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_NeighboursRequest, rhs: Qaul_Rpc_Router_NeighboursRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_NeighboursList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NeighboursList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lan"),
    2: .same(proto: "internet"),
    3: .same(proto: "ble"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.lan) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.internet) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.ble) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lan.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lan, fieldNumber: 1)
    }
    if !self.internet.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.internet, fieldNumber: 2)
    }
    if !self.ble.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ble, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_NeighboursList, rhs: Qaul_Rpc_Router_NeighboursList) -> Bool {
    if lhs.lan != rhs.lan {return false}
    if lhs.internet != rhs.internet {return false}
    if lhs.ble != rhs.ble {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Router_NeighboursEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NeighboursEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .same(proto: "rtt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.rtt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeID.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodeID, fieldNumber: 1)
    }
    if self.rtt != 0 {
      try visitor.visitSingularUInt32Field(value: self.rtt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Router_NeighboursEntry, rhs: Qaul_Rpc_Router_NeighboursEntry) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.rtt != rhs.rtt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
