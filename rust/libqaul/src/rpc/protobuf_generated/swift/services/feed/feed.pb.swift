// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/feed/feed.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Feed service RPC message container
struct Qaul_Rpc_Feed_Feed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message type
  var message: Qaul_Rpc_Feed_Feed.OneOf_Message? = nil

  /// received messages
  var received: Qaul_Rpc_Feed_FeedMessageList {
    get {
      if case .received(let v)? = message {return v}
      return Qaul_Rpc_Feed_FeedMessageList()
    }
    set {message = .received(newValue)}
  }

  /// send a new feed message
  var send: Qaul_Rpc_Feed_SendMessage {
    get {
      if case .send(let v)? = message {return v}
      return Qaul_Rpc_Feed_SendMessage()
    }
    set {message = .send(newValue)}
  }

  /// request received messages
  var request: Qaul_Rpc_Feed_FeedMessageRequest {
    get {
      if case .request(let v)? = message {return v}
      return Qaul_Rpc_Feed_FeedMessageRequest()
    }
    set {message = .request(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// message type
  enum OneOf_Message: Equatable {
    /// received messages
    case received(Qaul_Rpc_Feed_FeedMessageList)
    /// send a new feed message
    case send(Qaul_Rpc_Feed_SendMessage)
    /// request received messages
    case request(Qaul_Rpc_Feed_FeedMessageRequest)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Feed_Feed.OneOf_Message, rhs: Qaul_Rpc_Feed_Feed.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.received, .received): return {
        guard case .received(let l) = lhs, case .received(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.send, .send): return {
        guard case .send(let l) = lhs, case .send(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.request, .request): return {
        guard case .request(let l) = lhs, case .request(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// request feed messages
struct Qaul_Rpc_Feed_FeedMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DEPRECATED
  var lastReceived: Data = Data()

  /// Index of the last message received
  ///
  /// The message index is a continues numbering
  /// of incoming messages in the database of the node.
  ///
  /// When this variable is set, only 
  /// newer messages will be sent.
  /// Default value is 0, when the value
  /// is 0, all feed messages will be sent.
  var lastIndex: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// List of feed messages
struct Qaul_Rpc_Feed_FeedMessageList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedMessage: [Qaul_Rpc_Feed_FeedMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A single feed message
struct Qaul_Rpc_Feed_FeedMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var senderID: Data = Data()

  /// DEPRECATED
  var senderIDBase58: String = String()

  var messageID: Data = Data()

  /// DEPRECATED
  var messageIDBase58: String = String()

  /// DEPRECATED
  var timeSent: String = String()

  var timestampSent: UInt64 = 0

  /// DEPRECATED
  var timeReceived: String = String()

  var timestampReceived: UInt64 = 0

  var content: String = String()

  var index: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// send feed message
struct Qaul_Rpc_Feed_SendMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.feed"

extension Qaul_Rpc_Feed_Feed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Feed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "received"),
    2: .same(proto: "send"),
    3: .same(proto: "request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Feed_FeedMessageList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .received(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .received(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Feed_SendMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .send(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .send(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Feed_FeedMessageRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .request(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .request(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .received?: try {
      guard case .received(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .send?: try {
      guard case .send(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .request?: try {
      guard case .request(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Feed_Feed, rhs: Qaul_Rpc_Feed_Feed) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Feed_FeedMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedMessageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_received"),
    2: .standard(proto: "last_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.lastReceived) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lastIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lastReceived.isEmpty {
      try visitor.visitSingularBytesField(value: self.lastReceived, fieldNumber: 1)
    }
    if self.lastIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Feed_FeedMessageRequest, rhs: Qaul_Rpc_Feed_FeedMessageRequest) -> Bool {
    if lhs.lastReceived != rhs.lastReceived {return false}
    if lhs.lastIndex != rhs.lastIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Feed_FeedMessageList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedMessageList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.feedMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedMessage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Feed_FeedMessageList, rhs: Qaul_Rpc_Feed_FeedMessageList) -> Bool {
    if lhs.feedMessage != rhs.feedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Feed_FeedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_id"),
    2: .standard(proto: "sender_id_base58"),
    3: .standard(proto: "message_id"),
    4: .standard(proto: "message_id_base58"),
    5: .standard(proto: "time_sent"),
    9: .standard(proto: "timestamp_sent"),
    6: .standard(proto: "time_received"),
    10: .standard(proto: "timestamp_received"),
    7: .same(proto: "content"),
    8: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.senderID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.senderIDBase58) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.messageID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.messageIDBase58) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.timeSent) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.timeReceived) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.timestampSent) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.timestampReceived) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderID.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderID, fieldNumber: 1)
    }
    if !self.senderIDBase58.isEmpty {
      try visitor.visitSingularStringField(value: self.senderIDBase58, fieldNumber: 2)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularBytesField(value: self.messageID, fieldNumber: 3)
    }
    if !self.messageIDBase58.isEmpty {
      try visitor.visitSingularStringField(value: self.messageIDBase58, fieldNumber: 4)
    }
    if !self.timeSent.isEmpty {
      try visitor.visitSingularStringField(value: self.timeSent, fieldNumber: 5)
    }
    if !self.timeReceived.isEmpty {
      try visitor.visitSingularStringField(value: self.timeReceived, fieldNumber: 6)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 7)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 8)
    }
    if self.timestampSent != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestampSent, fieldNumber: 9)
    }
    if self.timestampReceived != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestampReceived, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Feed_FeedMessage, rhs: Qaul_Rpc_Feed_FeedMessage) -> Bool {
    if lhs.senderID != rhs.senderID {return false}
    if lhs.senderIDBase58 != rhs.senderIDBase58 {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.messageIDBase58 != rhs.messageIDBase58 {return false}
    if lhs.timeSent != rhs.timeSent {return false}
    if lhs.timestampSent != rhs.timestampSent {return false}
    if lhs.timeReceived != rhs.timeReceived {return false}
    if lhs.timestampReceived != rhs.timestampReceived {return false}
    if lhs.content != rhs.content {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Feed_SendMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Feed_SendMessage, rhs: Qaul_Rpc_Feed_SendMessage) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
