// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/chat/chat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Sending status of sent messages
enum Qaul_Rpc_Chat_MessageStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// message not sent yet
  ///
  /// this state is used for receiving files too
  case sending // = 0

  /// message successfully sent to another node
  case sent // = 1

  /// reciption has been confirmed
  case confirmed // = 2

  /// all group members confirmed that they received
  /// the message
  case confirmedByAll // = 3

  /// message receiving
  case receiving // = 4

  /// message received
  case received // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .sending
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sending
    case 1: self = .sent
    case 2: self = .confirmed
    case 3: self = .confirmedByAll
    case 4: self = .receiving
    case 5: self = .received
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .sending: return 0
    case .sent: return 1
    case .confirmed: return 2
    case .confirmedByAll: return 3
    case .receiving: return 4
    case .received: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Qaul_Rpc_Chat_MessageStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Qaul_Rpc_Chat_MessageStatus] = [
    .sending,
    .sent,
    .confirmed,
    .confirmedByAll,
    .receiving,
    .received,
  ]
}

#endif  // swift(>=4.2)

/// Group info type definition
enum Qaul_Rpc_Chat_GroupEventType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// default value, undefined message
  /// ignore this message
  case `default` // = 0

  /// user invited to group
  case invited // = 1

  /// user joined group
  case joined // = 2

  /// user left group
  case left // = 3

  /// your user was removed
  case removed // = 4

  /// group was closed
  case closed // = 5

  /// group was created
  case created // = 6

  /// group invite was accepted
  ///
  /// this state indicates, that we accepted
  /// an invite, but that we haven't received
  /// the group update from the administrator yet,
  /// and are therefore not yet an official member of the group.
  case inviteAccepted // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .default
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .invited
    case 2: self = .joined
    case 3: self = .left
    case 4: self = .removed
    case 5: self = .closed
    case 6: self = .created
    case 7: self = .inviteAccepted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .default: return 0
    case .invited: return 1
    case .joined: return 2
    case .left: return 3
    case .removed: return 4
    case .closed: return 5
    case .created: return 6
    case .inviteAccepted: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Qaul_Rpc_Chat_GroupEventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Qaul_Rpc_Chat_GroupEventType] = [
    .default,
    .invited,
    .joined,
    .left,
    .removed,
    .closed,
    .created,
    .inviteAccepted,
  ]
}

#endif  // swift(>=4.2)

/// Chat service RPC message container
struct Qaul_Rpc_Chat_Chat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message type
  var message: Qaul_Rpc_Chat_Chat.OneOf_Message? = nil

  /// request a specific conversation
  var conversationRequest: Qaul_Rpc_Chat_ChatConversationRequest {
    get {
      if case .conversationRequest(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatConversationRequest()
    }
    set {message = .conversationRequest(newValue)}
  }

  /// list of a chat conversation
  var conversationList: Qaul_Rpc_Chat_ChatConversationList {
    get {
      if case .conversationList(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatConversationList()
    }
    set {message = .conversationList(newValue)}
  }

  /// send a new chat message
  var send: Qaul_Rpc_Chat_ChatMessageSend {
    get {
      if case .send(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatMessageSend()
    }
    set {message = .send(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// message type
  enum OneOf_Message: Equatable {
    /// request a specific conversation
    case conversationRequest(Qaul_Rpc_Chat_ChatConversationRequest)
    /// list of a chat conversation
    case conversationList(Qaul_Rpc_Chat_ChatConversationList)
    /// send a new chat message
    case send(Qaul_Rpc_Chat_ChatMessageSend)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Chat_Chat.OneOf_Message, rhs: Qaul_Rpc_Chat_Chat.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.conversationRequest, .conversationRequest): return {
        guard case .conversationRequest(let l) = lhs, case .conversationRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationList, .conversationList): return {
        guard case .conversationList(let l) = lhs, case .conversationList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.send, .send): return {
        guard case .send(let l) = lhs, case .send(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// request messages of a specific chat conversation
struct Qaul_Rpc_Chat_ChatConversationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// group id
  var groupID: Data = Data()

  /// send only changes that are newer than the last received
  var lastIndex: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// list of chat messages of a specific conversation
struct Qaul_Rpc_Chat_ChatConversationList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// group id
  var groupID: Data = Data()

  /// several messages
  var messageList: [Qaul_Rpc_Chat_ChatMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// a single chat message
struct Qaul_Rpc_Chat_ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// index
  var index: UInt64 = 0

  /// id of the sending user
  var senderID: Data = Data()

  /// message id or member id
  var messageID: Data = Data()

  /// message status
  var status: Qaul_Rpc_Chat_MessageStatus = .sending

  /// message reception confirmed
  ///
  /// When a user receives a message, sent by us,
  /// the user is confirming the reception of this message.
  /// We are only getting this confirmation if we are the sender of this
  /// message.
  var messageReceptionConfirmed: [Qaul_Rpc_Chat_MessageReceptionConfirmed] = []

  /// group id
  var groupID: Data = Data()

  /// time when the message was sent
  var sentAt: UInt64 = 0

  /// time when the message was received
  var receivedAt: UInt64 = 0

  /// chat content message
  var content: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// message reception confirmed
struct Qaul_Rpc_Chat_MessageReceptionConfirmed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// user id
  var userID: Data = Data()

  /// time of confirmation
  var confirmedAt: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// chat content message
struct Qaul_Rpc_Chat_ChatContentMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Qaul_Rpc_Chat_ChatContentMessage.OneOf_Message? = nil

  /// a chat content message
  var chatContent: Qaul_Rpc_Chat_ChatContent {
    get {
      if case .chatContent(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatContent()
    }
    set {message = .chatContent(newValue)}
  }

  /// a file content message
  var fileContent: Qaul_Rpc_Chat_FileContent {
    get {
      if case .fileContent(let v)? = message {return v}
      return Qaul_Rpc_Chat_FileContent()
    }
    set {message = .fileContent(newValue)}
  }

  /// a group event information
  var groupEvent: Qaul_Rpc_Chat_GroupEvent {
    get {
      if case .groupEvent(let v)? = message {return v}
      return Qaul_Rpc_Chat_GroupEvent()
    }
    set {message = .groupEvent(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    /// a chat content message
    case chatContent(Qaul_Rpc_Chat_ChatContent)
    /// a file content message
    case fileContent(Qaul_Rpc_Chat_FileContent)
    /// a group event information
    case groupEvent(Qaul_Rpc_Chat_GroupEvent)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Chat_ChatContentMessage.OneOf_Message, rhs: Qaul_Rpc_Chat_ChatContentMessage.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.chatContent, .chatContent): return {
        guard case .chatContent(let l) = lhs, case .chatContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.fileContent, .fileContent): return {
        guard case .fileContent(let l) = lhs, case .fileContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.groupEvent, .groupEvent): return {
        guard case .groupEvent(let l) = lhs, case .groupEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// chat content
struct Qaul_Rpc_Chat_ChatContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message text
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// file content
struct Qaul_Rpc_Chat_FileContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// file id
  var fileID: UInt64 = 0

  /// file name
  var fileName: String = String()

  /// file extension
  var fileExtension: String = String()

  /// file size
  var fileSize: UInt32 = 0

  /// file description
  var fileDescription: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Group event information
/// this message is purely informational
struct Qaul_Rpc_Chat_GroupEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// group event type
  var eventType: Qaul_Rpc_Chat_GroupEventType = .default

  /// user ID of user joined or left
  var userID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// send chat message
struct Qaul_Rpc_Chat_ChatMessageSend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// group id to which this message is sent
  var groupID: Data = Data()

  /// content of the message
  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.chat"

extension Qaul_Rpc_Chat_MessageStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SENDING"),
    1: .same(proto: "SENT"),
    2: .same(proto: "CONFIRMED"),
    3: .same(proto: "CONFIRMED_BY_ALL"),
    4: .same(proto: "RECEIVING"),
    5: .same(proto: "RECEIVED"),
  ]
}

extension Qaul_Rpc_Chat_GroupEventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "INVITED"),
    2: .same(proto: "JOINED"),
    3: .same(proto: "LEFT"),
    4: .same(proto: "REMOVED"),
    5: .same(proto: "CLOSED"),
    6: .same(proto: "CREATED"),
    7: .same(proto: "INVITE_ACCEPTED"),
  ]
}

extension Qaul_Rpc_Chat_Chat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "conversation_request"),
    4: .standard(proto: "conversation_list"),
    5: .same(proto: "send"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try {
        var v: Qaul_Rpc_Chat_ChatConversationRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .conversationRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .conversationRequest(v)
        }
      }()
      case 4: try {
        var v: Qaul_Rpc_Chat_ChatConversationList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .conversationList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .conversationList(v)
        }
      }()
      case 5: try {
        var v: Qaul_Rpc_Chat_ChatMessageSend?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .send(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .send(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .conversationRequest?: try {
      guard case .conversationRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .conversationList?: try {
      guard case .conversationList(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .send?: try {
      guard case .send(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_Chat, rhs: Qaul_Rpc_Chat_Chat) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatConversationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatConversationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "last_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lastIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 1)
    }
    if self.lastIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatConversationRequest, rhs: Qaul_Rpc_Chat_ChatConversationRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.lastIndex != rhs.lastIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatConversationList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatConversationList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "message_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.messageList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 1)
    }
    if !self.messageList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatConversationList, rhs: Qaul_Rpc_Chat_ChatConversationList) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.messageList != rhs.messageList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .standard(proto: "sender_id"),
    3: .standard(proto: "message_id"),
    4: .same(proto: "status"),
    10: .standard(proto: "message_reception_confirmed"),
    5: .standard(proto: "group_id"),
    6: .standard(proto: "sent_at"),
    7: .standard(proto: "received_at"),
    8: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.senderID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.messageID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.sentAt) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.receivedAt) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.messageReceptionConfirmed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 1)
    }
    if !self.senderID.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderID, fieldNumber: 2)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularBytesField(value: self.messageID, fieldNumber: 3)
    }
    if self.status != .sending {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 5)
    }
    if self.sentAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.sentAt, fieldNumber: 6)
    }
    if self.receivedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.receivedAt, fieldNumber: 7)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 8)
    }
    if !self.messageReceptionConfirmed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageReceptionConfirmed, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatMessage, rhs: Qaul_Rpc_Chat_ChatMessage) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.senderID != rhs.senderID {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.messageReceptionConfirmed != rhs.messageReceptionConfirmed {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.sentAt != rhs.sentAt {return false}
    if lhs.receivedAt != rhs.receivedAt {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_MessageReceptionConfirmed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MessageReceptionConfirmed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "confirmed_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.confirmedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularBytesField(value: self.userID, fieldNumber: 1)
    }
    if self.confirmedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.confirmedAt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_MessageReceptionConfirmed, rhs: Qaul_Rpc_Chat_MessageReceptionConfirmed) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.confirmedAt != rhs.confirmedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatContentMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatContentMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_content"),
    2: .standard(proto: "file_content"),
    3: .standard(proto: "group_event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Chat_ChatContent?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .chatContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .chatContent(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Chat_FileContent?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .fileContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .fileContent(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Chat_GroupEvent?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .groupEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .groupEvent(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .chatContent?: try {
      guard case .chatContent(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .fileContent?: try {
      guard case .fileContent(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .groupEvent?: try {
      guard case .groupEvent(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatContentMessage, rhs: Qaul_Rpc_Chat_ChatContentMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatContent, rhs: Qaul_Rpc_Chat_ChatContent) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_FileContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_id"),
    2: .standard(proto: "file_name"),
    3: .standard(proto: "file_extension"),
    4: .standard(proto: "file_size"),
    5: .standard(proto: "file_description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.fileID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fileName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.fileExtension) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.fileSize) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.fileDescription) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fileID != 0 {
      try visitor.visitSingularUInt64Field(value: self.fileID, fieldNumber: 1)
    }
    if !self.fileName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileName, fieldNumber: 2)
    }
    if !self.fileExtension.isEmpty {
      try visitor.visitSingularStringField(value: self.fileExtension, fieldNumber: 3)
    }
    if self.fileSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.fileSize, fieldNumber: 4)
    }
    if !self.fileDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.fileDescription, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_FileContent, rhs: Qaul_Rpc_Chat_FileContent) -> Bool {
    if lhs.fileID != rhs.fileID {return false}
    if lhs.fileName != rhs.fileName {return false}
    if lhs.fileExtension != rhs.fileExtension {return false}
    if lhs.fileSize != rhs.fileSize {return false}
    if lhs.fileDescription != rhs.fileDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_GroupEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_type"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.eventType) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eventType != .default {
      try visitor.visitSingularEnumField(value: self.eventType, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularBytesField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_GroupEvent, rhs: Qaul_Rpc_Chat_GroupEvent) -> Bool {
    if lhs.eventType != rhs.eventType {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatMessageSend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessageSend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatMessageSend, rhs: Qaul_Rpc_Chat_ChatMessageSend) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
