// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/chat/chatfile_rpc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Chat file RPC message container
struct Qaul_Rpc_Chatfile_ChatFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message type
  var message: Qaul_Rpc_Chatfile_ChatFile.OneOf_Message? = nil

  /// send file request
  ///
  /// this messages sends a file from UI to libqaul
  var sendFileRequest: Qaul_Rpc_Chatfile_SendFileRequest {
    get {
      if case .sendFileRequest(let v)? = message {return v}
      return Qaul_Rpc_Chatfile_SendFileRequest()
    }
    set {message = .sendFileRequest(newValue)}
  }

  /// send file response
  ///
  /// response message from libqaul to the UI about
  /// the result of the send file request
  var sendFileResponse: Qaul_Rpc_Chatfile_SendFileResponse {
    get {
      if case .sendFileResponse(let v)? = message {return v}
      return Qaul_Rpc_Chatfile_SendFileResponse()
    }
    set {message = .sendFileResponse(newValue)}
  }

  /// file history request
  ///
  /// request a paginated list of
  var fileHistory: Qaul_Rpc_Chatfile_FileHistoryRequest {
    get {
      if case .fileHistory(let v)? = message {return v}
      return Qaul_Rpc_Chatfile_FileHistoryRequest()
    }
    set {message = .fileHistory(newValue)}
  }

  /// file history response
  ///
  /// delivers the requested list of
  var fileHistoryResponse: Qaul_Rpc_Chatfile_FileHistoryResponse {
    get {
      if case .fileHistoryResponse(let v)? = message {return v}
      return Qaul_Rpc_Chatfile_FileHistoryResponse()
    }
    set {message = .fileHistoryResponse(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// message type
  enum OneOf_Message: Equatable {
    /// send file request
    ///
    /// this messages sends a file from UI to libqaul
    case sendFileRequest(Qaul_Rpc_Chatfile_SendFileRequest)
    /// send file response
    ///
    /// response message from libqaul to the UI about
    /// the result of the send file request
    case sendFileResponse(Qaul_Rpc_Chatfile_SendFileResponse)
    /// file history request
    ///
    /// request a paginated list of
    case fileHistory(Qaul_Rpc_Chatfile_FileHistoryRequest)
    /// file history response
    ///
    /// delivers the requested list of
    case fileHistoryResponse(Qaul_Rpc_Chatfile_FileHistoryResponse)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Chatfile_ChatFile.OneOf_Message, rhs: Qaul_Rpc_Chatfile_ChatFile.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.sendFileRequest, .sendFileRequest): return {
        guard case .sendFileRequest(let l) = lhs, case .sendFileRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sendFileResponse, .sendFileResponse): return {
        guard case .sendFileResponse(let l) = lhs, case .sendFileResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.fileHistory, .fileHistory): return {
        guard case .fileHistory(let l) = lhs, case .fileHistory(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.fileHistoryResponse, .fileHistoryResponse): return {
        guard case .fileHistoryResponse(let l) = lhs, case .fileHistoryResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Send File Request
///
/// UI requests libqaul to send a file
struct Qaul_Rpc_Chatfile_SendFileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// file path with file name to send
  var pathName: String = String()

  /// group id to receive file
  var groupID: Data = Data()

  /// file description text to be sent in the message
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Send File Response
///
/// sends the result of the file send request to the UI
struct Qaul_Rpc_Chatfile_SendFileResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// was the file processing successful
  ///
  /// a success does not mean the file has been sent,
  /// but that it was successfully scheduled for sending.
  var success: Bool = false

  /// error reason
  var error: String = String()

  /// file ID (only present if the sending was a success)
  var fileID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// File History Request
struct Qaul_Rpc_Chatfile_FileHistoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// offset
  var offset: UInt32 = 0

  /// limit
  var limit: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// File History Entry
struct Qaul_Rpc_Chatfile_FileHistoryEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// file id
  var fileID: UInt64 = 0

  /// file name (without extension)
  var fileName: String = String()

  /// file extension
  var fileExtension: String = String()

  /// file size
  var fileSize: UInt32 = 0

  /// file description
  var fileDescription: String = String()

  /// time
  var time: UInt64 = 0

  /// sender id
  var senderID: String = String()

  /// group id
  var groupID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// File History Response
struct Qaul_Rpc_Chatfile_FileHistoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// offset
  var offset: UInt32 = 0

  /// limit
  var limit: UInt32 = 0

  /// limit
  var total: UInt64 = 0

  /// histories
  var histories: [Qaul_Rpc_Chatfile_FileHistoryEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.chatfile"

extension Qaul_Rpc_Chatfile_ChatFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatFile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "send_file_request"),
    2: .standard(proto: "send_file_response"),
    3: .standard(proto: "file_history"),
    4: .standard(proto: "file_history_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Chatfile_SendFileRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .sendFileRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .sendFileRequest(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Chatfile_SendFileResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .sendFileResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .sendFileResponse(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Chatfile_FileHistoryRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .fileHistory(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .fileHistory(v)
        }
      }()
      case 4: try {
        var v: Qaul_Rpc_Chatfile_FileHistoryResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .fileHistoryResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .fileHistoryResponse(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .sendFileRequest?: try {
      guard case .sendFileRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .sendFileResponse?: try {
      guard case .sendFileResponse(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .fileHistory?: try {
      guard case .fileHistory(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .fileHistoryResponse?: try {
      guard case .fileHistoryResponse(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chatfile_ChatFile, rhs: Qaul_Rpc_Chatfile_ChatFile) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chatfile_SendFileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendFileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "path_name"),
    2: .standard(proto: "group_id"),
    3: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pathName) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pathName.isEmpty {
      try visitor.visitSingularStringField(value: self.pathName, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chatfile_SendFileRequest, rhs: Qaul_Rpc_Chatfile_SendFileRequest) -> Bool {
    if lhs.pathName != rhs.pathName {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chatfile_SendFileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendFileResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "error"),
    3: .standard(proto: "file_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.error) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.fileID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
    }
    if self.fileID != 0 {
      try visitor.visitSingularUInt64Field(value: self.fileID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chatfile_SendFileResponse, rhs: Qaul_Rpc_Chatfile_SendFileResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.error != rhs.error {return false}
    if lhs.fileID != rhs.fileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chatfile_FileHistoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileHistoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
    2: .same(proto: "limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.offset) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.limit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chatfile_FileHistoryRequest, rhs: Qaul_Rpc_Chatfile_FileHistoryRequest) -> Bool {
    if lhs.offset != rhs.offset {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chatfile_FileHistoryEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileHistoryEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_id"),
    2: .standard(proto: "file_name"),
    3: .standard(proto: "file_extension"),
    4: .standard(proto: "file_size"),
    5: .standard(proto: "file_description"),
    6: .same(proto: "time"),
    7: .standard(proto: "sender_id"),
    8: .standard(proto: "group_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.fileID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fileName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.fileExtension) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.fileSize) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.fileDescription) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.time) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.senderID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fileID != 0 {
      try visitor.visitSingularUInt64Field(value: self.fileID, fieldNumber: 1)
    }
    if !self.fileName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileName, fieldNumber: 2)
    }
    if !self.fileExtension.isEmpty {
      try visitor.visitSingularStringField(value: self.fileExtension, fieldNumber: 3)
    }
    if self.fileSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.fileSize, fieldNumber: 4)
    }
    if !self.fileDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.fileDescription, fieldNumber: 5)
    }
    if self.time != 0 {
      try visitor.visitSingularUInt64Field(value: self.time, fieldNumber: 6)
    }
    if !self.senderID.isEmpty {
      try visitor.visitSingularStringField(value: self.senderID, fieldNumber: 7)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chatfile_FileHistoryEntry, rhs: Qaul_Rpc_Chatfile_FileHistoryEntry) -> Bool {
    if lhs.fileID != rhs.fileID {return false}
    if lhs.fileName != rhs.fileName {return false}
    if lhs.fileExtension != rhs.fileExtension {return false}
    if lhs.fileSize != rhs.fileSize {return false}
    if lhs.fileDescription != rhs.fileDescription {return false}
    if lhs.time != rhs.time {return false}
    if lhs.senderID != rhs.senderID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chatfile_FileHistoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileHistoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
    2: .same(proto: "limit"),
    3: .same(proto: "total"),
    4: .same(proto: "histories"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.offset) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.limit) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.total) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.histories) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularUInt64Field(value: self.total, fieldNumber: 3)
    }
    if !self.histories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.histories, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chatfile_FileHistoryResponse, rhs: Qaul_Rpc_Chatfile_FileHistoryResponse) -> Bool {
    if lhs.offset != rhs.offset {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.total != rhs.total {return false}
    if lhs.histories != rhs.histories {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
