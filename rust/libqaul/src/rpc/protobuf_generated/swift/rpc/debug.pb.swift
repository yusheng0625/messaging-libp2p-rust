// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc/debug.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Libqaul RPC Debug Messages
struct Qaul_Rpc_Debug_Debug {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message type
  var message: Qaul_Rpc_Debug_Debug.OneOf_Message? = nil

  /// request a heartbeat
  var heartbeatRequest: Qaul_Rpc_Debug_HeartbeatRequest {
    get {
      if case .heartbeatRequest(let v)? = message {return v}
      return Qaul_Rpc_Debug_HeartbeatRequest()
    }
    set {message = .heartbeatRequest(newValue)}
  }

  /// response to the heartbeat request
  var heartbeatResponse: Qaul_Rpc_Debug_HeartbeatResponse {
    get {
      if case .heartbeatResponse(let v)? = message {return v}
      return Qaul_Rpc_Debug_HeartbeatResponse()
    }
    set {message = .heartbeatResponse(newValue)}
  }

  /// libqaul panics immediately
  var panic: Qaul_Rpc_Debug_Panic {
    get {
      if case .panic(let v)? = message {return v}
      return Qaul_Rpc_Debug_Panic()
    }
    set {message = .panic(newValue)}
  }

  /// enable/disable logging to file
  var logToFile: Qaul_Rpc_Debug_LogToFile {
    get {
      if case .logToFile(let v)? = message {return v}
      return Qaul_Rpc_Debug_LogToFile()
    }
    set {message = .logToFile(newValue)}
  }

  /// Storage Path Request
  var storagePathRequest: Qaul_Rpc_Debug_StoragePathRequest {
    get {
      if case .storagePathRequest(let v)? = message {return v}
      return Qaul_Rpc_Debug_StoragePathRequest()
    }
    set {message = .storagePathRequest(newValue)}
  }

  /// Storage Path Response
  var storagePathResponse: Qaul_Rpc_Debug_StoragePathResponse {
    get {
      if case .storagePathResponse(let v)? = message {return v}
      return Qaul_Rpc_Debug_StoragePathResponse()
    }
    set {message = .storagePathResponse(newValue)}
  }

  /// Request for library to delete logs
  var deleteLibqaulLogsRequest: Qaul_Rpc_Debug_DeleteLibqaulLogsRequest {
    get {
      if case .deleteLibqaulLogsRequest(let v)? = message {return v}
      return Qaul_Rpc_Debug_DeleteLibqaulLogsRequest()
    }
    set {message = .deleteLibqaulLogsRequest(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// message type
  enum OneOf_Message: Equatable {
    /// request a heartbeat
    case heartbeatRequest(Qaul_Rpc_Debug_HeartbeatRequest)
    /// response to the heartbeat request
    case heartbeatResponse(Qaul_Rpc_Debug_HeartbeatResponse)
    /// libqaul panics immediately
    case panic(Qaul_Rpc_Debug_Panic)
    /// enable/disable logging to file
    case logToFile(Qaul_Rpc_Debug_LogToFile)
    /// Storage Path Request
    case storagePathRequest(Qaul_Rpc_Debug_StoragePathRequest)
    /// Storage Path Response
    case storagePathResponse(Qaul_Rpc_Debug_StoragePathResponse)
    /// Request for library to delete logs
    case deleteLibqaulLogsRequest(Qaul_Rpc_Debug_DeleteLibqaulLogsRequest)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Debug_Debug.OneOf_Message, rhs: Qaul_Rpc_Debug_Debug.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.heartbeatRequest, .heartbeatRequest): return {
        guard case .heartbeatRequest(let l) = lhs, case .heartbeatRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.heartbeatResponse, .heartbeatResponse): return {
        guard case .heartbeatResponse(let l) = lhs, case .heartbeatResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.panic, .panic): return {
        guard case .panic(let l) = lhs, case .panic(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.logToFile, .logToFile): return {
        guard case .logToFile(let l) = lhs, case .logToFile(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.storagePathRequest, .storagePathRequest): return {
        guard case .storagePathRequest(let l) = lhs, case .storagePathRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.storagePathResponse, .storagePathResponse): return {
        guard case .storagePathResponse(let l) = lhs, case .storagePathResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deleteLibqaulLogsRequest, .deleteLibqaulLogsRequest): return {
        guard case .deleteLibqaulLogsRequest(let l) = lhs, case .deleteLibqaulLogsRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Request a Heartbeat from Libqaul
///
/// The UI requests regular heartbeats from libqaul,
/// to check if libqaul is still alive
struct Qaul_Rpc_Debug_HeartbeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Heartbeat Reply
///
/// Libqaul answers to the heartbeat request
/// with the heartbeat reply answer
struct Qaul_Rpc_Debug_HeartbeatResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Panic
///
/// If libqaul receives this panic message, it
/// throws an error and panics immediatly.
///
/// This message is for debugging only.
struct Qaul_Rpc_Debug_Panic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// LogToFile
///
/// If libqaul receives this enable message, it
/// start or stop to log error contents into error_xxx.log file.
struct Qaul_Rpc_Debug_LogToFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// StoragePathRequest
///
/// Return storage path
struct Qaul_Rpc_Debug_StoragePathRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// StoragePathResponse
///
/// Contains Storage Path
struct Qaul_Rpc_Debug_StoragePathResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var storagePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DeleteLibqaulLogsRequest
///
/// Requests for the log folder to be wiped clean
struct Qaul_Rpc_Debug_DeleteLibqaulLogsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.debug"

extension Qaul_Rpc_Debug_Debug: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Debug"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "heartbeat_request"),
    2: .standard(proto: "heartbeat_response"),
    3: .same(proto: "panic"),
    4: .standard(proto: "log_to_file"),
    5: .standard(proto: "storage_path_request"),
    6: .standard(proto: "storage_path_response"),
    7: .standard(proto: "delete_libqaul_logs_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Debug_HeartbeatRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeatRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeatRequest(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Debug_HeartbeatResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeatResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeatResponse(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Debug_Panic?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .panic(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .panic(v)
        }
      }()
      case 4: try {
        var v: Qaul_Rpc_Debug_LogToFile?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .logToFile(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .logToFile(v)
        }
      }()
      case 5: try {
        var v: Qaul_Rpc_Debug_StoragePathRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .storagePathRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .storagePathRequest(v)
        }
      }()
      case 6: try {
        var v: Qaul_Rpc_Debug_StoragePathResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .storagePathResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .storagePathResponse(v)
        }
      }()
      case 7: try {
        var v: Qaul_Rpc_Debug_DeleteLibqaulLogsRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .deleteLibqaulLogsRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .deleteLibqaulLogsRequest(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .heartbeatRequest?: try {
      guard case .heartbeatRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .heartbeatResponse?: try {
      guard case .heartbeatResponse(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .panic?: try {
      guard case .panic(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .logToFile?: try {
      guard case .logToFile(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .storagePathRequest?: try {
      guard case .storagePathRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .storagePathResponse?: try {
      guard case .storagePathResponse(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .deleteLibqaulLogsRequest?: try {
      guard case .deleteLibqaulLogsRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_Debug, rhs: Qaul_Rpc_Debug_Debug) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_HeartbeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeartbeatRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_HeartbeatRequest, rhs: Qaul_Rpc_Debug_HeartbeatRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_HeartbeatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeartbeatResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_HeartbeatResponse, rhs: Qaul_Rpc_Debug_HeartbeatResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_Panic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Panic"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_Panic, rhs: Qaul_Rpc_Debug_Panic) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_LogToFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogToFile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enable != false {
      try visitor.visitSingularBoolField(value: self.enable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_LogToFile, rhs: Qaul_Rpc_Debug_LogToFile) -> Bool {
    if lhs.enable != rhs.enable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_StoragePathRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoragePathRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_StoragePathRequest, rhs: Qaul_Rpc_Debug_StoragePathRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_StoragePathResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoragePathResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "storage_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.storagePath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.storagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.storagePath, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_StoragePathResponse, rhs: Qaul_Rpc_Debug_StoragePathResponse) -> Bool {
    if lhs.storagePath != rhs.storagePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_DeleteLibqaulLogsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteLibqaulLogsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_DeleteLibqaulLogsRequest, rhs: Qaul_Rpc_Debug_DeleteLibqaulLogsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
