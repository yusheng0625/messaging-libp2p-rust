syntax = "proto3";
package qaul.rpc.chatfile;

// Chat file RPC message container
message ChatFile {
    // message type
    oneof message {
        // send file request
        //
        // this messages sends a file from UI to libqaul
        SendFileRequest send_file_request = 1;
        // send file response
        //
        // response message from libqaul to the UI about
        // the result of the send file request
        SendFileResponse send_file_response = 2;

        // file history request
        //
        // request a paginated list of
        FileHistoryRequest file_history = 3;
        // file history response
        //
        // delivers the requested list of
        FileHistoryResponse file_history_response = 4;
    }
}

// Send File Request
//
// UI requests libqaul to send a file
message SendFileRequest {
    // file path with file name to send
    string path_name = 1;
    // group id to receive file
    bytes group_id = 2;
    // file description text to be sent in the message
    string description = 3;
}

// Send File Response
//
// sends the result of the file send request to the UI
message SendFileResponse {
    // was the file processing successful
    //
    // a success does not mean the file has been sent,
    // but that it was successfully scheduled for sending.
    bool success = 1;
    // error reason
    string error = 2;
    // file ID (only present if the sending was a success)
    uint64 file_id = 3;
}

// File History Request
message FileHistoryRequest {
    // offset
    uint32 offset = 1;
    // limit
    uint32 limit = 2;
}

// File History Entry
message FileHistoryEntry {
    // file id
    uint64 file_id = 1;
    // file name (without extension)
    string file_name = 2;
    // file extension
    string file_extension = 3;
    // file size
    uint32 file_size = 4;
    // file description
    string file_description = 5;
    // time
    uint64 time = 6;

    // sender id
    string sender_id = 7;

    // group id
    string group_id = 8;
}

// File History Response
message FileHistoryResponse {
    // offset
    uint32 offset = 1;
    // limit
    uint32 limit = 2;

    // limit
    uint64 total = 3;

    // histories
    repeated FileHistoryEntry histories = 4;
}
