syntax = "proto3";
package qaul.rpc.chat;

// Chat service RPC message container
message Chat {
    // message type
    oneof message {
        // request a specific conversation
        ChatConversationRequest conversation_request = 3;
        // list of a chat conversation
        ChatConversationList conversation_list = 4;

        // send a new chat message
        ChatMessageSend send = 5;
    }
}

// request messages of a specific chat conversation
message ChatConversationRequest {
    // group id
    bytes group_id = 1;
    // send only changes that are newer than the last received
    uint64 last_index = 2;
}

// list of chat messages of a specific conversation
message ChatConversationList {
    // group id
    bytes group_id = 1;
    // several messages
    repeated ChatMessage message_list = 2;
}

// a single chat message
message ChatMessage {
    // index
    uint64 index = 1;
    // id of the sending user
    bytes sender_id = 2;
    // message id or member id
    bytes message_id = 3;
    // message status
    MessageStatus status = 4;
    // message reception confirmed
    //
    // When a user receives a message, sent by us,
    // the user is confirming the reception of this message.
    // We are only getting this confirmation if we are the sender of this
    // message.
    repeated MessageReceptionConfirmed message_reception_confirmed = 10;
    // group id
    bytes group_id = 5;
    // time when the message was sent
    uint64 sent_at = 6;
    // time when the message was received
    uint64 received_at = 7;
    // chat content message
    bytes content = 8;
}

// Sending status of sent messages
enum MessageStatus {
    // message not sent yet
    //
    // this state is used for receiving files too
    SENDING = 0;
    // message successfully sent to another node
    SENT = 1;
    // reciption has been confirmed
    CONFIRMED = 2;
    // all group members confirmed that they received
    // the message
    CONFIRMED_BY_ALL = 3;
    // message receiving
    RECEIVING = 4;
    // message received
    RECEIVED = 5;
}

// message reception confirmed
message MessageReceptionConfirmed {
    // user id
    bytes user_id = 1;
    // time of confirmation
    uint64 confirmed_at = 2;
}

// chat content message
message ChatContentMessage {
    oneof message {
        // a chat content message
        ChatContent chat_content = 1;
        // a file content message
        FileContent file_content = 2;
        // a group event information
        GroupEvent group_event = 3;
    }
}

// chat content
message ChatContent {
    // message text
    string text = 1;
}

// file content
message FileContent {
    // file id
    uint64 file_id = 1;

    // file name
    string file_name = 2;

    // file extension
    string file_extension = 3;
    // file size
    uint32 file_size = 4;

    // file description
    string file_description = 5;
}

// Group event information
// this message is purely informational
message GroupEvent {
    // group event type
    GroupEventType event_type = 1;
    // user ID of user joined or left
    bytes user_id = 2;
}

// Group info type definition
enum GroupEventType {
    // default value, undefined message
    // ignore this message
    DEFAULT = 0;
    // user invited to group
    INVITED = 1;
    // user joined group
    JOINED = 2;
    // user left group
    LEFT = 3;
    // your user was removed
    REMOVED = 4;
    // group was closed
    CLOSED = 5;
    // group was created
    CREATED = 6;
    // group invite was accepted
    //
    // this state indicates, that we accepted
    // an invite, but that we haven't received
    // the group update from the administrator yet,
    // and are therefore not yet an official member of the group.
    INVITE_ACCEPTED = 7;
}

// send chat message
message ChatMessageSend {
    // group id to which this message is sent
    bytes group_id = 1;
    // content of the message
    string content = 2;
}
