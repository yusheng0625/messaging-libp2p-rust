syntax = "proto3";
package qaul.rpc.router;


// router rpc message container
message Router {
    oneof message {
        RoutingTableRequest routing_table_request = 1;
        RoutingTableList routing_table = 2;
        ConnectionsRequest connections_request = 3;
        ConnectionsList connections_list = 4;
        NeighboursRequest neighbours_request = 5;
        NeighboursList neighbours_list = 6;
    }
}

// Connection modules
enum ConnectionModule {
    NONE = 0;
    LAN = 1;
    INTERNET = 2;
    BLE = 3;
    LOCAL = 4;
}


// UI request for routing table list
message RoutingTableRequest {

}

// Routing table list
// This table presents the best view for each user.
// It represents the decision the router takes
// when sending and routing packages
message RoutingTableList {
    repeated RoutingTableEntry routing_table = 1;
}

// Routing table user entry
// This message contains the best connection to this
// user per module
message RoutingTableEntry {
    bytes user_id = 1;
    repeated RoutingTableConnection connections = 2;
}

// Routing table connection entry.
// This message contains a connection to a specific user.
message RoutingTableConnection {
    // the connection module (LAN, Internet, BLE, etc.)
    ConnectionModule module = 2;
    // the round trip time for this connection
    uint32 rtt = 3;
    // hop count
    uint32 hop_count = 5;
    // node id via which this connection is routed
    bytes via = 4;
}


// UI request for connections list
message ConnectionsRequest {

}

// Connections list per module.
// All connections per user per module.
message ConnectionsList {
    // users connected via the LAN module
    repeated ConnectionsUserEntry lan = 1;
    // users connected via the Internet module
    repeated ConnectionsUserEntry internet = 2;
    // users connected via the BLE module
    repeated ConnectionsUserEntry ble = 3;
    // users connected locally (on the same node)
    repeated ConnectionsUserEntry local = 4;
}

// connections entry for a user
message ConnectionsUserEntry {
    // the id of the user
    bytes user_id = 1;
    // all connections to this user via this module
    repeated ConnectionEntry connections = 2;
}

// all connections of this user
message ConnectionEntry {
    // round trip time in milli seconds
    uint32 rtt = 1;
    // hop count to the user.
    // This represents the number of nodes between this node and the user.
    uint32 hop_count = 2;
    // connection can be established via the node with the following id
    bytes via = 3;
}


// UI request for neighbours list
message NeighboursRequest {

}

// neighbours list per module
message NeighboursList {
    repeated NeighboursEntry lan = 1;
    repeated NeighboursEntry internet = 2;
    repeated NeighboursEntry ble = 3;
}

// neighbours entry
message NeighboursEntry {
    // the ID of the neighbour node
    bytes node_id = 1;
    // rtt to this neighbour
    uint32 rtt = 2;
}
